
Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000202  00800060  00003478  0000350c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800262  00800262  0000370e  2**0
                  ALLOC
  3 .stab         00002b20  00000000  00000000  00003710  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f3d  00000000  00000000  00006230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000716d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000072ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000074c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000094cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000a63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b640  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000baa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c34f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__vector_10>
      2c:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <main>
      8a:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e4       	ldi	r26, 0x4A	; 74
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e4       	ldi	r24, 0x4A	; 74
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ee 5a       	subi	r30, 0xAE	; 174
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CLCD_voidSendCommand>:
#include"DIO.h"
#include <avr/io.h>
#include <util/delay.h>
#include "CLCD.h"

void CLCD_voidSendCommand(u8 Copy_u8Command){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2f 97       	sbiw	r28, 0x0f	; 15
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	8f 87       	std	Y+15, r24	; 0x0f
    // Set RS (Register Select) and RW (Read/Write) pins to control mode
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_LOW);
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	62 e0       	ldi	r22, 0x02	; 2
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>

    // Set the data bus to the specified command
    DIO_SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	6f 85       	ldd	r22, Y+15	; 0x0f
     d04:	0e 94 1d 0b 	call	0x163a	; 0x163a <DIO_SetPortValue>

    // Toggle the E (Enable) pin to execute the command
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_HIGH);
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	64 e0       	ldi	r22, 0x04	; 4
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e4       	ldi	r27, 0x40	; 64
     d1a:	8b 87       	std	Y+11, r24	; 0x0b
     d1c:	9c 87       	std	Y+12, r25	; 0x0c
     d1e:	ad 87       	std	Y+13, r26	; 0x0d
     d20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	6b 85       	ldd	r22, Y+11	; 0x0b
     d24:	7c 85       	ldd	r23, Y+12	; 0x0c
     d26:	8d 85       	ldd	r24, Y+13	; 0x0d
     d28:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a ef       	ldi	r20, 0xFA	; 250
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8f 83       	std	Y+7, r24	; 0x07
     d3c:	98 87       	std	Y+8, r25	; 0x08
     d3e:	a9 87       	std	Y+9, r26	; 0x09
     d40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d42:	6f 81       	ldd	r22, Y+7	; 0x07
     d44:	78 85       	ldd	r23, Y+8	; 0x08
     d46:	89 85       	ldd	r24, Y+9	; 0x09
     d48:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d80:	8d 85       	ldd	r24, Y+13	; 0x0d
     d82:	9e 85       	ldd	r25, Y+14	; 0x0e
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <CLCD_voidSendCommand+0xee>
     da6:	88 ec       	ldi	r24, 0xC8	; 200
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <CLCD_voidSendCommand+0xdc>
     db6:	9c 83       	std	Y+4, r25	; 0x04
     db8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	8d 81       	ldd	r24, Y+5	; 0x05
     dbc:	9e 81       	ldd	r25, Y+6	; 0x06
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <CLCD_voidSendCommand+0xd0>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	6f 81       	ldd	r22, Y+7	; 0x07
     dd0:	78 85       	ldd	r23, Y+8	; 0x08
     dd2:	89 85       	ldd	r24, Y+9	; 0x09
     dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	9e 81       	ldd	r25, Y+6	; 0x06
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <CLCD_voidSendCommand+0x118>
     df2:	9a 83       	std	Y+2, r25	; 0x02
     df4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2); // Delay for stability
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_LOW);
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	64 e0       	ldi	r22, 0x04	; 4
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
     e00:	2f 96       	adiw	r28, 0x0f	; 15
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	2f 97       	sbiw	r28, 0x0f	; 15
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	8f 87       	std	Y+15, r24	; 0x0f
    // Set RS to data mode and RW to write mode
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_HIGH);
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	63 e0       	ldi	r22, 0x03	; 3
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>

    // Set the data bus to the specified data
    DIO_SetPortValue(CLCD_DATA_PORT, Copy_u8Data);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	6f 85       	ldd	r22, Y+15	; 0x0f
     e40:	0e 94 1d 0b 	call	0x163a	; 0x163a <DIO_SetPortValue>

    // Toggle the E (Enable) pin to send the data
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_HIGH);
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e4       	ldi	r27, 0x40	; 64
     e56:	8b 87       	std	Y+11, r24	; 0x0b
     e58:	9c 87       	std	Y+12, r25	; 0x0c
     e5a:	ad 87       	std	Y+13, r26	; 0x0d
     e5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e60:	7c 85       	ldd	r23, Y+12	; 0x0c
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	4a ef       	ldi	r20, 0xFA	; 250
     e6c:	54 e4       	ldi	r21, 0x44	; 68
     e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8f 83       	std	Y+7, r24	; 0x07
     e78:	98 87       	std	Y+8, r25	; 0x08
     e7a:	a9 87       	std	Y+9, r26	; 0x09
     e7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e92:	88 23       	and	r24, r24
     e94:	2c f4       	brge	.+10     	; 0xea0 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	4c f5       	brge	.+82     	; 0xf0a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <CLCD_voidSendData+0xee>
     ee2:	88 ec       	ldi	r24, 0xC8	; 200
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <CLCD_voidSendData+0xdc>
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f7       	brne	.-38     	; 0xee2 <CLCD_voidSendData+0xd0>
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <CLCD_voidSendData+0x118>
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2); // Delay for stability
    DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_LOW);
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	64 e0       	ldi	r22, 0x04	; 4
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
     f3c:	2f 96       	adiw	r28, 0x0f	; 15
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <CLCD_voidInitl>:

void CLCD_voidInitl(void){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	2e 97       	sbiw	r28, 0x0e	; 14
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e2       	ldi	r26, 0x20	; 32
     f68:	b2 e4       	ldi	r27, 0x42	; 66
     f6a:	8b 87       	std	Y+11, r24	; 0x0b
     f6c:	9c 87       	std	Y+12, r25	; 0x0c
     f6e:	ad 87       	std	Y+13, r26	; 0x0d
     f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f72:	6b 85       	ldd	r22, Y+11	; 0x0b
     f74:	7c 85       	ldd	r23, Y+12	; 0x0c
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4a ef       	ldi	r20, 0xFA	; 250
     f80:	54 e4       	ldi	r21, 0x44	; 68
     f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	8f 83       	std	Y+7, r24	; 0x07
     f8c:	98 87       	std	Y+8, r25	; 0x08
     f8e:	a9 87       	std	Y+9, r26	; 0x09
     f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f92:	6f 81       	ldd	r22, Y+7	; 0x07
     f94:	78 85       	ldd	r23, Y+8	; 0x08
     f96:	89 85       	ldd	r24, Y+9	; 0x09
     f98:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <CLCD_voidInitl+0x66>
		__ticks = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <CLCD_voidInitl+0xe4>
	else if (__tmp > 65535)
     fb4:	6f 81       	ldd	r22, Y+7	; 0x07
     fb6:	78 85       	ldd	r23, Y+8	; 0x08
     fb8:	89 85       	ldd	r24, Y+9	; 0x09
     fba:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	3f ef       	ldi	r19, 0xFF	; 255
     fc0:	4f e7       	ldi	r20, 0x7F	; 127
     fc2:	57 e4       	ldi	r21, 0x47	; 71
     fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fc8:	18 16       	cp	r1, r24
     fca:	4c f5       	brge	.+82     	; 0x101e <CLCD_voidInitl+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fce:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e2       	ldi	r20, 0x20	; 32
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <CLCD_voidInitl+0xc6>
     ff6:	88 ec       	ldi	r24, 0xC8	; 200
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <CLCD_voidInitl+0xb4>
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9e 83       	std	Y+6, r25	; 0x06
    1012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	69 f7       	brne	.-38     	; 0xff6 <CLCD_voidInitl+0xa8>
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <CLCD_voidInitl+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <CLCD_voidInitl+0xf0>
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(40); // Delay for LCD initialization
    CLCD_voidSendCommand(0b00111000); // Function Set (8-bit mode, 2 lines, 5x8 font)
    1046:	88 e3       	ldi	r24, 0x38	; 56
    1048:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(0b00001100); // Display ON, Cursor OFF, Blink OFF
    104c:	8c e0       	ldi	r24, 0x0C	; 12
    104e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
    CLCD_voidSendCommand(1); // Clear Display and Return Home
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
}
    1058:	2e 96       	adiw	r28, 0x0e	; 14
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <CLCD_voidString>:

void CLCD_voidString(const char* Copy_pcSrting){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <CLCD_voidString+0x6>
    1070:	0f 92       	push	r0
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02
    u8 x = 0;
    107a:	19 82       	std	Y+1, r1	; 0x01
    107c:	0e c0       	rjmp	.+28     	; 0x109a <CLCD_voidString+0x30>
    while (Copy_pcSrting[x] != 0) {
        // Send each character in the string to the LCD
        CLCD_voidSendData(Copy_pcSrting[x]);
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	fc 01       	movw	r30, r24
    108a:	e2 0f       	add	r30, r18
    108c:	f3 1f       	adc	r31, r19
    108e:	80 81       	ld	r24, Z
    1090:	0e 94 09 07 	call	0xe12	; 0xe12 <CLCD_voidSendData>
        x++;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	89 83       	std	Y+1, r24	; 0x01
    CLCD_voidSendCommand(1); // Clear Display and Return Home
}

void CLCD_voidString(const char* Copy_pcSrting){
    u8 x = 0;
    while (Copy_pcSrting[x] != 0) {
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	9b 81       	ldd	r25, Y+3	; 0x03
    10a4:	fc 01       	movw	r30, r24
    10a6:	e2 0f       	add	r30, r18
    10a8:	f3 1f       	adc	r31, r19
    10aa:	80 81       	ld	r24, Z
    10ac:	88 23       	and	r24, r24
    10ae:	39 f7       	brne	.-50     	; 0x107e <CLCD_voidString+0x14>
        // Send each character in the string to the LCD
        CLCD_voidSendData(Copy_pcSrting[x]);
        x++;
    }
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <CLCD_voidGoTo_X_Y>:

void CLCD_voidGoTo_X_Y(u8 Copy_u8Xpos, u8 Copy_u8Ypos){
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <CLCD_voidGoTo_X_Y+0x6>
    10c2:	0f 92       	push	r0
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Address;
    if (Copy_u8Xpos == 0) {
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	88 23       	and	r24, r24
    10d0:	19 f4       	brne	.+6      	; 0x10d8 <CLCD_voidGoTo_X_Y+0x1c>
        Local_u8Address = Copy_u8Ypos;
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <CLCD_voidGoTo_X_Y+0x28>
    } else if (Copy_u8Xpos == 1) {
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <CLCD_voidGoTo_X_Y+0x28>
        Local_u8Address = Copy_u8Ypos + 0x40;
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	80 5c       	subi	r24, 0xC0	; 192
    10e2:	89 83       	std	Y+1, r24	; 0x01
    }
    // Send a command to set the cursor position
    CLCD_voidSendCommand(Local_u8Address + 128);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	80 58       	subi	r24, 0x80	; 128
    10e8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <CLCD_voidLCD_Clear>:

void CLCD_voidLCD_Clear(void){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    // Send a command to clear the display
    CLCD_voidSendCommand(1);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_voidSendCommand>
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <DIO_SetPinDirection>:
#include"DIO.h"
#include <avr/io.h>
#include <util/delay.h>

// Function to set the direction (input/output) of a specific pin in a port
void DIO_SetPinDirection(u8 u8PortIDcopy, u8 u8PinIDcopy, u8 u8PinDircopy) {
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	27 97       	sbiw	r28, 0x07	; 7
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
    1124:	4b 83       	std	Y+3, r20	; 0x03
    if ((u8PortIDcopy <= DIO_PORTD) && (u8PinIDcopy <= DIO_PIN7)) {
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	08 f0       	brcs	.+2      	; 0x112e <DIO_SetPinDirection+0x22>
    112c:	11 c1       	rjmp	.+546    	; 0x1350 <DIO_SetPinDirection+0x244>
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	88 30       	cpi	r24, 0x08	; 8
    1132:	08 f0       	brcs	.+2      	; 0x1136 <DIO_SetPinDirection+0x2a>
    1134:	0d c1       	rjmp	.+538    	; 0x1350 <DIO_SetPinDirection+0x244>
        if (u8PinDircopy == DIO_OUTPUT) {
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	09 f0       	breq	.+2      	; 0x113e <DIO_SetPinDirection+0x32>
    113c:	81 c0       	rjmp	.+258    	; 0x1240 <DIO_SetPinDirection+0x134>
            switch (u8PortIDcopy) {
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	2e 83       	std	Y+6, r18	; 0x06
    1148:	8e 81       	ldd	r24, Y+6	; 0x06
    114a:	9f 81       	ldd	r25, Y+7	; 0x07
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	79 f1       	breq	.+94     	; 0x11b0 <DIO_SetPinDirection+0xa4>
    1152:	ee 81       	ldd	r30, Y+6	; 0x06
    1154:	ff 81       	ldd	r31, Y+7	; 0x07
    1156:	e2 30       	cpi	r30, 0x02	; 2
    1158:	f1 05       	cpc	r31, r1
    115a:	34 f4       	brge	.+12     	; 0x1168 <DIO_SetPinDirection+0x5c>
    115c:	2e 81       	ldd	r18, Y+6	; 0x06
    115e:	3f 81       	ldd	r19, Y+7	; 0x07
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_SetPinDirection+0x74>
    1166:	f4 c0       	rjmp	.+488    	; 0x1350 <DIO_SetPinDirection+0x244>
    1168:	8e 81       	ldd	r24, Y+6	; 0x06
    116a:	9f 81       	ldd	r25, Y+7	; 0x07
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	91 05       	cpc	r25, r1
    1170:	b9 f1       	breq	.+110    	; 0x11e0 <DIO_SetPinDirection+0xd4>
    1172:	ee 81       	ldd	r30, Y+6	; 0x06
    1174:	ff 81       	ldd	r31, Y+7	; 0x07
    1176:	e3 30       	cpi	r30, 0x03	; 3
    1178:	f1 05       	cpc	r31, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_SetPinDirection+0x72>
    117c:	49 c0       	rjmp	.+146    	; 0x1210 <DIO_SetPinDirection+0x104>
    117e:	e8 c0       	rjmp	.+464    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTA: SET_BIT(DDRA, u8PinIDcopy); break;
    1180:	4a e3       	ldi	r20, 0x3A	; 58
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	ea e3       	ldi	r30, 0x3A	; 58
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	60 81       	ld	r22, Z
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a0 e0       	ldi	r26, 0x00	; 0
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <DIO_SetPinDirection+0x98>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	aa 1f       	adc	r26, r26
    11a2:	bb 1f       	adc	r27, r27
    11a4:	0a 94       	dec	r0
    11a6:	d2 f7       	brpl	.-12     	; 0x119c <DIO_SetPinDirection+0x90>
    11a8:	86 2b       	or	r24, r22
    11aa:	fa 01       	movw	r30, r20
    11ac:	80 83       	st	Z, r24
    11ae:	d0 c0       	rjmp	.+416    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTB: SET_BIT(DDRB, u8PinIDcopy); break;
    11b0:	47 e3       	ldi	r20, 0x37	; 55
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	e7 e3       	ldi	r30, 0x37	; 55
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	60 81       	ld	r22, Z
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <DIO_SetPinDirection+0xc8>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	0a 94       	dec	r0
    11d6:	d2 f7       	brpl	.-12     	; 0x11cc <DIO_SetPinDirection+0xc0>
    11d8:	86 2b       	or	r24, r22
    11da:	fa 01       	movw	r30, r20
    11dc:	80 83       	st	Z, r24
    11de:	b8 c0       	rjmp	.+368    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTC: SET_BIT(DDRC, u8PinIDcopy); break;
    11e0:	44 e3       	ldi	r20, 0x34	; 52
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	e4 e3       	ldi	r30, 0x34	; 52
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	60 81       	ld	r22, Z
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <DIO_SetPinDirection+0xf8>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	aa 1f       	adc	r26, r26
    1202:	bb 1f       	adc	r27, r27
    1204:	0a 94       	dec	r0
    1206:	d2 f7       	brpl	.-12     	; 0x11fc <DIO_SetPinDirection+0xf0>
    1208:	86 2b       	or	r24, r22
    120a:	fa 01       	movw	r30, r20
    120c:	80 83       	st	Z, r24
    120e:	a0 c0       	rjmp	.+320    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTD: SET_BIT(DDRD, u8PinIDcopy); break;
    1210:	41 e3       	ldi	r20, 0x31	; 49
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	e1 e3       	ldi	r30, 0x31	; 49
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	60 81       	ld	r22, Z
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <DIO_SetPinDirection+0x128>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	0a 94       	dec	r0
    1236:	d2 f7       	brpl	.-12     	; 0x122c <DIO_SetPinDirection+0x120>
    1238:	86 2b       	or	r24, r22
    123a:	fa 01       	movw	r30, r20
    123c:	80 83       	st	Z, r24
    123e:	88 c0       	rjmp	.+272    	; 0x1350 <DIO_SetPinDirection+0x244>
            }
        } else if (u8PinDircopy == DIO_INPUT) {
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 23       	and	r24, r24
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO_SetPinDirection+0x13c>
    1246:	84 c0       	rjmp	.+264    	; 0x1350 <DIO_SetPinDirection+0x244>
            switch (u8PortIDcopy) {
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3d 83       	std	Y+5, r19	; 0x05
    1250:	2c 83       	std	Y+4, r18	; 0x04
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	81 f1       	breq	.+96     	; 0x12bc <DIO_SetPinDirection+0x1b0>
    125c:	ec 81       	ldd	r30, Y+4	; 0x04
    125e:	fd 81       	ldd	r31, Y+5	; 0x05
    1260:	e2 30       	cpi	r30, 0x02	; 2
    1262:	f1 05       	cpc	r31, r1
    1264:	34 f4       	brge	.+12     	; 0x1272 <DIO_SetPinDirection+0x166>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	69 f0       	breq	.+26     	; 0x128a <DIO_SetPinDirection+0x17e>
    1270:	6f c0       	rjmp	.+222    	; 0x1350 <DIO_SetPinDirection+0x244>
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	c9 f1       	breq	.+114    	; 0x12ee <DIO_SetPinDirection+0x1e2>
    127c:	ec 81       	ldd	r30, Y+4	; 0x04
    127e:	fd 81       	ldd	r31, Y+5	; 0x05
    1280:	e3 30       	cpi	r30, 0x03	; 3
    1282:	f1 05       	cpc	r31, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_SetPinDirection+0x17c>
    1286:	4c c0       	rjmp	.+152    	; 0x1320 <DIO_SetPinDirection+0x214>
    1288:	63 c0       	rjmp	.+198    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTA: CLR_BIT(DDRA, u8PinIDcopy); break;
    128a:	4a e3       	ldi	r20, 0x3A	; 58
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	60 81       	ld	r22, Z
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <DIO_SetPinDirection+0x1a2>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	aa 1f       	adc	r26, r26
    12ac:	bb 1f       	adc	r27, r27
    12ae:	0a 94       	dec	r0
    12b0:	d2 f7       	brpl	.-12     	; 0x12a6 <DIO_SetPinDirection+0x19a>
    12b2:	80 95       	com	r24
    12b4:	86 23       	and	r24, r22
    12b6:	fa 01       	movw	r30, r20
    12b8:	80 83       	st	Z, r24
    12ba:	4a c0       	rjmp	.+148    	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTB: CLR_BIT(DDRB, u8PinIDcopy); break;
    12bc:	47 e3       	ldi	r20, 0x37	; 55
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	e7 e3       	ldi	r30, 0x37	; 55
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	60 81       	ld	r22, Z
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <DIO_SetPinDirection+0x1d4>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	aa 1f       	adc	r26, r26
    12de:	bb 1f       	adc	r27, r27
    12e0:	0a 94       	dec	r0
    12e2:	d2 f7       	brpl	.-12     	; 0x12d8 <DIO_SetPinDirection+0x1cc>
    12e4:	80 95       	com	r24
    12e6:	86 23       	and	r24, r22
    12e8:	fa 01       	movw	r30, r20
    12ea:	80 83       	st	Z, r24
    12ec:	31 c0       	rjmp	.+98     	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTC: CLR_BIT(DDRC, u8PinIDcopy); break;
    12ee:	44 e3       	ldi	r20, 0x34	; 52
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	e4 e3       	ldi	r30, 0x34	; 52
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	60 81       	ld	r22, Z
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <DIO_SetPinDirection+0x206>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	0a 94       	dec	r0
    1314:	d2 f7       	brpl	.-12     	; 0x130a <DIO_SetPinDirection+0x1fe>
    1316:	80 95       	com	r24
    1318:	86 23       	and	r24, r22
    131a:	fa 01       	movw	r30, r20
    131c:	80 83       	st	Z, r24
    131e:	18 c0       	rjmp	.+48     	; 0x1350 <DIO_SetPinDirection+0x244>
                case DIO_PORTD: CLR_BIT(DDRD, u8PinIDcopy); break;
    1320:	41 e3       	ldi	r20, 0x31	; 49
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	60 81       	ld	r22, Z
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <DIO_SetPinDirection+0x238>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	aa 1f       	adc	r26, r26
    1342:	bb 1f       	adc	r27, r27
    1344:	0a 94       	dec	r0
    1346:	d2 f7       	brpl	.-12     	; 0x133c <DIO_SetPinDirection+0x230>
    1348:	80 95       	com	r24
    134a:	86 23       	and	r24, r22
    134c:	fa 01       	movw	r30, r20
    134e:	80 83       	st	Z, r24
            }
        } else {}
    }
}
    1350:	27 96       	adiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <DIO_SetPortDirection>:

// Function to set the direction (input/output) of an entire port
void DIO_SetPortDirection(u8 u8PortIDcopy, u8 u8PortDircopy) {
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_SetPortDirection+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <DIO_SetPortDirection+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
    switch (u8PortIDcopy) {
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3c 83       	std	Y+4, r19	; 0x04
    137a:	2b 83       	std	Y+3, r18	; 0x03
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	d1 f0       	breq	.+52     	; 0x13ba <DIO_SetPortDirection+0x58>
    1386:	2b 81       	ldd	r18, Y+3	; 0x03
    1388:	3c 81       	ldd	r19, Y+4	; 0x04
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_SetPortDirection+0x38>
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <DIO_SetPortDirection+0x4e>
    1398:	1e c0       	rjmp	.+60     	; 0x13d6 <DIO_SetPortDirection+0x74>
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	81 f0       	breq	.+32     	; 0x13c4 <DIO_SetPortDirection+0x62>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_SetPortDirection+0x6c>
    13ae:	13 c0       	rjmp	.+38     	; 0x13d6 <DIO_SetPortDirection+0x74>
        case DIO_PORTA: DDRA = u8PortDircopy; break;
    13b0:	ea e3       	ldi	r30, 0x3A	; 58
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	80 83       	st	Z, r24
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <DIO_SetPortDirection+0x74>
        case DIO_PORTB: DDRB = u8PortDircopy; break;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <DIO_SetPortDirection+0x74>
        case DIO_PORTC: DDRC = u8PortDircopy; break;
    13c4:	e4 e3       	ldi	r30, 0x34	; 52
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <DIO_SetPortDirection+0x74>
        case DIO_PORTD: DDRD = u8PortDircopy; break;
    13ce:	e1 e3       	ldi	r30, 0x31	; 49
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    }
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <DIO_SetPinValue>:

// Function to set the value (high/low) of a specific pin in a port
void DIO_SetPinValue(u8 u8PortIDcopy, u8 u8PinIDcopy, u8 u8PinValuecopy) {
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	27 97       	sbiw	r28, 0x07	; 7
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	6a 83       	std	Y+2, r22	; 0x02
    13fc:	4b 83       	std	Y+3, r20	; 0x03
    if ((u8PortIDcopy <= DIO_PORTD) && (u8PinIDcopy <= DIO_PIN7)) {
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	08 f0       	brcs	.+2      	; 0x1406 <DIO_SetPinValue+0x22>
    1404:	11 c1       	rjmp	.+546    	; 0x1628 <DIO_SetPinValue+0x244>
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	88 30       	cpi	r24, 0x08	; 8
    140a:	08 f0       	brcs	.+2      	; 0x140e <DIO_SetPinValue+0x2a>
    140c:	0d c1       	rjmp	.+538    	; 0x1628 <DIO_SetPinValue+0x244>
        if (u8PinValuecopy == DIO_HIGH) {
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <DIO_SetPinValue+0x32>
    1414:	81 c0       	rjmp	.+258    	; 0x1518 <DIO_SetPinValue+0x134>
            switch (u8PortIDcopy) {
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3f 83       	std	Y+7, r19	; 0x07
    141e:	2e 83       	std	Y+6, r18	; 0x06
    1420:	8e 81       	ldd	r24, Y+6	; 0x06
    1422:	9f 81       	ldd	r25, Y+7	; 0x07
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	79 f1       	breq	.+94     	; 0x1488 <DIO_SetPinValue+0xa4>
    142a:	ee 81       	ldd	r30, Y+6	; 0x06
    142c:	ff 81       	ldd	r31, Y+7	; 0x07
    142e:	e2 30       	cpi	r30, 0x02	; 2
    1430:	f1 05       	cpc	r31, r1
    1432:	34 f4       	brge	.+12     	; 0x1440 <DIO_SetPinValue+0x5c>
    1434:	2e 81       	ldd	r18, Y+6	; 0x06
    1436:	3f 81       	ldd	r19, Y+7	; 0x07
    1438:	21 15       	cp	r18, r1
    143a:	31 05       	cpc	r19, r1
    143c:	69 f0       	breq	.+26     	; 0x1458 <DIO_SetPinValue+0x74>
    143e:	f4 c0       	rjmp	.+488    	; 0x1628 <DIO_SetPinValue+0x244>
    1440:	8e 81       	ldd	r24, Y+6	; 0x06
    1442:	9f 81       	ldd	r25, Y+7	; 0x07
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	91 05       	cpc	r25, r1
    1448:	b9 f1       	breq	.+110    	; 0x14b8 <DIO_SetPinValue+0xd4>
    144a:	ee 81       	ldd	r30, Y+6	; 0x06
    144c:	ff 81       	ldd	r31, Y+7	; 0x07
    144e:	e3 30       	cpi	r30, 0x03	; 3
    1450:	f1 05       	cpc	r31, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <DIO_SetPinValue+0x72>
    1454:	49 c0       	rjmp	.+146    	; 0x14e8 <DIO_SetPinValue+0x104>
    1456:	e8 c0       	rjmp	.+464    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTA: SET_BIT(PORTA, u8PinIDcopy); break;
    1458:	4b e3       	ldi	r20, 0x3B	; 59
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	eb e3       	ldi	r30, 0x3B	; 59
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	60 81       	ld	r22, Z
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e0       	ldi	r26, 0x00	; 0
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	04 c0       	rjmp	.+8      	; 0x147c <DIO_SetPinValue+0x98>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	aa 1f       	adc	r26, r26
    147a:	bb 1f       	adc	r27, r27
    147c:	0a 94       	dec	r0
    147e:	d2 f7       	brpl	.-12     	; 0x1474 <DIO_SetPinValue+0x90>
    1480:	86 2b       	or	r24, r22
    1482:	fa 01       	movw	r30, r20
    1484:	80 83       	st	Z, r24
    1486:	d0 c0       	rjmp	.+416    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTB: SET_BIT(PORTB, u8PinIDcopy); break;
    1488:	48 e3       	ldi	r20, 0x38	; 56
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	e8 e3       	ldi	r30, 0x38	; 56
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	60 81       	ld	r22, Z
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <DIO_SetPinValue+0xc8>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	0a 94       	dec	r0
    14ae:	d2 f7       	brpl	.-12     	; 0x14a4 <DIO_SetPinValue+0xc0>
    14b0:	86 2b       	or	r24, r22
    14b2:	fa 01       	movw	r30, r20
    14b4:	80 83       	st	Z, r24
    14b6:	b8 c0       	rjmp	.+368    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTC: SET_BIT(PORTC, u8PinIDcopy); break;
    14b8:	45 e3       	ldi	r20, 0x35	; 53
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	60 81       	ld	r22, Z
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <DIO_SetPinValue+0xf8>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	aa 1f       	adc	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	0a 94       	dec	r0
    14de:	d2 f7       	brpl	.-12     	; 0x14d4 <DIO_SetPinValue+0xf0>
    14e0:	86 2b       	or	r24, r22
    14e2:	fa 01       	movw	r30, r20
    14e4:	80 83       	st	Z, r24
    14e6:	a0 c0       	rjmp	.+320    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTD: SET_BIT(PORTD, u8PinIDcopy); break;
    14e8:	42 e3       	ldi	r20, 0x32	; 50
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	60 81       	ld	r22, Z
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	04 c0       	rjmp	.+8      	; 0x150c <DIO_SetPinValue+0x128>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	aa 1f       	adc	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	0a 94       	dec	r0
    150e:	d2 f7       	brpl	.-12     	; 0x1504 <DIO_SetPinValue+0x120>
    1510:	86 2b       	or	r24, r22
    1512:	fa 01       	movw	r30, r20
    1514:	80 83       	st	Z, r24
    1516:	88 c0       	rjmp	.+272    	; 0x1628 <DIO_SetPinValue+0x244>
            }
        } else if (u8PinValuecopy == DIO_LOW) {
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 23       	and	r24, r24
    151c:	09 f0       	breq	.+2      	; 0x1520 <DIO_SetPinValue+0x13c>
    151e:	84 c0       	rjmp	.+264    	; 0x1628 <DIO_SetPinValue+0x244>
            switch (u8PortIDcopy) {
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3d 83       	std	Y+5, r19	; 0x05
    1528:	2c 83       	std	Y+4, r18	; 0x04
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	81 f1       	breq	.+96     	; 0x1594 <DIO_SetPinValue+0x1b0>
    1534:	ec 81       	ldd	r30, Y+4	; 0x04
    1536:	fd 81       	ldd	r31, Y+5	; 0x05
    1538:	e2 30       	cpi	r30, 0x02	; 2
    153a:	f1 05       	cpc	r31, r1
    153c:	34 f4       	brge	.+12     	; 0x154a <DIO_SetPinValue+0x166>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	21 15       	cp	r18, r1
    1544:	31 05       	cpc	r19, r1
    1546:	69 f0       	breq	.+26     	; 0x1562 <DIO_SetPinValue+0x17e>
    1548:	6f c0       	rjmp	.+222    	; 0x1628 <DIO_SetPinValue+0x244>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	91 05       	cpc	r25, r1
    1552:	c9 f1       	breq	.+114    	; 0x15c6 <DIO_SetPinValue+0x1e2>
    1554:	ec 81       	ldd	r30, Y+4	; 0x04
    1556:	fd 81       	ldd	r31, Y+5	; 0x05
    1558:	e3 30       	cpi	r30, 0x03	; 3
    155a:	f1 05       	cpc	r31, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_SetPinValue+0x17c>
    155e:	4c c0       	rjmp	.+152    	; 0x15f8 <DIO_SetPinValue+0x214>
    1560:	63 c0       	rjmp	.+198    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTA: CLR_BIT(PORTA, u8PinIDcopy); break;
    1562:	4b e3       	ldi	r20, 0x3B	; 59
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	60 81       	ld	r22, Z
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <DIO_SetPinValue+0x1a2>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	aa 1f       	adc	r26, r26
    1584:	bb 1f       	adc	r27, r27
    1586:	0a 94       	dec	r0
    1588:	d2 f7       	brpl	.-12     	; 0x157e <DIO_SetPinValue+0x19a>
    158a:	80 95       	com	r24
    158c:	86 23       	and	r24, r22
    158e:	fa 01       	movw	r30, r20
    1590:	80 83       	st	Z, r24
    1592:	4a c0       	rjmp	.+148    	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTB: CLR_BIT(PORTB, u8PinIDcopy); break;
    1594:	48 e3       	ldi	r20, 0x38	; 56
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	e8 e3       	ldi	r30, 0x38	; 56
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	60 81       	ld	r22, Z
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <DIO_SetPinValue+0x1d4>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <DIO_SetPinValue+0x1cc>
    15bc:	80 95       	com	r24
    15be:	86 23       	and	r24, r22
    15c0:	fa 01       	movw	r30, r20
    15c2:	80 83       	st	Z, r24
    15c4:	31 c0       	rjmp	.+98     	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTC: CLR_BIT(PORTC, u8PinIDcopy); break;
    15c6:	45 e3       	ldi	r20, 0x35	; 53
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	e5 e3       	ldi	r30, 0x35	; 53
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	60 81       	ld	r22, Z
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <DIO_SetPinValue+0x206>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	aa 1f       	adc	r26, r26
    15e8:	bb 1f       	adc	r27, r27
    15ea:	0a 94       	dec	r0
    15ec:	d2 f7       	brpl	.-12     	; 0x15e2 <DIO_SetPinValue+0x1fe>
    15ee:	80 95       	com	r24
    15f0:	86 23       	and	r24, r22
    15f2:	fa 01       	movw	r30, r20
    15f4:	80 83       	st	Z, r24
    15f6:	18 c0       	rjmp	.+48     	; 0x1628 <DIO_SetPinValue+0x244>
                case DIO_PORTD: CLR_BIT(PORTD, u8PinIDcopy); break;
    15f8:	42 e3       	ldi	r20, 0x32	; 50
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	60 81       	ld	r22, Z
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a0 e0       	ldi	r26, 0x00	; 0
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	04 c0       	rjmp	.+8      	; 0x161c <DIO_SetPinValue+0x238>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	aa 1f       	adc	r26, r26
    161a:	bb 1f       	adc	r27, r27
    161c:	0a 94       	dec	r0
    161e:	d2 f7       	brpl	.-12     	; 0x1614 <DIO_SetPinValue+0x230>
    1620:	80 95       	com	r24
    1622:	86 23       	and	r24, r22
    1624:	fa 01       	movw	r30, r20
    1626:	80 83       	st	Z, r24
            }
        } else {}
    }
}
    1628:	27 96       	adiw	r28, 0x07	; 7
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <DIO_SetPortValue>:

// Function to set the value (high/low) of an entire port
void DIO_SetPortValue(u8 u8PortIDcopy, u8 u8PortValuecopy) {
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_SetPortValue+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_SetPortValue+0x8>
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    switch (u8PortIDcopy) {
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	d1 f0       	breq	.+52     	; 0x1692 <DIO_SetPortValue+0x58>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_SetPortValue+0x38>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <DIO_SetPortValue+0x4e>
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <DIO_SetPortValue+0x74>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <DIO_SetPortValue+0x62>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <DIO_SetPortValue+0x6c>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <DIO_SetPortValue+0x74>
        case DIO_PORTA: PORTA = u8PortValuecopy; break;
    1688:	eb e3       	ldi	r30, 0x3B	; 59
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	80 83       	st	Z, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <DIO_SetPortValue+0x74>
        case DIO_PORTB: PORTB = u8PortValuecopy; break;
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <DIO_SetPortValue+0x74>
        case DIO_PORTC: PORTC = u8PortValuecopy; break;
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <DIO_SetPortValue+0x74>
        case DIO_PORTD: PORTD = u8PortValuecopy; break;
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    }
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <DIO_GetPinValue>:

// Function to read the value (high/low) of a specific pin in a port
u8 DIO_GetPinValue(u8 u8PortIDcopy, u8 u8PinIDcopy) {
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <DIO_GetPinValue+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <DIO_GetPinValue+0x8>
    16c4:	0f 92       	push	r0
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	6b 83       	std	Y+3, r22	; 0x03
    u8 u8ResultLocal;
    if ((u8PortIDcopy <= DIO_PORTD) && (u8PinIDcopy <= DIO_PIN7)) {
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <DIO_GetPinValue+0x1a>
    16d4:	6c c0       	rjmp	.+216    	; 0x17ae <DIO_GetPinValue+0xf2>
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	88 30       	cpi	r24, 0x08	; 8
    16da:	08 f0       	brcs	.+2      	; 0x16de <DIO_GetPinValue+0x22>
    16dc:	68 c0       	rjmp	.+208    	; 0x17ae <DIO_GetPinValue+0xf2>
        switch (u8PortIDcopy) {
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3d 83       	std	Y+5, r19	; 0x05
    16e6:	2c 83       	std	Y+4, r18	; 0x04
    16e8:	4c 81       	ldd	r20, Y+4	; 0x04
    16ea:	5d 81       	ldd	r21, Y+5	; 0x05
    16ec:	41 30       	cpi	r20, 0x01	; 1
    16ee:	51 05       	cpc	r21, r1
    16f0:	41 f1       	breq	.+80     	; 0x1742 <DIO_GetPinValue+0x86>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	91 05       	cpc	r25, r1
    16fa:	34 f4       	brge	.+12     	; 0x1708 <DIO_GetPinValue+0x4c>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	21 15       	cp	r18, r1
    1702:	31 05       	cpc	r19, r1
    1704:	61 f0       	breq	.+24     	; 0x171e <DIO_GetPinValue+0x62>
    1706:	54 c0       	rjmp	.+168    	; 0x17b0 <DIO_GetPinValue+0xf4>
    1708:	4c 81       	ldd	r20, Y+4	; 0x04
    170a:	5d 81       	ldd	r21, Y+5	; 0x05
    170c:	42 30       	cpi	r20, 0x02	; 2
    170e:	51 05       	cpc	r21, r1
    1710:	51 f1       	breq	.+84     	; 0x1766 <DIO_GetPinValue+0xaa>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	91 05       	cpc	r25, r1
    171a:	b9 f1       	breq	.+110    	; 0x178a <DIO_GetPinValue+0xce>
    171c:	49 c0       	rjmp	.+146    	; 0x17b0 <DIO_GetPinValue+0xf4>
            case DIO_PORTA: u8ResultLocal = GET_BIT(PINA, u8PinIDcopy); break;
    171e:	e9 e3       	ldi	r30, 0x39	; 57
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_GetPinValue+0x7a>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	8a 95       	dec	r24
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_GetPinValue+0x76>
    173a:	ca 01       	movw	r24, r20
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	37 c0       	rjmp	.+110    	; 0x17b0 <DIO_GetPinValue+0xf4>
            case DIO_PORTB: u8ResultLocal = GET_BIT(PINB, u8PinIDcopy); break;
    1742:	e6 e3       	ldi	r30, 0x36	; 54
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a9 01       	movw	r20, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_GetPinValue+0x9e>
    1756:	55 95       	asr	r21
    1758:	47 95       	ror	r20
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_GetPinValue+0x9a>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	25 c0       	rjmp	.+74     	; 0x17b0 <DIO_GetPinValue+0xf4>
            case DIO_PORTC: u8ResultLocal = GET_BIT(PINC, u8PinIDcopy); break;
    1766:	e3 e3       	ldi	r30, 0x33	; 51
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_GetPinValue+0xc2>
    177a:	55 95       	asr	r21
    177c:	47 95       	ror	r20
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_GetPinValue+0xbe>
    1782:	ca 01       	movw	r24, r20
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <DIO_GetPinValue+0xf4>
            case DIO_PORTD: u8ResultLocal = GET_BIT(PIND, u8PinIDcopy); break;
    178a:	e0 e3       	ldi	r30, 0x30	; 48
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <DIO_GetPinValue+0xe6>
    179e:	55 95       	asr	r21
    17a0:	47 95       	ror	r20
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <DIO_GetPinValue+0xe2>
    17a6:	ca 01       	movw	r24, r20
    17a8:	81 70       	andi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	01 c0       	rjmp	.+2      	; 0x17b0 <DIO_GetPinValue+0xf4>
        }
    } else {
        u8ResultLocal = 0; // Return 0 for invalid input
    17ae:	19 82       	std	Y+1, r1	; 0x01
    }
    return u8ResultLocal;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <UART_voidINIT_TX>:
#include"BIT_MATH.h"
#include "UART.h"
#include "DIO.h"
#include <avr/io.h>

void UART_voidINIT_TX(void){
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	/* 1 Stop Bit */
	CLR_BIT(UCSRC,UCSRC_USBS);
    17ca:	a0 e4       	ldi	r26, 0x40	; 64
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e0 e4       	ldi	r30, 0x40	; 64
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	8c 93       	st	X, r24

	/* 8 bit Data */
	SET_BIT(UCSRC,UCSRC_UCSZ0);
    17d8:	a0 e4       	ldi	r26, 0x40	; 64
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e0 e4       	ldi	r30, 0x40	; 64
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	82 60       	ori	r24, 0x02	; 2
    17e4:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSRC_UCSZ1);
    17e6:	a0 e4       	ldi	r26, 0x40	; 64
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e0 e4       	ldi	r30, 0x40	; 64
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	84 60       	ori	r24, 0x04	; 4
    17f2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    17f4:	aa e2       	ldi	r26, 0x2A	; 42
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ea e2       	ldi	r30, 0x2A	; 42
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	8c 93       	st	X, r24

	/* No Parity */
	CLR_BIT(UCSRC,UCSRC_UPM0);
    1802:	a0 e4       	ldi	r26, 0x40	; 64
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e0 e4       	ldi	r30, 0x40	; 64
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7e       	andi	r24, 0xEF	; 239
    180e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC,UCSRC_UPM1);
    1810:	a0 e4       	ldi	r26, 0x40	; 64
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e0 e4       	ldi	r30, 0x40	; 64
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 7d       	andi	r24, 0xDF	; 223
    181c:	8c 93       	st	X, r24

	/* Asynchronous Operation */
	CLR_BIT(UCSRC,UCSRC_UMSEL);
    181e:	a0 e4       	ldi	r26, 0x40	; 64
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e0 e4       	ldi	r30, 0x40	; 64
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 7b       	andi	r24, 0xBF	; 191
    182a:	8c 93       	st	X, r24

	/* Set Baud Rate */
	UBRRL = 51;
    182c:	e9 e2       	ldi	r30, 0x29	; 41
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	83 e3       	ldi	r24, 0x33	; 51
    1832:	80 83       	st	Z, r24
	UBRRH = 0;
    1834:	e0 e4       	ldi	r30, 0x40	; 64
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	10 82       	st	Z, r1

	/* Enable RX, TX */
	SET_BIT(UCSRB,UCSRB_TXEN);
    183a:	aa e2       	ldi	r26, 0x2A	; 42
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ea e2       	ldi	r30, 0x2A	; 42
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 60       	ori	r24, 0x08	; 8
    1846:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    1848:	aa e2       	ldi	r26, 0x2A	; 42
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ea e2       	ldi	r30, 0x2A	; 42
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 61       	ori	r24, 0x10	; 16
    1854:	8c 93       	st	X, r24

}
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <UART_voidSendData_TX>:

void UART_voidSendData_TX(u8 Data_u8Copy){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	89 83       	std	Y+1, r24	; 0x01

	/* Wait Flag UDRE to finish */ /* Register Empty or Not */
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    1868:	eb e2       	ldi	r30, 0x2B	; 43
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	82 95       	swap	r24
    1870:	86 95       	lsr	r24
    1872:	87 70       	andi	r24, 0x07	; 7
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	90 70       	andi	r25, 0x00	; 0
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	a1 f3       	breq	.-24     	; 0x1868 <UART_voidSendData_TX+0xc>
	UDR = Data_u8Copy;
    1880:	ec e2       	ldi	r30, 0x2C	; 44
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	80 83       	st	Z, r24
}
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <UART_u8RecieveData_TX>:


u8 UART_u8RecieveData_TX(void){
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62

	while(GET_BIT(UCSRA,UCSRA_RXC) == 0);
    1898:	eb e2       	ldi	r30, 0x2B	; 43
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 23       	and	r24, r24
    18a0:	dc f7       	brge	.-10     	; 0x1898 <UART_u8RecieveData_TX+0x8>
	return UDR ;
    18a2:	ec e2       	ldi	r30, 0x2C	; 44
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <buzzer_init>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO.h"
#include "buzzer.h"

void buzzer_init() {
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    // Set buzzer pin as output
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN7, DIO_OUTPUT);
    18b6:	83 e0       	ldi	r24, 0x03	; 3
    18b8:	67 e0       	ldi	r22, 0x07	; 7
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <buzzer_on>:

void buzzer_on() {
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    // Set buzzer pin high
	DIO_SetPinValue(DIO_PORTD, DIO_PIN7, DIO_HIGH);
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	67 e0       	ldi	r22, 0x07	; 7
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <buzzer_off>:

void buzzer_off() {
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    // Set buzzer pin low
	DIO_SetPinValue(DIO_PORTD, DIO_PIN7, DIO_LOW);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	67 e0       	ldi	r22, 0x07	; 7
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <KPD_Init>:
#include"CLCD.h"
#include <avr/io.h>
#include <util/delay.h>
#include"Keypad.h"

void KPD_Init(void){
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinDirection(KPD_R0_PORT,KPD_R0_PIN,DIO_INPUT);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R1_PORT,KPD_R1_PIN,DIO_INPUT);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R2_PORT,KPD_R2_PIN,DIO_INPUT);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	62 e0       	ldi	r22, 0x02	; 2
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R3_PORT,KPD_R3_PIN,DIO_INPUT);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	63 e0       	ldi	r22, 0x03	; 3
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>

	 DIO_SetPinValue(KPD_R0_PORT,KPD_R0_PIN,DIO_HIGH);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R1_PORT,KPD_R1_PIN,DIO_HIGH);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R2_PORT,KPD_R2_PIN,DIO_HIGH);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R3_PORT,KPD_R3_PIN,DIO_HIGH);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	63 e0       	ldi	r22, 0x03	; 3
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>

     DIO_SetPinDirection(KPD_C0_PORT,KPD_C0_PIN,DIO_OUTPUT);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	64 e0       	ldi	r22, 0x04	; 4
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C1_PORT,KPD_C1_PIN,DIO_OUTPUT);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C2_PORT,KPD_C2_PIN,DIO_OUTPUT);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	66 e0       	ldi	r22, 0x06	; 6
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C3_PORT,KPD_C3_PIN,DIO_OUTPUT);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	67 e0       	ldi	r22, 0x07	; 7
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>

 	 DIO_SetPinValue(KPD_C0_PORT,KPD_C0_PIN,DIO_HIGH);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	64 e0       	ldi	r22, 0x04	; 4
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C1_PORT,KPD_C1_PIN,DIO_HIGH);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	65 e0       	ldi	r22, 0x05	; 5
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C2_PORT,KPD_C2_PIN,DIO_HIGH);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	66 e0       	ldi	r22, 0x06	; 6
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C3_PORT,KPD_C3_PIN,DIO_HIGH);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	67 e0       	ldi	r22, 0x07	; 7
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <KPD_GETPressedKey>:

u8  KPD_GETPressedKey(void){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	e7 97       	sbiw	r28, 0x37	; 55
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
	u8 u8RowLocal=0;
    19b8:	19 8a       	std	Y+17, r1	; 0x11
	u8 u8ColLocal=0;
    19ba:	18 8a       	std	Y+16, r1	; 0x10
	u8 KPD_u8Value[ROW_NUMBER][COL_NUMBER]=KPD_VALUES;
    19bc:	ce 01       	movw	r24, r28
    19be:	42 96       	adiw	r24, 0x12	; 18
    19c0:	9c ab       	std	Y+52, r25	; 0x34
    19c2:	8b ab       	std	Y+51, r24	; 0x33
    19c4:	e2 e5       	ldi	r30, 0x52	; 82
    19c6:	f2 e0       	ldi	r31, 0x02	; 2
    19c8:	fe ab       	std	Y+54, r31	; 0x36
    19ca:	ed ab       	std	Y+53, r30	; 0x35
    19cc:	f0 e1       	ldi	r31, 0x10	; 16
    19ce:	ff ab       	std	Y+55, r31	; 0x37
    19d0:	ed a9       	ldd	r30, Y+53	; 0x35
    19d2:	fe a9       	ldd	r31, Y+54	; 0x36
    19d4:	00 80       	ld	r0, Z
    19d6:	8d a9       	ldd	r24, Y+53	; 0x35
    19d8:	9e a9       	ldd	r25, Y+54	; 0x36
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	9e ab       	std	Y+54, r25	; 0x36
    19de:	8d ab       	std	Y+53, r24	; 0x35
    19e0:	eb a9       	ldd	r30, Y+51	; 0x33
    19e2:	fc a9       	ldd	r31, Y+52	; 0x34
    19e4:	00 82       	st	Z, r0
    19e6:	8b a9       	ldd	r24, Y+51	; 0x33
    19e8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	9c ab       	std	Y+52, r25	; 0x34
    19ee:	8b ab       	std	Y+51, r24	; 0x33
    19f0:	9f a9       	ldd	r25, Y+55	; 0x37
    19f2:	91 50       	subi	r25, 0x01	; 1
    19f4:	9f ab       	std	Y+55, r25	; 0x37
    19f6:	ef a9       	ldd	r30, Y+55	; 0x37
    19f8:	ee 23       	and	r30, r30
    19fa:	51 f7       	brne	.-44     	; 0x19d0 <KPD_GETPressedKey+0x2c>
	u8 KPD_U8ROWPortArr[ROW_NUMBER]={KPD_R0_PORT,KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT};
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	8a a3       	std	Y+34, r24	; 0x22
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	8b a3       	std	Y+35, r24	; 0x23
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	8c a3       	std	Y+36, r24	; 0x24
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	8d a3       	std	Y+37, r24	; 0x25
	u8 KPD_U8ROWPINArr[ROW_NUMBER]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};
    1a0c:	1e a2       	std	Y+38, r1	; 0x26
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	8f a3       	std	Y+39, r24	; 0x27
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	88 a7       	std	Y+40, r24	; 0x28
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	89 a7       	std	Y+41, r24	; 0x29

	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	8a a7       	std	Y+42, r24	; 0x2a
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	8b a7       	std	Y+43, r24	; 0x2b
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	8c a7       	std	Y+44, r24	; 0x2c
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	8d a7       	std	Y+45, r24	; 0x2d
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
    1a2a:	84 e0       	ldi	r24, 0x04	; 4
    1a2c:	8e a7       	std	Y+46, r24	; 0x2e
    1a2e:	85 e0       	ldi	r24, 0x05	; 5
    1a30:	8f a7       	std	Y+47, r24	; 0x2f
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	88 ab       	std	Y+48, r24	; 0x30
    1a36:	87 e0       	ldi	r24, 0x07	; 7
    1a38:	89 ab       	std	Y+49, r24	; 0x31

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
    1a3a:	18 8a       	std	Y+16, r1	; 0x10
    1a3c:	11 c1       	rjmp	.+546    	; 0x1c60 <KPD_GETPressedKey+0x2bc>
		DIO_SetPinValue(KPD_U8ROWPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_LOW);
    1a3e:	88 89       	ldd	r24, Y+16	; 0x10
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	ce 01       	movw	r24, r28
    1a46:	82 96       	adiw	r24, 0x22	; 34
    1a48:	fc 01       	movw	r30, r24
    1a4a:	e2 0f       	add	r30, r18
    1a4c:	f3 1f       	adc	r31, r19
    1a4e:	40 81       	ld	r20, Z
    1a50:	88 89       	ldd	r24, Y+16	; 0x10
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	ce 01       	movw	r24, r28
    1a58:	8e 96       	adiw	r24, 0x2e	; 46
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e2 0f       	add	r30, r18
    1a5e:	f3 1f       	adc	r31, r19
    1a60:	90 81       	ld	r25, Z
    1a62:	84 2f       	mov	r24, r20
    1a64:	69 2f       	mov	r22, r25
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
		for(u8RowLocal=0;u8RowLocal<ROW_NUMBER; u8RowLocal++){
    1a6c:	19 8a       	std	Y+17, r1	; 0x11
    1a6e:	da c0       	rjmp	.+436    	; 0x1c24 <KPD_GETPressedKey+0x280>
			u8 u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    1a70:	89 89       	ldd	r24, Y+17	; 0x11
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	ce 01       	movw	r24, r28
    1a78:	82 96       	adiw	r24, 0x22	; 34
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	e2 0f       	add	r30, r18
    1a7e:	f3 1f       	adc	r31, r19
    1a80:	40 81       	ld	r20, Z
    1a82:	89 89       	ldd	r24, Y+17	; 0x11
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	ce 01       	movw	r24, r28
    1a8a:	86 96       	adiw	r24, 0x26	; 38
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	e2 0f       	add	r30, r18
    1a90:	f3 1f       	adc	r31, r19
    1a92:	90 81       	ld	r25, Z
    1a94:	84 2f       	mov	r24, r20
    1a96:	69 2f       	mov	r22, r25
    1a98:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_GetPinValue>
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
					if(u8PinValueLocal== KPD_PRESSED_KEY)
    1a9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa0:	88 23       	and	r24, r24
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <KPD_GETPressedKey+0x102>
    1aa4:	bc c0       	rjmp	.+376    	; 0x1c1e <KPD_GETPressedKey+0x27a>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a8 e4       	ldi	r26, 0x48	; 72
    1aac:	b2 e4       	ldi	r27, 0x42	; 66
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <KPD_GETPressedKey+0x154>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <KPD_GETPressedKey+0x1d2>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <KPD_GETPressedKey+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <KPD_GETPressedKey+0x1b4>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <KPD_GETPressedKey+0x1a2>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <KPD_GETPressedKey+0x196>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <KPD_GETPressedKey+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <KPD_GETPressedKey+0x1de>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    1b8a:	89 89       	ldd	r24, Y+17	; 0x11
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	ce 01       	movw	r24, r28
    1b92:	82 96       	adiw	r24, 0x22	; 34
    1b94:	fc 01       	movw	r30, r24
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	40 81       	ld	r20, Z
    1b9c:	89 89       	ldd	r24, Y+17	; 0x11
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	86 96       	adiw	r24, 0x26	; 38
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	90 81       	ld	r25, Z
    1bae:	84 2f       	mov	r24, r20
    1bb0:	69 2f       	mov	r22, r25
    1bb2:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_GetPinValue>
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
						if(u8PinValueLocal== KPD_PRESSED_KEY)
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	88 23       	and	r24, r24
    1bbc:	81 f5       	brne	.+96     	; 0x1c1e <KPD_GETPressedKey+0x27a>
    1bbe:	17 c0       	rjmp	.+46     	; 0x1bee <KPD_GETPressedKey+0x24a>
						{
							while(u8PinValueLocal== KPD_PRESSED_KEY)
							{
								u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	82 96       	adiw	r24, 0x22	; 34
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	40 81       	ld	r20, Z
    1bd2:	89 89       	ldd	r24, Y+17	; 0x11
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	ce 01       	movw	r24, r28
    1bda:	86 96       	adiw	r24, 0x26	; 38
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	90 81       	ld	r25, Z
    1be4:	84 2f       	mov	r24, r20
    1be6:	69 2f       	mov	r22, r25
    1be8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_GetPinValue>
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
					{
						_delay_ms(50);
						u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
						if(u8PinValueLocal== KPD_PRESSED_KEY)
						{
							while(u8PinValueLocal== KPD_PRESSED_KEY)
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	88 23       	and	r24, r24
    1bf2:	31 f3       	breq	.-52     	; 0x1bc0 <KPD_GETPressedKey+0x21c>
							{
								u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
							}
							return KPD_u8Value[u8RowLocal][u8ColLocal];
    1bf4:	89 89       	ldd	r24, Y+17	; 0x11
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	88 89       	ldd	r24, Y+16	; 0x10
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	22 0f       	add	r18, r18
    1c02:	33 1f       	adc	r19, r19
    1c04:	22 0f       	add	r18, r18
    1c06:	33 1f       	adc	r19, r19
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	82 0f       	add	r24, r18
    1c0e:	93 1f       	adc	r25, r19
    1c10:	84 0f       	add	r24, r20
    1c12:	95 1f       	adc	r25, r21
    1c14:	fc 01       	movw	r30, r24
    1c16:	71 96       	adiw	r30, 0x11	; 17
    1c18:	80 81       	ld	r24, Z
    1c1a:	8a ab       	std	Y+50, r24	; 0x32
    1c1c:	27 c0       	rjmp	.+78     	; 0x1c6c <KPD_GETPressedKey+0x2c8>
	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
		DIO_SetPinValue(KPD_U8ROWPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_LOW);
		for(u8RowLocal=0;u8RowLocal<ROW_NUMBER; u8RowLocal++){
    1c1e:	89 89       	ldd	r24, Y+17	; 0x11
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	89 8b       	std	Y+17, r24	; 0x11
    1c24:	89 89       	ldd	r24, Y+17	; 0x11
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <KPD_GETPressedKey+0x288>
    1c2a:	22 cf       	rjmp	.-444    	; 0x1a70 <KPD_GETPressedKey+0xcc>
							}
							return KPD_u8Value[u8RowLocal][u8ColLocal];
						}
					}
		}
		DIO_SetPinValue(KPD_U8COLPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_HIGH);
    1c2c:	88 89       	ldd	r24, Y+16	; 0x10
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	ce 01       	movw	r24, r28
    1c34:	8a 96       	adiw	r24, 0x2a	; 42
    1c36:	fc 01       	movw	r30, r24
    1c38:	e2 0f       	add	r30, r18
    1c3a:	f3 1f       	adc	r31, r19
    1c3c:	40 81       	ld	r20, Z
    1c3e:	88 89       	ldd	r24, Y+16	; 0x10
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	ce 01       	movw	r24, r28
    1c46:	8e 96       	adiw	r24, 0x2e	; 46
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e2 0f       	add	r30, r18
    1c4c:	f3 1f       	adc	r31, r19
    1c4e:	90 81       	ld	r25, Z
    1c50:	84 2f       	mov	r24, r20
    1c52:	69 2f       	mov	r22, r25
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <DIO_SetPinValue>
	u8 KPD_U8ROWPINArr[ROW_NUMBER]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};

	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
    1c5a:	88 89       	ldd	r24, Y+16	; 0x10
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	88 8b       	std	Y+16, r24	; 0x10
    1c60:	88 89       	ldd	r24, Y+16	; 0x10
    1c62:	84 30       	cpi	r24, 0x04	; 4
    1c64:	08 f4       	brcc	.+2      	; 0x1c68 <KPD_GETPressedKey+0x2c4>
    1c66:	eb ce       	rjmp	.-554    	; 0x1a3e <KPD_GETPressedKey+0x9a>
						}
					}
		}
		DIO_SetPinValue(KPD_U8COLPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_HIGH);
	}
	return KPD_NOT_PRESSED_KEY;
    1c68:	9f ef       	ldi	r25, 0xFF	; 255
    1c6a:	9a ab       	std	Y+50, r25	; 0x32
    1c6c:	8a a9       	ldd	r24, Y+50	; 0x32

}
    1c6e:	e7 96       	adiw	r28, 0x37	; 55
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <main>:
#include "buzzer.h"
#include "UART.h"
#include <util/delay.h>
void servo_angle(u16 angle);

void main(void) {
    1c80:	2f 92       	push	r2
    1c82:	3f 92       	push	r3
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	c6 56       	subi	r28, 0x66	; 102
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
	// Initialize various hardware pins and modules
	// Set the direction for pins that connected master w slave with each other
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN0, DIO_INPUT);
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN1, DIO_OUTPUT);
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>

	//LCD DATA DIRECTION
	DIO_SetPortDirection(CLCD_DATA_PORT, DIO_OUTPUT);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	0e 94 b1 09 	call	0x1362	; 0x1362 <DIO_SetPortDirection>

	//LCD CTRL DIRECTION
	DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN0, DIO_OUTPUT);
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN1, DIO_OUTPUT);
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN2, DIO_OUTPUT);
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>

	// Set direction for pin of motor
	DIO_SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	65 e0       	ldi	r22, 0x05	; 5
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_SetPinDirection>

	//Timer,buzzer,KPD and UART initialization
	TIMER1_voidINIT();
    1ce2:	0e 94 a5 19 	call	0x334a	; 0x334a <TIMER1_voidINIT>
	buzzer_init();
    1ce6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <buzzer_init>
	CLCD_voidInitl();
    1cea:	0e 94 a7 07 	call	0xf4e	; 0xf4e <CLCD_voidInitl>
	KPD_Init();
    1cee:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <KPD_Init>
	UART_voidINIT_TX();
    1cf2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_voidINIT_TX>

	//Password checker
	CLCD_voidString("Welcome,Enter");
    1cf6:	80 e6       	ldi	r24, 0x60	; 96
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
	CLCD_voidGoTo_X_Y(1, 0);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
	CLCD_voidString("your password");
    1d06:	8e e6       	ldi	r24, 0x6E	; 110
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    1d0e:	fe 01       	movw	r30, r28
    1d10:	ed 5b       	subi	r30, 0xBD	; 189
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	aa e7       	ldi	r26, 0x7A	; 122
    1d1a:	b4 e4       	ldi	r27, 0x44	; 68
    1d1c:	80 83       	st	Z, r24
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	a2 83       	std	Z+2, r26	; 0x02
    1d22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	8e 01       	movw	r16, r28
    1d26:	01 5c       	subi	r16, 0xC1	; 193
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	ed 5b       	subi	r30, 0xBD	; 189
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	f8 01       	movw	r30, r16
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	a2 83       	std	Z+2, r26	; 0x02
    1d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d52:	fe 01       	movw	r30, r28
    1d54:	ff 96       	adiw	r30, 0x3f	; 63
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <main+0xf8>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9e af       	std	Y+62, r25	; 0x3e
    1d74:	8d af       	std	Y+61, r24	; 0x3d
    1d76:	46 c0       	rjmp	.+140    	; 0x1e04 <main+0x184>
	else if (__tmp > 65535)
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ff 96       	adiw	r30, 0x3f	; 63
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	64 f5       	brge	.+88     	; 0x1dec <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	fe 01       	movw	r30, r28
    1d96:	ed 5b       	subi	r30, 0xBD	; 189
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e af       	std	Y+62, r25	; 0x3e
    1dc0:	8d af       	std	Y+61, r24	; 0x3d
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <main+0x162>
    1dc4:	88 ec       	ldi	r24, 0xC8	; 200
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c af       	std	Y+60, r25	; 0x3c
    1dca:	8b af       	std	Y+59, r24	; 0x3b
    1dcc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dce:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <main+0x150>
    1dd4:	9c af       	std	Y+60, r25	; 0x3c
    1dd6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dda:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9e af       	std	Y+62, r25	; 0x3e
    1de0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <main+0x144>
    1dea:	16 c0       	rjmp	.+44     	; 0x1e18 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	fe 01       	movw	r30, r28
    1dee:	ff 96       	adiw	r30, 0x3f	; 63
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9e af       	std	Y+62, r25	; 0x3e
    1e02:	8d af       	std	Y+61, r24	; 0x3d
    1e04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e08:	9a af       	std	Y+58, r25	; 0x3a
    1e0a:	89 af       	std	Y+57, r24	; 0x39
    1e0c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <main+0x190>
    1e14:	9a af       	std	Y+58, r25	; 0x3a
    1e16:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	CLCD_voidLCD_Clear();
    1e18:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>

	char enteredPassword[6];
	// correct password
	char correctPassword[6] = "12345";
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	84 5a       	subi	r24, 0xA4	; 164
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	a4 96       	adiw	r28, 0x24	; 36
    1e24:	9f af       	std	Y+63, r25	; 0x3f
    1e26:	8e af       	std	Y+62, r24	; 0x3e
    1e28:	a4 97       	sbiw	r28, 0x24	; 36
    1e2a:	8b eb       	ldi	r24, 0xBB	; 187
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a6 96       	adiw	r28, 0x26	; 38
    1e30:	9f af       	std	Y+63, r25	; 0x3f
    1e32:	8e af       	std	Y+62, r24	; 0x3e
    1e34:	a6 97       	sbiw	r28, 0x26	; 38
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	a7 96       	adiw	r28, 0x27	; 39
    1e3a:	9f af       	std	Y+63, r25	; 0x3f
    1e3c:	a7 97       	sbiw	r28, 0x27	; 39
    1e3e:	a6 96       	adiw	r28, 0x26	; 38
    1e40:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e42:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e44:	a6 97       	sbiw	r28, 0x26	; 38
    1e46:	00 80       	ld	r0, Z
    1e48:	a6 96       	adiw	r28, 0x26	; 38
    1e4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e4e:	a6 97       	sbiw	r28, 0x26	; 38
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	a6 96       	adiw	r28, 0x26	; 38
    1e54:	9f af       	std	Y+63, r25	; 0x3f
    1e56:	8e af       	std	Y+62, r24	; 0x3e
    1e58:	a6 97       	sbiw	r28, 0x26	; 38
    1e5a:	a4 96       	adiw	r28, 0x24	; 36
    1e5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e60:	a4 97       	sbiw	r28, 0x24	; 36
    1e62:	00 82       	st	Z, r0
    1e64:	a4 96       	adiw	r28, 0x24	; 36
    1e66:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e6a:	a4 97       	sbiw	r28, 0x24	; 36
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	a4 96       	adiw	r28, 0x24	; 36
    1e70:	9f af       	std	Y+63, r25	; 0x3f
    1e72:	8e af       	std	Y+62, r24	; 0x3e
    1e74:	a4 97       	sbiw	r28, 0x24	; 36
    1e76:	a7 96       	adiw	r28, 0x27	; 39
    1e78:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e7a:	a7 97       	sbiw	r28, 0x27	; 39
    1e7c:	91 50       	subi	r25, 0x01	; 1
    1e7e:	a7 96       	adiw	r28, 0x27	; 39
    1e80:	9f af       	std	Y+63, r25	; 0x3f
    1e82:	a7 97       	sbiw	r28, 0x27	; 39
    1e84:	a7 96       	adiw	r28, 0x27	; 39
    1e86:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e88:	a7 97       	sbiw	r28, 0x27	; 39
    1e8a:	ee 23       	and	r30, r30
    1e8c:	c1 f6       	brne	.-80     	; 0x1e3e <main+0x1be>
	u8 y;
	// numbers of trials
	int h = 3;
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e0 5b       	subi	r30, 0xB0	; 176
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	80 83       	st	Z, r24

	while (1) {
		// Check if the maximum number of password trials has been reached
		if (h == 0) {
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e0 5b       	subi	r30, 0xB0	; 176
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <main+0x22c>
    1eaa:	f9 c0       	rjmp	.+498    	; 0x209e <main+0x41e>
			CLCD_voidGoTo_X_Y(0, 0);
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
			CLCD_voidString("Max trials reached");
    1eb4:	8c e7       	ldi	r24, 0x7C	; 124
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
			CLCD_voidGoTo_X_Y(1, 0);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
			CLCD_voidString("Access blocked");
    1ec4:	8f e8       	ldi	r24, 0x8F	; 143
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
			buzzer_on();
    1ecc:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <buzzer_on>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	aa e7       	ldi	r26, 0x7A	; 122
    1ed6:	b4 e4       	ldi	r27, 0x44	; 68
    1ed8:	8d ab       	std	Y+53, r24	; 0x35
    1eda:	9e ab       	std	Y+54, r25	; 0x36
    1edc:	af ab       	std	Y+55, r26	; 0x37
    1ede:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a ef       	ldi	r20, 0xFA	; 250
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	89 ab       	std	Y+49, r24	; 0x31
    1efa:	9a ab       	std	Y+50, r25	; 0x32
    1efc:	ab ab       	std	Y+51, r26	; 0x33
    1efe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f00:	69 a9       	ldd	r22, Y+49	; 0x31
    1f02:	7a a9       	ldd	r23, Y+50	; 0x32
    1f04:	8b a9       	ldd	r24, Y+51	; 0x33
    1f06:	9c a9       	ldd	r25, Y+52	; 0x34
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <main+0x2a2>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	98 ab       	std	Y+48, r25	; 0x30
    1f1e:	8f a7       	std	Y+47, r24	; 0x2f
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <main+0x320>
	else if (__tmp > 65535)
    1f22:	69 a9       	ldd	r22, Y+49	; 0x31
    1f24:	7a a9       	ldd	r23, Y+50	; 0x32
    1f26:	8b a9       	ldd	r24, Y+51	; 0x33
    1f28:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	4c f5       	brge	.+82     	; 0x1f8c <main+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f40:	98 ad       	ldd	r25, Y+56	; 0x38
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <main+0x302>
    1f64:	88 ec       	ldi	r24, 0xC8	; 200
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
    1f6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <main+0x2f0>
    1f74:	9e a7       	std	Y+46, r25	; 0x2e
    1f76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	98 ab       	std	Y+48, r25	; 0x30
    1f80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f84:	98 a9       	ldd	r25, Y+48	; 0x30
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <main+0x2e4>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <main+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	98 ab       	std	Y+48, r25	; 0x30
    1f9e:	8f a7       	std	Y+47, r24	; 0x2f
    1fa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b
    1fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1faa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <main+0x32c>
    1fb0:	9c a7       	std	Y+44, r25	; 0x2c
    1fb2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			buzzer_off();
    1fb4:	0e 94 6f 0c 	call	0x18de	; 0x18de <buzzer_off>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	aa e7       	ldi	r26, 0x7A	; 122
    1fbe:	b4 e4       	ldi	r27, 0x44	; 68
    1fc0:	8f a3       	std	Y+39, r24	; 0x27
    1fc2:	98 a7       	std	Y+40, r25	; 0x28
    1fc4:	a9 a7       	std	Y+41, r26	; 0x29
    1fc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fca:	78 a5       	ldd	r23, Y+40	; 0x28
    1fcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8b a3       	std	Y+35, r24	; 0x23
    1fe2:	9c a3       	std	Y+36, r25	; 0x24
    1fe4:	ad a3       	std	Y+37, r26	; 0x25
    1fe6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fea:	7c a1       	ldd	r23, Y+36	; 0x24
    1fec:	8d a1       	ldd	r24, Y+37	; 0x25
    1fee:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <main+0x38a>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9a a3       	std	Y+34, r25	; 0x22
    2006:	89 a3       	std	Y+33, r24	; 0x21
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <main+0x408>
	else if (__tmp > 65535)
    200a:	6b a1       	ldd	r22, Y+35	; 0x23
    200c:	7c a1       	ldd	r23, Y+36	; 0x24
    200e:	8d a1       	ldd	r24, Y+37	; 0x25
    2010:	9e a1       	ldd	r25, Y+38	; 0x26
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <main+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6f a1       	ldd	r22, Y+39	; 0x27
    2024:	78 a5       	ldd	r23, Y+40	; 0x28
    2026:	89 a5       	ldd	r24, Y+41	; 0x29
    2028:	9a a5       	ldd	r25, Y+42	; 0x2a
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
    204a:	0f c0       	rjmp	.+30     	; 0x206a <main+0x3ea>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	98 a3       	std	Y+32, r25	; 0x20
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
    2054:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2056:	98 a1       	ldd	r25, Y+32	; 0x20
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <main+0x3d8>
    205c:	98 a3       	std	Y+32, r25	; 0x20
    205e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	89 a1       	ldd	r24, Y+33	; 0x21
    2062:	9a a1       	ldd	r25, Y+34	; 0x22
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9a a3       	std	Y+34, r25	; 0x22
    2068:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	89 a1       	ldd	r24, Y+33	; 0x21
    206c:	9a a1       	ldd	r25, Y+34	; 0x22
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <main+0x3cc>
    2072:	e9 c1       	rjmp	.+978    	; 0x2446 <main+0x7c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6b a1       	ldd	r22, Y+35	; 0x23
    2076:	7c a1       	ldd	r23, Y+36	; 0x24
    2078:	8d a1       	ldd	r24, Y+37	; 0x25
    207a:	9e a1       	ldd	r25, Y+38	; 0x26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9a a3       	std	Y+34, r25	; 0x22
    2086:	89 a3       	std	Y+33, r24	; 0x21
    2088:	89 a1       	ldd	r24, Y+33	; 0x21
    208a:	9a a1       	ldd	r25, Y+34	; 0x22
    208c:	9e 8f       	std	Y+30, r25	; 0x1e
    208e:	8d 8f       	std	Y+29, r24	; 0x1d
    2090:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2092:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <main+0x414>
    2098:	9e 8f       	std	Y+30, r25	; 0x1e
    209a:	8d 8f       	std	Y+29, r24	; 0x1d
    209c:	d4 c1       	rjmp	.+936    	; 0x2446 <main+0x7c6>
			break;
		}

		// Wait for a key press
		do {
			y = KPD_GETPressedKey();
    209e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    20a2:	fe 01       	movw	r30, r28
    20a4:	ee 5a       	subi	r30, 0xAE	; 174
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 83       	st	Z, r24
		} while (y == KPD_NOT_PRESSED_KEY);
    20aa:	fe 01       	movw	r30, r28
    20ac:	ee 5a       	subi	r30, 0xAE	; 174
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 3f       	cpi	r24, 0xFF	; 255
    20b4:	a1 f3       	breq	.-24     	; 0x209e <main+0x41e>

		// Check if the entered password matches
		if (y == '=') {
    20b6:	fe 01       	movw	r30, r28
    20b8:	ee 5a       	subi	r30, 0xAE	; 174
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	8d 33       	cpi	r24, 0x3D	; 61
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <main+0x444>
    20c2:	71 c1       	rjmp	.+738    	; 0x23a6 <main+0x726>
			CLCD_voidLCD_Clear();
    20c4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
			int isPasswordCorrect = 1;
    20c8:	fe 01       	movw	r30, r28
    20ca:	e5 5b       	subi	r30, 0xB5	; 181
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
			for (int i = 0; i < 5; i++) {
    20d6:	fe 01       	movw	r30, r28
    20d8:	e7 5b       	subi	r30, 0xB7	; 183
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	11 82       	std	Z+1, r1	; 0x01
    20de:	10 82       	st	Z, r1
    20e0:	2c c0       	rjmp	.+88     	; 0x213a <main+0x4ba>
				if (enteredPassword[i] != correctPassword[i]) {
    20e2:	fe 01       	movw	r30, r28
    20e4:	e7 5b       	subi	r30, 0xB7	; 183
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	20 81       	ld	r18, Z
    20ea:	31 81       	ldd	r19, Z+1	; 0x01
    20ec:	ce 01       	movw	r24, r28
    20ee:	8a 5a       	subi	r24, 0xAA	; 170
    20f0:	9f 4f       	sbci	r25, 0xFF	; 255
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	40 81       	ld	r20, Z
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 5b       	subi	r30, 0xB7	; 183
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	20 81       	ld	r18, Z
    2102:	31 81       	ldd	r19, Z+1	; 0x01
    2104:	ce 01       	movw	r24, r28
    2106:	84 5a       	subi	r24, 0xA4	; 164
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	fc 01       	movw	r30, r24
    210c:	e2 0f       	add	r30, r18
    210e:	f3 1f       	adc	r31, r19
    2110:	80 81       	ld	r24, Z
    2112:	48 17       	cp	r20, r24
    2114:	31 f0       	breq	.+12     	; 0x2122 <main+0x4a2>
					isPasswordCorrect = 0;
    2116:	fe 01       	movw	r30, r28
    2118:	e5 5b       	subi	r30, 0xB5	; 181
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	11 82       	std	Z+1, r1	; 0x01
    211e:	10 82       	st	Z, r1
    2120:	14 c0       	rjmp	.+40     	; 0x214a <main+0x4ca>

		// Check if the entered password matches
		if (y == '=') {
			CLCD_voidLCD_Clear();
			int isPasswordCorrect = 1;
			for (int i = 0; i < 5; i++) {
    2122:	de 01       	movw	r26, r28
    2124:	a7 5b       	subi	r26, 0xB7	; 183
    2126:	bf 4f       	sbci	r27, 0xFF	; 255
    2128:	fe 01       	movw	r30, r28
    212a:	e7 5b       	subi	r30, 0xB7	; 183
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	11 96       	adiw	r26, 0x01	; 1
    2136:	9c 93       	st	X, r25
    2138:	8e 93       	st	-X, r24
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	85 30       	cpi	r24, 0x05	; 5
    2146:	91 05       	cpc	r25, r1
    2148:	64 f2       	brlt	.-104    	; 0x20e2 <main+0x462>
				if (enteredPassword[i] != correctPassword[i]) {
					isPasswordCorrect = 0;
					break;
				}
			}
			CLCD_voidGoTo_X_Y(1, 0);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>

			if (isPasswordCorrect) {
    2152:	fe 01       	movw	r30, r28
    2154:	e5 5b       	subi	r30, 0xB5	; 181
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	09 f4       	brne	.+2      	; 0x2162 <main+0x4e2>
    2160:	86 c0       	rjmp	.+268    	; 0x226e <main+0x5ee>
				// If the password is correct, open the door and send a signal
				TIMER1_voidSetChannelCompareMatch(1000);
    2162:	88 ee       	ldi	r24, 0xE8	; 232
    2164:	93 e0       	ldi	r25, 0x03	; 3
    2166:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <TIMER1_voidSetChannelCompareMatch>
				servo_angle(90);
    216a:	8a e5       	ldi	r24, 0x5A	; 90
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 96 18 	call	0x312c	; 0x312c <servo_angle>
				CLCD_voidGoTo_X_Y(1, 0);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
				CLCD_voidString("Door open");
    217a:	8e e9       	ldi	r24, 0x9E	; 158
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	aa e7       	ldi	r26, 0x7A	; 122
    2188:	b4 e4       	ldi	r27, 0x44	; 68
    218a:	89 8f       	std	Y+25, r24	; 0x19
    218c:	9a 8f       	std	Y+26, r25	; 0x1a
    218e:	ab 8f       	std	Y+27, r26	; 0x1b
    2190:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	69 8d       	ldd	r22, Y+25	; 0x19
    2194:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2196:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2198:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	54 e4       	ldi	r21, 0x44	; 68
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	8d 8b       	std	Y+21, r24	; 0x15
    21ac:	9e 8b       	std	Y+22, r25	; 0x16
    21ae:	af 8b       	std	Y+23, r26	; 0x17
    21b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b2:	6d 89       	ldd	r22, Y+21	; 0x15
    21b4:	7e 89       	ldd	r23, Y+22	; 0x16
    21b6:	8f 89       	ldd	r24, Y+23	; 0x17
    21b8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <main+0x554>
		__ticks = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <main+0x5d2>
	else if (__tmp > 65535)
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	3f ef       	ldi	r19, 0xFF	; 255
    21e0:	4f e7       	ldi	r20, 0x7F	; 127
    21e2:	57 e4       	ldi	r21, 0x47	; 71
    21e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e8:	18 16       	cp	r1, r24
    21ea:	4c f5       	brge	.+82     	; 0x223e <main+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e2       	ldi	r20, 0x20	; 32
    21fa:	51 e4       	ldi	r21, 0x41	; 65
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9c 8b       	std	Y+20, r25	; 0x14
    2212:	8b 8b       	std	Y+19, r24	; 0x13
    2214:	0f c0       	rjmp	.+30     	; 0x2234 <main+0x5b4>
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9a 8b       	std	Y+18, r25	; 0x12
    221c:	89 8b       	std	Y+17, r24	; 0x11
    221e:	89 89       	ldd	r24, Y+17	; 0x11
    2220:	9a 89       	ldd	r25, Y+18	; 0x12
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <main+0x5a2>
    2226:	9a 8b       	std	Y+18, r25	; 0x12
    2228:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f7       	brne	.-38     	; 0x2216 <main+0x596>
    223c:	14 c0       	rjmp	.+40     	; 0x2266 <main+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223e:	6d 89       	ldd	r22, Y+21	; 0x15
    2240:	7e 89       	ldd	r23, Y+22	; 0x16
    2242:	8f 89       	ldd	r24, Y+23	; 0x17
    2244:	98 8d       	ldd	r25, Y+24	; 0x18
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	8b 89       	ldd	r24, Y+19	; 0x13
    2254:	9c 89       	ldd	r25, Y+20	; 0x14
    2256:	98 8b       	std	Y+16, r25	; 0x10
    2258:	8f 87       	std	Y+15, r24	; 0x0f
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 89       	ldd	r25, Y+16	; 0x10
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <main+0x5de>
    2262:	98 8b       	std	Y+16, r25	; 0x10
    2264:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				UART_voidSendData_TX(1);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    226c:	ec c0       	rjmp	.+472    	; 0x2446 <main+0x7c6>
				break; // Exit the password input loop
			} else {
				h--;
    226e:	de 01       	movw	r26, r28
    2270:	a0 5b       	subi	r26, 0xB0	; 176
    2272:	bf 4f       	sbci	r27, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e0 5b       	subi	r30, 0xB0	; 176
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	8d 93       	st	X+, r24
    2282:	9c 93       	st	X, r25
				CLCD_voidString("Wrong");
    2284:	88 ea       	ldi	r24, 0xA8	; 168
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
				CLCD_voidGoTo_X_Y(2, 0);
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
				CLCD_voidString("Trials left:");
    2294:	8e ea       	ldi	r24, 0xAE	; 174
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
				CLCD_voidSendData(h + '0');
    229c:	fe 01       	movw	r30, r28
    229e:	e0 5b       	subi	r30, 0xB0	; 176
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	80 5d       	subi	r24, 0xD0	; 208
    22a6:	0e 94 09 07 	call	0xe12	; 0xe12 <CLCD_voidSendData>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	aa e7       	ldi	r26, 0x7A	; 122
    22b0:	b4 e4       	ldi	r27, 0x44	; 68
    22b2:	8b 87       	std	Y+11, r24	; 0x0b
    22b4:	9c 87       	std	Y+12, r25	; 0x0c
    22b6:	ad 87       	std	Y+13, r26	; 0x0d
    22b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    22bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22be:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a ef       	ldi	r20, 0xFA	; 250
    22c8:	54 e4       	ldi	r21, 0x44	; 68
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8f 83       	std	Y+7, r24	; 0x07
    22d4:	98 87       	std	Y+8, r25	; 0x08
    22d6:	a9 87       	std	Y+9, r26	; 0x09
    22d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <main+0x67c>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9e 83       	std	Y+6, r25	; 0x06
    22f8:	8d 83       	std	Y+5, r24	; 0x05
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <main+0x6fa>
	else if (__tmp > 65535)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	6b 85       	ldd	r22, Y+11	; 0x0b
    2316:	7c 85       	ldd	r23, Y+12	; 0x0c
    2318:	8d 85       	ldd	r24, Y+13	; 0x0d
    231a:	9e 85       	ldd	r25, Y+14	; 0x0e
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	0f c0       	rjmp	.+30     	; 0x235c <main+0x6dc>
    233e:	88 ec       	ldi	r24, 0xC8	; 200
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9c 83       	std	Y+4, r25	; 0x04
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <main+0x6ca>
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <main+0x6be>
    2364:	14 c0       	rjmp	.+40     	; 0x238e <main+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <main+0x706>
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				CLCD_voidLCD_Clear();
    238e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
				memset(enteredPassword, 0, sizeof (enteredPassword)); // Reset entered password
    2392:	ce 01       	movw	r24, r28
    2394:	8a 5a       	subi	r24, 0xAA	; 170
    2396:	9f 4f       	sbci	r25, 0xFF	; 255
    2398:	60 e0       	ldi	r22, 0x00	; 0
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	46 e0       	ldi	r20, 0x06	; 6
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	0e 94 33 1a 	call	0x3466	; 0x3466 <memset>
    23a4:	7b cd       	rjmp	.-1290   	; 0x1e9c <main+0x21c>
			}
		} else {
			// Accumulate the entered digits as a string
			if (y >= '0' && y <= '9') {
    23a6:	fe 01       	movw	r30, r28
    23a8:	ee 5a       	subi	r30, 0xAE	; 174
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	80 33       	cpi	r24, 0x30	; 48
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <main+0x734>
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <main+0x7b2>
    23b4:	fe 01       	movw	r30, r28
    23b6:	ee 5a       	subi	r30, 0xAE	; 174
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	8a 33       	cpi	r24, 0x3A	; 58
    23be:	c8 f5       	brcc	.+114    	; 0x2432 <main+0x7b2>
				for (int i = 0; i < 5; i++) {
    23c0:	fe 01       	movw	r30, r28
    23c2:	e9 5b       	subi	r30, 0xB9	; 185
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	11 82       	std	Z+1, r1	; 0x01
    23c8:	10 82       	st	Z, r1
    23ca:	2b c0       	rjmp	.+86     	; 0x2422 <main+0x7a2>
					if (enteredPassword[i] == '\0') {
    23cc:	fe 01       	movw	r30, r28
    23ce:	e9 5b       	subi	r30, 0xB9	; 185
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	20 81       	ld	r18, Z
    23d4:	31 81       	ldd	r19, Z+1	; 0x01
    23d6:	ce 01       	movw	r24, r28
    23d8:	8a 5a       	subi	r24, 0xAA	; 170
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	89 f4       	brne	.+34     	; 0x240a <main+0x78a>
						enteredPassword[i] = y;
    23e8:	fe 01       	movw	r30, r28
    23ea:	e9 5b       	subi	r30, 0xB9	; 185
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	20 81       	ld	r18, Z
    23f0:	31 81       	ldd	r19, Z+1	; 0x01
    23f2:	ce 01       	movw	r24, r28
    23f4:	8a 5a       	subi	r24, 0xAA	; 170
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	dc 01       	movw	r26, r24
    23fa:	a2 0f       	add	r26, r18
    23fc:	b3 1f       	adc	r27, r19
    23fe:	fe 01       	movw	r30, r28
    2400:	ee 5a       	subi	r30, 0xAE	; 174
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	8c 93       	st	X, r24
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <main+0x7b2>
				memset(enteredPassword, 0, sizeof (enteredPassword)); // Reset entered password
			}
		} else {
			// Accumulate the entered digits as a string
			if (y >= '0' && y <= '9') {
				for (int i = 0; i < 5; i++) {
    240a:	de 01       	movw	r26, r28
    240c:	a9 5b       	subi	r26, 0xB9	; 185
    240e:	bf 4f       	sbci	r27, 0xFF	; 255
    2410:	fe 01       	movw	r30, r28
    2412:	e9 5b       	subi	r30, 0xB9	; 185
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	9c 93       	st	X, r25
    2420:	8e 93       	st	-X, r24
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5b       	subi	r30, 0xB9	; 185
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	85 30       	cpi	r24, 0x05	; 5
    242e:	91 05       	cpc	r25, r1
    2430:	6c f2       	brlt	.-102    	; 0x23cc <main+0x74c>
						break;
					}
				}
			}
			// Display the entered digits on the LCD
			CLCD_voidGoTo_X_Y(0, 0);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	60 e0       	ldi	r22, 0x00	; 0
    2436:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
			CLCD_voidString(enteredPassword);
    243a:	ce 01       	movw	r24, r28
    243c:	8a 5a       	subi	r24, 0xAA	; 170
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2444:	2b cd       	rjmp	.-1450   	; 0x1e9c <main+0x21c>
			}
		}
	}

	// Check if there are more password trials remaining
	if (h > 0) {
    2446:	fe 01       	movw	r30, r28
    2448:	e0 5b       	subi	r30, 0xB0	; 176
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	18 16       	cp	r1, r24
    2452:	19 06       	cpc	r1, r25
    2454:	34 f4       	brge	.+12     	; 0x2462 <main+0x7e2>
		cm(); // Enter the manual control section
    2456:	ce 01       	movw	r24, r28
    2458:	8d 5a       	subi	r24, 0xAD	; 173
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	1c 01       	movw	r2, r24
    245e:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
	}
}
    2462:	ca 59       	subi	r28, 0x9A	; 154
    2464:	df 4f       	sbci	r29, 0xFF	; 255
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	3f 90       	pop	r3
    247a:	2f 90       	pop	r2
    247c:	08 95       	ret

0000247e <cm.1346>:
	u8 x;
	u8 pressed;
	u8 r;

	// Function for manual control section
	void cm(void) {
    247e:	2f 92       	push	r2
    2480:	3f 92       	push	r3
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	c2 57       	subi	r28, 0x72	; 114
    2490:	d0 40       	sbci	r29, 0x00	; 0
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	e3 96       	adiw	r28, 0x33	; 51
    249e:	3f ae       	std	Y+63, r3	; 0x3f
    24a0:	2e ae       	std	Y+62, r2	; 0x3e
    24a2:	e3 97       	sbiw	r28, 0x33	; 51
		while (1) {
			// Wait for a key press
			do {
				x = KPD_GETPressedKey();
    24a4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    24a8:	e3 96       	adiw	r28, 0x33	; 51
    24aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ae:	e3 97       	sbiw	r28, 0x33	; 51
    24b0:	82 83       	std	Z+2, r24	; 0x02
			} while (x == KPD_NOT_PRESSED_KEY);
    24b2:	e3 96       	adiw	r28, 0x33	; 51
    24b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    24b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    24b8:	e3 97       	sbiw	r28, 0x33	; 51
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	8f 3f       	cpi	r24, 0xFF	; 255
    24be:	91 f3       	breq	.-28     	; 0x24a4 <cm.1346+0x26>

			if (x == 'C') {
    24c0:	e3 96       	adiw	r28, 0x33	; 51
    24c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    24c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    24c6:	e3 97       	sbiw	r28, 0x33	; 51
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	83 34       	cpi	r24, 0x43	; 67
    24cc:	59 f7       	brne	.-42     	; 0x24a4 <cm.1346+0x26>
				CLCD_voidGoTo_X_Y(0, 0);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
				CLCD_voidString("Need to control?");
    24d6:	81 ec       	ldi	r24, 0xC1	; 193
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
				CLCD_voidGoTo_X_Y(1, 0);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
				CLCD_voidString("(1)yes (2)no");
    24e6:	82 ed       	ldi	r24, 0xD2	; 210
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    24ee:	fe 01       	movw	r30, r28
    24f0:	e3 59       	subi	r30, 0x93	; 147
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	aa e7       	ldi	r26, 0x7A	; 122
    24fa:	b4 e4       	ldi	r27, 0x44	; 68
    24fc:	80 83       	st	Z, r24
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	a2 83       	std	Z+2, r26	; 0x02
    2502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	8e 01       	movw	r16, r28
    2506:	07 59       	subi	r16, 0x97	; 151
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	e3 59       	subi	r30, 0x93	; 147
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	f8 01       	movw	r30, r16
    252a:	80 83       	st	Z, r24
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	a2 83       	std	Z+2, r26	; 0x02
    2530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2532:	fe 01       	movw	r30, r28
    2534:	e7 59       	subi	r30, 0x97	; 151
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	44 f4       	brge	.+16     	; 0x2560 <cm.1346+0xe2>
		__ticks = 1;
    2550:	fe 01       	movw	r30, r28
    2552:	e9 59       	subi	r30, 0x99	; 153
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	64 c0       	rjmp	.+200    	; 0x2628 <cm.1346+0x1aa>
	else if (__tmp > 65535)
    2560:	fe 01       	movw	r30, r28
    2562:	e7 59       	subi	r30, 0x97	; 151
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	0c f0       	brlt	.+2      	; 0x2580 <cm.1346+0x102>
    257e:	43 c0       	rjmp	.+134    	; 0x2606 <cm.1346+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	fe 01       	movw	r30, r28
    2582:	e3 59       	subi	r30, 0x93	; 147
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8e 01       	movw	r16, r28
    25a0:	09 59       	subi	r16, 0x99	; 153
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	f8 01       	movw	r30, r16
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	1f c0       	rjmp	.+62     	; 0x25f6 <cm.1346+0x178>
    25b8:	fe 01       	movw	r30, r28
    25ba:	eb 59       	subi	r30, 0x9B	; 155
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	eb 59       	subi	r30, 0x9B	; 155
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <cm.1346+0x152>
    25d4:	fe 01       	movw	r30, r28
    25d6:	eb 59       	subi	r30, 0x9B	; 155
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	de 01       	movw	r26, r28
    25e0:	a9 59       	subi	r26, 0x99	; 153
    25e2:	bf 4f       	sbci	r27, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	e9 59       	subi	r30, 0x99	; 153
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	9c 93       	st	X, r25
    25f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	fe 01       	movw	r30, r28
    25f8:	e9 59       	subi	r30, 0x99	; 153
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	d1 f6       	brne	.-76     	; 0x25b8 <cm.1346+0x13a>
    2604:	27 c0       	rjmp	.+78     	; 0x2654 <cm.1346+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	8e 01       	movw	r16, r28
    2608:	09 59       	subi	r16, 0x99	; 153
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	fe 01       	movw	r30, r28
    260e:	e7 59       	subi	r30, 0x97	; 151
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	60 81       	ld	r22, Z
    2614:	71 81       	ldd	r23, Z+1	; 0x01
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	de 01       	movw	r26, r28
    262a:	ad 59       	subi	r26, 0x9D	; 157
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
    262e:	fe 01       	movw	r30, r28
    2630:	e9 59       	subi	r30, 0x99	; 153
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	8d 93       	st	X+, r24
    263a:	9c 93       	st	X, r25
    263c:	fe 01       	movw	r30, r28
    263e:	ed 59       	subi	r30, 0x9D	; 157
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <cm.1346+0x1c8>
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
				_delay_ms(1000);
				CLCD_voidLCD_Clear();
    2654:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
				// Wait for a response (yes or no)
				do {
					r = KPD_GETPressedKey();
    2658:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    265c:	e3 96       	adiw	r28, 0x33	; 51
    265e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2660:	ff ad       	ldd	r31, Y+63	; 0x3f
    2662:	e3 97       	sbiw	r28, 0x33	; 51
    2664:	81 83       	std	Z+1, r24	; 0x01
				} while (r == KPD_NOT_PRESSED_KEY);
    2666:	e3 96       	adiw	r28, 0x33	; 51
    2668:	ee ad       	ldd	r30, Y+62	; 0x3e
    266a:	ff ad       	ldd	r31, Y+63	; 0x3f
    266c:	e3 97       	sbiw	r28, 0x33	; 51
    266e:	81 81       	ldd	r24, Z+1	; 0x01
    2670:	8f 3f       	cpi	r24, 0xFF	; 255
    2672:	91 f3       	breq	.-28     	; 0x2658 <cm.1346+0x1da>

				if (r == '1') {
    2674:	e3 96       	adiw	r28, 0x33	; 51
    2676:	ee ad       	ldd	r30, Y+62	; 0x3e
    2678:	ff ad       	ldd	r31, Y+63	; 0x3f
    267a:	e3 97       	sbiw	r28, 0x33	; 51
    267c:	81 81       	ldd	r24, Z+1	; 0x01
    267e:	81 33       	cpi	r24, 0x31	; 49
    2680:	09 f0       	breq	.+2      	; 0x2684 <cm.1346+0x206>
    2682:	dd c4       	rjmp	.+2490   	; 0x303e <cm.1346+0xbc0>
					CLCD_voidGoTo_X_Y(0, 0);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
					CLCD_voidString("1.Room1 2.Room2");
    268c:	8f ed       	ldi	r24, 0xDF	; 223
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
					CLCD_voidGoTo_X_Y(1, 0);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
					CLCD_voidString("3.Room3 4.HU 5.AC");
    269c:	8f ee       	ldi	r24, 0xEF	; 239
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    26a4:	fe 01       	movw	r30, r28
    26a6:	e1 5a       	subi	r30, 0xA1	; 161
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	aa e7       	ldi	r26, 0x7A	; 122
    26b0:	b4 e4       	ldi	r27, 0x44	; 68
    26b2:	80 83       	st	Z, r24
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	a2 83       	std	Z+2, r26	; 0x02
    26b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	8e 01       	movw	r16, r28
    26bc:	05 5a       	subi	r16, 0xA5	; 165
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 5a       	subi	r30, 0xA1	; 161
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	f8 01       	movw	r30, r16
    26e0:	80 83       	st	Z, r24
    26e2:	91 83       	std	Z+1, r25	; 0x01
    26e4:	a2 83       	std	Z+2, r26	; 0x02
    26e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26e8:	fe 01       	movw	r30, r28
    26ea:	e5 5a       	subi	r30, 0xA5	; 165
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e8       	ldi	r20, 0x80	; 128
    26fc:	5f e3       	ldi	r21, 0x3F	; 63
    26fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2702:	88 23       	and	r24, r24
    2704:	44 f4       	brge	.+16     	; 0x2716 <cm.1346+0x298>
		__ticks = 1;
    2706:	fe 01       	movw	r30, r28
    2708:	e7 5a       	subi	r30, 0xA7	; 167
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	80 83       	st	Z, r24
    2714:	64 c0       	rjmp	.+200    	; 0x27de <cm.1346+0x360>
	else if (__tmp > 65535)
    2716:	fe 01       	movw	r30, r28
    2718:	e5 5a       	subi	r30, 0xA5	; 165
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	3f ef       	ldi	r19, 0xFF	; 255
    2728:	4f e7       	ldi	r20, 0x7F	; 127
    272a:	57 e4       	ldi	r21, 0x47	; 71
    272c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2730:	18 16       	cp	r1, r24
    2732:	0c f0       	brlt	.+2      	; 0x2736 <cm.1346+0x2b8>
    2734:	43 c0       	rjmp	.+134    	; 0x27bc <cm.1346+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2736:	fe 01       	movw	r30, r28
    2738:	e1 5a       	subi	r30, 0xA1	; 161
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8e 01       	movw	r16, r28
    2756:	07 5a       	subi	r16, 0xA7	; 167
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	bc 01       	movw	r22, r24
    275c:	cd 01       	movw	r24, r26
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	1f c0       	rjmp	.+62     	; 0x27ac <cm.1346+0x32e>
    276e:	fe 01       	movw	r30, r28
    2770:	e9 5a       	subi	r30, 0xA9	; 169
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	88 ec       	ldi	r24, 0xC8	; 200
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
    277c:	fe 01       	movw	r30, r28
    277e:	e9 5a       	subi	r30, 0xA9	; 169
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <cm.1346+0x308>
    278a:	fe 01       	movw	r30, r28
    278c:	e9 5a       	subi	r30, 0xA9	; 169
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	de 01       	movw	r26, r28
    2796:	a7 5a       	subi	r26, 0xA7	; 167
    2798:	bf 4f       	sbci	r27, 0xFF	; 255
    279a:	fe 01       	movw	r30, r28
    279c:	e7 5a       	subi	r30, 0xA7	; 167
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	11 96       	adiw	r26, 0x01	; 1
    27a8:	9c 93       	st	X, r25
    27aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5a       	subi	r30, 0xA7	; 167
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	d1 f6       	brne	.-76     	; 0x276e <cm.1346+0x2f0>
    27ba:	27 c0       	rjmp	.+78     	; 0x280a <cm.1346+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	8e 01       	movw	r16, r28
    27be:	07 5a       	subi	r16, 0xA7	; 167
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	fe 01       	movw	r30, r28
    27c4:	e5 5a       	subi	r30, 0xA5	; 165
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	60 81       	ld	r22, Z
    27ca:	71 81       	ldd	r23, Z+1	; 0x01
    27cc:	82 81       	ldd	r24, Z+2	; 0x02
    27ce:	93 81       	ldd	r25, Z+3	; 0x03
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	de 01       	movw	r26, r28
    27e0:	ab 5a       	subi	r26, 0xAB	; 171
    27e2:	bf 4f       	sbci	r27, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	e7 5a       	subi	r30, 0xA7	; 167
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	8d 93       	st	X+, r24
    27f0:	9c 93       	st	X, r25
    27f2:	fe 01       	movw	r30, r28
    27f4:	eb 5a       	subi	r30, 0xAB	; 171
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <cm.1346+0x37e>
    2800:	fe 01       	movw	r30, r28
    2802:	eb 5a       	subi	r30, 0xAB	; 171
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
					_delay_ms(1000);
					CLCD_voidLCD_Clear();
    280a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
					while (1) {
						// Wait for a room selection
						do {
							pressed = KPD_GETPressedKey();
    280e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    2812:	e3 96       	adiw	r28, 0x33	; 51
    2814:	ee ad       	ldd	r30, Y+62	; 0x3e
    2816:	ff ad       	ldd	r31, Y+63	; 0x3f
    2818:	e3 97       	sbiw	r28, 0x33	; 51
    281a:	80 83       	st	Z, r24
						} while (pressed == KPD_NOT_PRESSED_KEY);
    281c:	e3 96       	adiw	r28, 0x33	; 51
    281e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2820:	ff ad       	ldd	r31, Y+63	; 0x3f
    2822:	e3 97       	sbiw	r28, 0x33	; 51
    2824:	80 81       	ld	r24, Z
    2826:	8f 3f       	cpi	r24, 0xFF	; 255
    2828:	91 f3       	breq	.-28     	; 0x280e <cm.1346+0x390>

						// Control options for different rooms and devices
						if (pressed == '1') {
    282a:	e3 96       	adiw	r28, 0x33	; 51
    282c:	ee ad       	ldd	r30, Y+62	; 0x3e
    282e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2830:	e3 97       	sbiw	r28, 0x33	; 51
    2832:	80 81       	ld	r24, Z
    2834:	81 33       	cpi	r24, 0x31	; 49
    2836:	09 f0       	breq	.+2      	; 0x283a <cm.1346+0x3bc>
    2838:	f7 c0       	rjmp	.+494    	; 0x2a28 <cm.1346+0x5aa>
							CLCD_voidGoTo_X_Y(0, 0);
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("Room 1:");
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
							CLCD_voidGoTo_X_Y(1, 0);
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("1.on  2.off 3.c");
    2852:	89 e0       	ldi	r24, 0x09	; 9
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    285a:	fe 01       	movw	r30, r28
    285c:	ef 5a       	subi	r30, 0xAF	; 175
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	aa ef       	ldi	r26, 0xFA	; 250
    2866:	b3 e4       	ldi	r27, 0x43	; 67
    2868:	80 83       	st	Z, r24
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	a2 83       	std	Z+2, r26	; 0x02
    286e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	8e 01       	movw	r16, r28
    2872:	03 5b       	subi	r16, 0xB3	; 179
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	ef 5a       	subi	r30, 0xAF	; 175
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	4a ef       	ldi	r20, 0xFA	; 250
    288a:	54 e4       	ldi	r21, 0x44	; 68
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	80 83       	st	Z, r24
    2898:	91 83       	std	Z+1, r25	; 0x01
    289a:	a2 83       	std	Z+2, r26	; 0x02
    289c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    289e:	fe 01       	movw	r30, r28
    28a0:	e3 5b       	subi	r30, 0xB3	; 179
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	44 f4       	brge	.+16     	; 0x28cc <cm.1346+0x44e>
		__ticks = 1;
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	64 c0       	rjmp	.+200    	; 0x2994 <cm.1346+0x516>
	else if (__tmp > 65535)
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 5b       	subi	r30, 0xB3	; 179
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	0c f0       	brlt	.+2      	; 0x28ec <cm.1346+0x46e>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <cm.1346+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	fe 01       	movw	r30, r28
    28ee:	ef 5a       	subi	r30, 0xAF	; 175
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8e 01       	movw	r16, r28
    290c:	05 5b       	subi	r16, 0xB5	; 181
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	f8 01       	movw	r30, r16
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
    2922:	1f c0       	rjmp	.+62     	; 0x2962 <cm.1346+0x4e4>
    2924:	fe 01       	movw	r30, r28
    2926:	e7 5b       	subi	r30, 0xB7	; 183
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
    2932:	fe 01       	movw	r30, r28
    2934:	e7 5b       	subi	r30, 0xB7	; 183
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <cm.1346+0x4be>
    2940:	fe 01       	movw	r30, r28
    2942:	e7 5b       	subi	r30, 0xB7	; 183
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294a:	de 01       	movw	r26, r28
    294c:	a5 5b       	subi	r26, 0xB5	; 181
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5b       	subi	r30, 0xB5	; 181
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	11 96       	adiw	r26, 0x01	; 1
    295e:	9c 93       	st	X, r25
    2960:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2962:	fe 01       	movw	r30, r28
    2964:	e5 5b       	subi	r30, 0xB5	; 181
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	d1 f6       	brne	.-76     	; 0x2924 <cm.1346+0x4a6>
    2970:	27 c0       	rjmp	.+78     	; 0x29c0 <cm.1346+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2972:	8e 01       	movw	r16, r28
    2974:	05 5b       	subi	r16, 0xB5	; 181
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	e3 5b       	subi	r30, 0xB3	; 179
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	de 01       	movw	r26, r28
    2996:	a9 5b       	subi	r26, 0xB9	; 185
    2998:	bf 4f       	sbci	r27, 0xFF	; 255
    299a:	fe 01       	movw	r30, r28
    299c:	e5 5b       	subi	r30, 0xB5	; 181
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	8d 93       	st	X+, r24
    29a6:	9c 93       	st	X, r25
    29a8:	fe 01       	movw	r30, r28
    29aa:	e9 5b       	subi	r30, 0xB9	; 185
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	91 81       	ldd	r25, Z+1	; 0x01
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <cm.1346+0x534>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e9 5b       	subi	r30, 0xB9	; 185
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	91 83       	std	Z+1, r25	; 0x01
    29be:	80 83       	st	Z, r24
							_delay_ms(500);
							CLCD_voidLCD_Clear();
    29c0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
							while (1) {
								// Wait for an action (on, off, cancel)
								do {
									pressed = KPD_GETPressedKey();
    29c4:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    29c8:	e3 96       	adiw	r28, 0x33	; 51
    29ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    29cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ce:	e3 97       	sbiw	r28, 0x33	; 51
    29d0:	80 83       	st	Z, r24
								} while (pressed == KPD_NOT_PRESSED_KEY);
    29d2:	e3 96       	adiw	r28, 0x33	; 51
    29d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    29d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    29d8:	e3 97       	sbiw	r28, 0x33	; 51
    29da:	80 81       	ld	r24, Z
    29dc:	8f 3f       	cpi	r24, 0xFF	; 255
    29de:	91 f3       	breq	.-28     	; 0x29c4 <cm.1346+0x546>
								if (pressed == '1') {
    29e0:	e3 96       	adiw	r28, 0x33	; 51
    29e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    29e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    29e6:	e3 97       	sbiw	r28, 0x33	; 51
    29e8:	80 81       	ld	r24, Z
    29ea:	81 33       	cpi	r24, 0x31	; 49
    29ec:	21 f4       	brne	.+8      	; 0x29f6 <cm.1346+0x578>
									UART_voidSendData_TX(2);
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    29f4:	e7 cf       	rjmp	.-50     	; 0x29c4 <cm.1346+0x546>
								} else if (pressed == '2') {
    29f6:	e3 96       	adiw	r28, 0x33	; 51
    29f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    29fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    29fc:	e3 97       	sbiw	r28, 0x33	; 51
    29fe:	80 81       	ld	r24, Z
    2a00:	82 33       	cpi	r24, 0x32	; 50
    2a02:	21 f4       	brne	.+8      	; 0x2a0c <cm.1346+0x58e>
									UART_voidSendData_TX(3);
    2a04:	83 e0       	ldi	r24, 0x03	; 3
    2a06:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2a0a:	dc cf       	rjmp	.-72     	; 0x29c4 <cm.1346+0x546>
								} else if (pressed == '3') {
    2a0c:	e3 96       	adiw	r28, 0x33	; 51
    2a0e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a10:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a12:	e3 97       	sbiw	r28, 0x33	; 51
    2a14:	80 81       	ld	r24, Z
    2a16:	83 33       	cpi	r24, 0x33	; 51
    2a18:	a9 f6       	brne	.-86     	; 0x29c4 <cm.1346+0x546>
									// Return to the previous menu
									cm();
    2a1a:	e3 96       	adiw	r28, 0x33	; 51
    2a1c:	2e ac       	ldd	r2, Y+62	; 0x3e
    2a1e:	3f ac       	ldd	r3, Y+63	; 0x3f
    2a20:	e3 97       	sbiw	r28, 0x33	; 51
    2a22:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
    2a26:	ce cf       	rjmp	.-100    	; 0x29c4 <cm.1346+0x546>
								}
							}
						}
						// Similar control options for other rooms and devices
						if (pressed == '2') {
    2a28:	e3 96       	adiw	r28, 0x33	; 51
    2a2a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2a2c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a2e:	e3 97       	sbiw	r28, 0x33	; 51
    2a30:	80 81       	ld	r24, Z
    2a32:	82 33       	cpi	r24, 0x32	; 50
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <cm.1346+0x5ba>
    2a36:	c9 c0       	rjmp	.+402    	; 0x2bca <cm.1346+0x74c>
							CLCD_voidGoTo_X_Y(0, 0);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("Room 2:");
    2a40:	89 e1       	ldi	r24, 0x19	; 25
    2a42:	91 e0       	ldi	r25, 0x01	; 1
    2a44:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
							CLCD_voidGoTo_X_Y(1, 0);
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("1.on  2.off 3.c");
    2a50:	89 e0       	ldi	r24, 0x09	; 9
    2a52:	91 e0       	ldi	r25, 0x01	; 1
    2a54:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ed 5b       	subi	r30, 0xBD	; 189
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	aa ef       	ldi	r26, 0xFA	; 250
    2a64:	b3 e4       	ldi	r27, 0x43	; 67
    2a66:	80 83       	st	Z, r24
    2a68:	91 83       	std	Z+1, r25	; 0x01
    2a6a:	a2 83       	std	Z+2, r26	; 0x02
    2a6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	01 5c       	subi	r16, 0xC1	; 193
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	ed 5b       	subi	r30, 0xBD	; 189
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a ef       	ldi	r20, 0xFA	; 250
    2a88:	54 e4       	ldi	r21, 0x44	; 68
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ff 96       	adiw	r30, 0x3f	; 63
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e8       	ldi	r20, 0x80	; 128
    2aae:	5f e3       	ldi	r21, 0x3F	; 63
    2ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab4:	88 23       	and	r24, r24
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <cm.1346+0x644>
		__ticks = 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e af       	std	Y+62, r25	; 0x3e
    2abe:	8d af       	std	Y+61, r24	; 0x3d
    2ac0:	46 c0       	rjmp	.+140    	; 0x2b4e <cm.1346+0x6d0>
	else if (__tmp > 65535)
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	ff 96       	adiw	r30, 0x3f	; 63
    2ac6:	60 81       	ld	r22, Z
    2ac8:	71 81       	ldd	r23, Z+1	; 0x01
    2aca:	82 81       	ldd	r24, Z+2	; 0x02
    2acc:	93 81       	ldd	r25, Z+3	; 0x03
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	3f ef       	ldi	r19, 0xFF	; 255
    2ad2:	4f e7       	ldi	r20, 0x7F	; 127
    2ad4:	57 e4       	ldi	r21, 0x47	; 71
    2ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ada:	18 16       	cp	r1, r24
    2adc:	64 f5       	brge	.+88     	; 0x2b36 <cm.1346+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ade:	fe 01       	movw	r30, r28
    2ae0:	ed 5b       	subi	r30, 0xBD	; 189
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	60 81       	ld	r22, Z
    2ae6:	71 81       	ldd	r23, Z+1	; 0x01
    2ae8:	82 81       	ldd	r24, Z+2	; 0x02
    2aea:	93 81       	ldd	r25, Z+3	; 0x03
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9e af       	std	Y+62, r25	; 0x3e
    2b0a:	8d af       	std	Y+61, r24	; 0x3d
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <cm.1346+0x6ae>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c af       	std	Y+60, r25	; 0x3c
    2b14:	8b af       	std	Y+59, r24	; 0x3b
    2b16:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b18:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <cm.1346+0x69c>
    2b1e:	9c af       	std	Y+60, r25	; 0x3c
    2b20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b24:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9e af       	std	Y+62, r25	; 0x3e
    2b2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <cm.1346+0x690>
    2b34:	16 c0       	rjmp	.+44     	; 0x2b62 <cm.1346+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	fe 01       	movw	r30, r28
    2b38:	ff 96       	adiw	r30, 0x3f	; 63
    2b3a:	60 81       	ld	r22, Z
    2b3c:	71 81       	ldd	r23, Z+1	; 0x01
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	93 81       	ldd	r25, Z+3	; 0x03
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9e af       	std	Y+62, r25	; 0x3e
    2b4c:	8d af       	std	Y+61, r24	; 0x3d
    2b4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b52:	9a af       	std	Y+58, r25	; 0x3a
    2b54:	89 af       	std	Y+57, r24	; 0x39
    2b56:	89 ad       	ldd	r24, Y+57	; 0x39
    2b58:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <cm.1346+0x6dc>
    2b5e:	9a af       	std	Y+58, r25	; 0x3a
    2b60:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(500);
							CLCD_voidLCD_Clear();
    2b62:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
							while (1) {
								do {
									pressed = KPD_GETPressedKey();
    2b66:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    2b6a:	e3 96       	adiw	r28, 0x33	; 51
    2b6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b70:	e3 97       	sbiw	r28, 0x33	; 51
    2b72:	80 83       	st	Z, r24
								} while (pressed == KPD_NOT_PRESSED_KEY);
    2b74:	e3 96       	adiw	r28, 0x33	; 51
    2b76:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b78:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b7a:	e3 97       	sbiw	r28, 0x33	; 51
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b80:	91 f3       	breq	.-28     	; 0x2b66 <cm.1346+0x6e8>
								if (pressed == '1') {
    2b82:	e3 96       	adiw	r28, 0x33	; 51
    2b84:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b86:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b88:	e3 97       	sbiw	r28, 0x33	; 51
    2b8a:	80 81       	ld	r24, Z
    2b8c:	81 33       	cpi	r24, 0x31	; 49
    2b8e:	21 f4       	brne	.+8      	; 0x2b98 <cm.1346+0x71a>
									UART_voidSendData_TX(4);
    2b90:	84 e0       	ldi	r24, 0x04	; 4
    2b92:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2b96:	e7 cf       	rjmp	.-50     	; 0x2b66 <cm.1346+0x6e8>
								} else if (pressed == '2') {
    2b98:	e3 96       	adiw	r28, 0x33	; 51
    2b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b9e:	e3 97       	sbiw	r28, 0x33	; 51
    2ba0:	80 81       	ld	r24, Z
    2ba2:	82 33       	cpi	r24, 0x32	; 50
    2ba4:	21 f4       	brne	.+8      	; 0x2bae <cm.1346+0x730>
									UART_voidSendData_TX(5);
    2ba6:	85 e0       	ldi	r24, 0x05	; 5
    2ba8:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2bac:	dc cf       	rjmp	.-72     	; 0x2b66 <cm.1346+0x6e8>
								} else if (pressed == '3') {
    2bae:	e3 96       	adiw	r28, 0x33	; 51
    2bb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bb4:	e3 97       	sbiw	r28, 0x33	; 51
    2bb6:	80 81       	ld	r24, Z
    2bb8:	83 33       	cpi	r24, 0x33	; 51
    2bba:	a9 f6       	brne	.-86     	; 0x2b66 <cm.1346+0x6e8>
									// Return to the previous menu
									cm();
    2bbc:	e3 96       	adiw	r28, 0x33	; 51
    2bbe:	2e ac       	ldd	r2, Y+62	; 0x3e
    2bc0:	3f ac       	ldd	r3, Y+63	; 0x3f
    2bc2:	e3 97       	sbiw	r28, 0x33	; 51
    2bc4:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
    2bc8:	ce cf       	rjmp	.-100    	; 0x2b66 <cm.1346+0x6e8>
								}
							}
						}
						if (pressed == '3') {
    2bca:	e3 96       	adiw	r28, 0x33	; 51
    2bcc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bce:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bd0:	e3 97       	sbiw	r28, 0x33	; 51
    2bd2:	80 81       	ld	r24, Z
    2bd4:	83 33       	cpi	r24, 0x33	; 51
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <cm.1346+0x75c>
    2bd8:	b6 c0       	rjmp	.+364    	; 0x2d46 <cm.1346+0x8c8>
							CLCD_voidGoTo_X_Y(0, 0);
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	60 e0       	ldi	r22, 0x00	; 0
    2bde:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("Room 3:");
    2be2:	81 e2       	ldi	r24, 0x21	; 33
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
							CLCD_voidGoTo_X_Y(1, 0);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("1.on  2.off 3.c");
    2bf2:	89 e0       	ldi	r24, 0x09	; 9
    2bf4:	91 e0       	ldi	r25, 0x01	; 1
    2bf6:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	aa ef       	ldi	r26, 0xFA	; 250
    2c00:	b3 e4       	ldi	r27, 0x43	; 67
    2c02:	8d ab       	std	Y+53, r24	; 0x35
    2c04:	9e ab       	std	Y+54, r25	; 0x36
    2c06:	af ab       	std	Y+55, r26	; 0x37
    2c08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c10:	98 ad       	ldd	r25, Y+56	; 0x38
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	4a ef       	ldi	r20, 0xFA	; 250
    2c18:	54 e4       	ldi	r21, 0x44	; 68
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	89 ab       	std	Y+49, r24	; 0x31
    2c24:	9a ab       	std	Y+50, r25	; 0x32
    2c26:	ab ab       	std	Y+51, r26	; 0x33
    2c28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c30:	9c a9       	ldd	r25, Y+52	; 0x34
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e8       	ldi	r20, 0x80	; 128
    2c38:	5f e3       	ldi	r21, 0x3F	; 63
    2c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	2c f4       	brge	.+10     	; 0x2c4c <cm.1346+0x7ce>
		__ticks = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	98 ab       	std	Y+48, r25	; 0x30
    2c48:	8f a7       	std	Y+47, r24	; 0x2f
    2c4a:	3f c0       	rjmp	.+126    	; 0x2cca <cm.1346+0x84c>
	else if (__tmp > 65535)
    2c4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c50:	8b a9       	ldd	r24, Y+51	; 0x33
    2c52:	9c a9       	ldd	r25, Y+52	; 0x34
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	4c f5       	brge	.+82     	; 0x2cb6 <cm.1346+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	6d a9       	ldd	r22, Y+53	; 0x35
    2c66:	7e a9       	ldd	r23, Y+54	; 0x36
    2c68:	8f a9       	ldd	r24, Y+55	; 0x37
    2c6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e2       	ldi	r20, 0x20	; 32
    2c72:	51 e4       	ldi	r21, 0x41	; 65
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	bc 01       	movw	r22, r24
    2c7e:	cd 01       	movw	r24, r26
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	98 ab       	std	Y+48, r25	; 0x30
    2c8a:	8f a7       	std	Y+47, r24	; 0x2f
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <cm.1346+0x82e>
    2c8e:	88 ec       	ldi	r24, 0xC8	; 200
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9e a7       	std	Y+46, r25	; 0x2e
    2c94:	8d a7       	std	Y+45, r24	; 0x2d
    2c96:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c98:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <cm.1346+0x81c>
    2c9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ca0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	98 ab       	std	Y+48, r25	; 0x30
    2caa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cae:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	69 f7       	brne	.-38     	; 0x2c8e <cm.1346+0x810>
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <cm.1346+0x860>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cba:	8b a9       	ldd	r24, Y+51	; 0x33
    2cbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    2cce:	9c a7       	std	Y+44, r25	; 0x2c
    2cd0:	8b a7       	std	Y+43, r24	; 0x2b
    2cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <cm.1346+0x858>
    2cda:	9c a7       	std	Y+44, r25	; 0x2c
    2cdc:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(500);
							CLCD_voidLCD_Clear();
    2cde:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
							while (1) {
								do {
									pressed = KPD_GETPressedKey();
    2ce2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    2ce6:	e3 96       	adiw	r28, 0x33	; 51
    2ce8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cea:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cec:	e3 97       	sbiw	r28, 0x33	; 51
    2cee:	80 83       	st	Z, r24
								} while (pressed == KPD_NOT_PRESSED_KEY);
    2cf0:	e3 96       	adiw	r28, 0x33	; 51
    2cf2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cf4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cf6:	e3 97       	sbiw	r28, 0x33	; 51
    2cf8:	80 81       	ld	r24, Z
    2cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    2cfc:	91 f3       	breq	.-28     	; 0x2ce2 <cm.1346+0x864>
								if (pressed == '1') {
    2cfe:	e3 96       	adiw	r28, 0x33	; 51
    2d00:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d02:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d04:	e3 97       	sbiw	r28, 0x33	; 51
    2d06:	80 81       	ld	r24, Z
    2d08:	81 33       	cpi	r24, 0x31	; 49
    2d0a:	21 f4       	brne	.+8      	; 0x2d14 <cm.1346+0x896>
									UART_voidSendData_TX(6);
    2d0c:	86 e0       	ldi	r24, 0x06	; 6
    2d0e:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2d12:	e7 cf       	rjmp	.-50     	; 0x2ce2 <cm.1346+0x864>
								} else if (pressed == '2') {
    2d14:	e3 96       	adiw	r28, 0x33	; 51
    2d16:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d18:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d1a:	e3 97       	sbiw	r28, 0x33	; 51
    2d1c:	80 81       	ld	r24, Z
    2d1e:	82 33       	cpi	r24, 0x32	; 50
    2d20:	21 f4       	brne	.+8      	; 0x2d2a <cm.1346+0x8ac>
									UART_voidSendData_TX(7);
    2d22:	87 e0       	ldi	r24, 0x07	; 7
    2d24:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2d28:	dc cf       	rjmp	.-72     	; 0x2ce2 <cm.1346+0x864>
								} else if (pressed == '3') {
    2d2a:	e3 96       	adiw	r28, 0x33	; 51
    2d2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d30:	e3 97       	sbiw	r28, 0x33	; 51
    2d32:	80 81       	ld	r24, Z
    2d34:	83 33       	cpi	r24, 0x33	; 51
    2d36:	a9 f6       	brne	.-86     	; 0x2ce2 <cm.1346+0x864>
									// Return to the previous menu
									cm();
    2d38:	e3 96       	adiw	r28, 0x33	; 51
    2d3a:	2e ac       	ldd	r2, Y+62	; 0x3e
    2d3c:	3f ac       	ldd	r3, Y+63	; 0x3f
    2d3e:	e3 97       	sbiw	r28, 0x33	; 51
    2d40:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
    2d44:	ce cf       	rjmp	.-100    	; 0x2ce2 <cm.1346+0x864>
								}
							}
						}
						if (pressed == '4') {
    2d46:	e3 96       	adiw	r28, 0x33	; 51
    2d48:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d4c:	e3 97       	sbiw	r28, 0x33	; 51
    2d4e:	80 81       	ld	r24, Z
    2d50:	84 33       	cpi	r24, 0x34	; 52
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <cm.1346+0x8d8>
    2d54:	b6 c0       	rjmp	.+364    	; 0x2ec2 <cm.1346+0xa44>
							CLCD_voidGoTo_X_Y(0, 0);
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("Heater:");
    2d5e:	89 e2       	ldi	r24, 0x29	; 41
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
							CLCD_voidGoTo_X_Y(1, 0);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("1.on  2.off 3.c");
    2d6e:	89 e0       	ldi	r24, 0x09	; 9
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	aa ef       	ldi	r26, 0xFA	; 250
    2d7c:	b3 e4       	ldi	r27, 0x43	; 67
    2d7e:	8f a3       	std	Y+39, r24	; 0x27
    2d80:	98 a7       	std	Y+40, r25	; 0x28
    2d82:	a9 a7       	std	Y+41, r26	; 0x29
    2d84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	6f a1       	ldd	r22, Y+39	; 0x27
    2d88:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8b a3       	std	Y+35, r24	; 0x23
    2da0:	9c a3       	std	Y+36, r25	; 0x24
    2da2:	ad a3       	std	Y+37, r26	; 0x25
    2da4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2da6:	6b a1       	ldd	r22, Y+35	; 0x23
    2da8:	7c a1       	ldd	r23, Y+36	; 0x24
    2daa:	8d a1       	ldd	r24, Y+37	; 0x25
    2dac:	9e a1       	ldd	r25, Y+38	; 0x26
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <cm.1346+0x94a>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9a a3       	std	Y+34, r25	; 0x22
    2dc4:	89 a3       	std	Y+33, r24	; 0x21
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <cm.1346+0x9c8>
	else if (__tmp > 65535)
    2dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dca:	7c a1       	ldd	r23, Y+36	; 0x24
    2dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dce:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <cm.1346+0x9b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	6f a1       	ldd	r22, Y+39	; 0x27
    2de2:	78 a5       	ldd	r23, Y+40	; 0x28
    2de4:	89 a5       	ldd	r24, Y+41	; 0x29
    2de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9a a3       	std	Y+34, r25	; 0x22
    2e06:	89 a3       	std	Y+33, r24	; 0x21
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <cm.1346+0x9aa>
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	98 a3       	std	Y+32, r25	; 0x20
    2e10:	8f 8f       	std	Y+31, r24	; 0x1f
    2e12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e14:	98 a1       	ldd	r25, Y+32	; 0x20
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <cm.1346+0x998>
    2e1a:	98 a3       	std	Y+32, r25	; 0x20
    2e1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e20:	9a a1       	ldd	r25, Y+34	; 0x22
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9a a3       	std	Y+34, r25	; 0x22
    2e26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <cm.1346+0x98c>
    2e30:	14 c0       	rjmp	.+40     	; 0x2e5a <cm.1346+0x9dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6b a1       	ldd	r22, Y+35	; 0x23
    2e34:	7c a1       	ldd	r23, Y+36	; 0x24
    2e36:	8d a1       	ldd	r24, Y+37	; 0x25
    2e38:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9a a3       	std	Y+34, r25	; 0x22
    2e44:	89 a3       	std	Y+33, r24	; 0x21
    2e46:	89 a1       	ldd	r24, Y+33	; 0x21
    2e48:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <cm.1346+0x9d4>
    2e56:	9e 8f       	std	Y+30, r25	; 0x1e
    2e58:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(500);
							CLCD_voidLCD_Clear();
    2e5a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
							while (1) {
								do {
									pressed = KPD_GETPressedKey();
    2e5e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    2e62:	e3 96       	adiw	r28, 0x33	; 51
    2e64:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e66:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e68:	e3 97       	sbiw	r28, 0x33	; 51
    2e6a:	80 83       	st	Z, r24
								} while (pressed == KPD_NOT_PRESSED_KEY);
    2e6c:	e3 96       	adiw	r28, 0x33	; 51
    2e6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e70:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e72:	e3 97       	sbiw	r28, 0x33	; 51
    2e74:	80 81       	ld	r24, Z
    2e76:	8f 3f       	cpi	r24, 0xFF	; 255
    2e78:	91 f3       	breq	.-28     	; 0x2e5e <cm.1346+0x9e0>
								if (pressed == '1') {
    2e7a:	e3 96       	adiw	r28, 0x33	; 51
    2e7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e80:	e3 97       	sbiw	r28, 0x33	; 51
    2e82:	80 81       	ld	r24, Z
    2e84:	81 33       	cpi	r24, 0x31	; 49
    2e86:	21 f4       	brne	.+8      	; 0x2e90 <cm.1346+0xa12>
									UART_voidSendData_TX(8);
    2e88:	88 e0       	ldi	r24, 0x08	; 8
    2e8a:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2e8e:	e7 cf       	rjmp	.-50     	; 0x2e5e <cm.1346+0x9e0>
								} else if (pressed == '2') {
    2e90:	e3 96       	adiw	r28, 0x33	; 51
    2e92:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e94:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e96:	e3 97       	sbiw	r28, 0x33	; 51
    2e98:	80 81       	ld	r24, Z
    2e9a:	82 33       	cpi	r24, 0x32	; 50
    2e9c:	21 f4       	brne	.+8      	; 0x2ea6 <cm.1346+0xa28>
									UART_voidSendData_TX(9);
    2e9e:	89 e0       	ldi	r24, 0x09	; 9
    2ea0:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    2ea4:	dc cf       	rjmp	.-72     	; 0x2e5e <cm.1346+0x9e0>
								} else if (pressed == '3') {
    2ea6:	e3 96       	adiw	r28, 0x33	; 51
    2ea8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2eaa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2eac:	e3 97       	sbiw	r28, 0x33	; 51
    2eae:	80 81       	ld	r24, Z
    2eb0:	83 33       	cpi	r24, 0x33	; 51
    2eb2:	a9 f6       	brne	.-86     	; 0x2e5e <cm.1346+0x9e0>
									// Return to the previous menu
									cm();
    2eb4:	e3 96       	adiw	r28, 0x33	; 51
    2eb6:	2e ac       	ldd	r2, Y+62	; 0x3e
    2eb8:	3f ac       	ldd	r3, Y+63	; 0x3f
    2eba:	e3 97       	sbiw	r28, 0x33	; 51
    2ebc:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
    2ec0:	ce cf       	rjmp	.-100    	; 0x2e5e <cm.1346+0x9e0>
								}
							}
						}
						if (pressed == '5') {
    2ec2:	e3 96       	adiw	r28, 0x33	; 51
    2ec4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ec6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ec8:	e3 97       	sbiw	r28, 0x33	; 51
    2eca:	80 81       	ld	r24, Z
    2ecc:	85 33       	cpi	r24, 0x35	; 53
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <cm.1346+0xa54>
    2ed0:	9e cc       	rjmp	.-1732   	; 0x280e <cm.1346+0x390>
							CLCD_voidGoTo_X_Y(0, 0);
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("Cooler:");
    2eda:	81 e3       	ldi	r24, 0x31	; 49
    2edc:	91 e0       	ldi	r25, 0x01	; 1
    2ede:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
							CLCD_voidGoTo_X_Y(1, 0);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <CLCD_voidGoTo_X_Y>
							CLCD_voidString("1.on  2.off 3.c");
    2eea:	89 e0       	ldi	r24, 0x09	; 9
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	aa ef       	ldi	r26, 0xFA	; 250
    2ef8:	b3 e4       	ldi	r27, 0x43	; 67
    2efa:	89 8f       	std	Y+25, r24	; 0x19
    2efc:	9a 8f       	std	Y+26, r25	; 0x1a
    2efe:	ab 8f       	std	Y+27, r26	; 0x1b
    2f00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	69 8d       	ldd	r22, Y+25	; 0x19
    2f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	54 e4       	ldi	r21, 0x44	; 68
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8d 8b       	std	Y+21, r24	; 0x15
    2f1c:	9e 8b       	std	Y+22, r25	; 0x16
    2f1e:	af 8b       	std	Y+23, r26	; 0x17
    2f20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f22:	6d 89       	ldd	r22, Y+21	; 0x15
    2f24:	7e 89       	ldd	r23, Y+22	; 0x16
    2f26:	8f 89       	ldd	r24, Y+23	; 0x17
    2f28:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e8       	ldi	r20, 0x80	; 128
    2f30:	5f e3       	ldi	r21, 0x3F	; 63
    2f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f36:	88 23       	and	r24, r24
    2f38:	2c f4       	brge	.+10     	; 0x2f44 <cm.1346+0xac6>
		__ticks = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9c 8b       	std	Y+20, r25	; 0x14
    2f40:	8b 8b       	std	Y+19, r24	; 0x13
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <cm.1346+0xb44>
	else if (__tmp > 65535)
    2f44:	6d 89       	ldd	r22, Y+21	; 0x15
    2f46:	7e 89       	ldd	r23, Y+22	; 0x16
    2f48:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	4c f5       	brge	.+82     	; 0x2fae <cm.1346+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9c 8b       	std	Y+20, r25	; 0x14
    2f82:	8b 8b       	std	Y+19, r24	; 0x13
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <cm.1346+0xb26>
    2f86:	88 ec       	ldi	r24, 0xC8	; 200
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	9a 8b       	std	Y+18, r25	; 0x12
    2f8c:	89 8b       	std	Y+17, r24	; 0x11
    2f8e:	89 89       	ldd	r24, Y+17	; 0x11
    2f90:	9a 89       	ldd	r25, Y+18	; 0x12
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <cm.1346+0xb14>
    2f96:	9a 8b       	std	Y+18, r25	; 0x12
    2f98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9c 8b       	std	Y+20, r25	; 0x14
    2fa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <cm.1346+0xb08>
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <cm.1346+0xb58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9c 8b       	std	Y+20, r25	; 0x14
    2fc0:	8b 8b       	std	Y+19, r24	; 0x13
    2fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc6:	98 8b       	std	Y+16, r25	; 0x10
    2fc8:	8f 87       	std	Y+15, r24	; 0x0f
    2fca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fcc:	98 89       	ldd	r25, Y+16	; 0x10
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <cm.1346+0xb50>
    2fd2:	98 8b       	std	Y+16, r25	; 0x10
    2fd4:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(500);
							CLCD_voidLCD_Clear();
    2fd6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidLCD_Clear>
							while (1) {
								do {
									pressed = KPD_GETPressedKey();
    2fda:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <KPD_GETPressedKey>
    2fde:	e3 96       	adiw	r28, 0x33	; 51
    2fe0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fe2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fe4:	e3 97       	sbiw	r28, 0x33	; 51
    2fe6:	80 83       	st	Z, r24
								} while (pressed == KPD_NOT_PRESSED_KEY);
    2fe8:	e3 96       	adiw	r28, 0x33	; 51
    2fea:	ee ad       	ldd	r30, Y+62	; 0x3e
    2fec:	ff ad       	ldd	r31, Y+63	; 0x3f
    2fee:	e3 97       	sbiw	r28, 0x33	; 51
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff4:	91 f3       	breq	.-28     	; 0x2fda <cm.1346+0xb5c>
								if (pressed == '1') {
    2ff6:	e3 96       	adiw	r28, 0x33	; 51
    2ff8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ffa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ffc:	e3 97       	sbiw	r28, 0x33	; 51
    2ffe:	80 81       	ld	r24, Z
    3000:	81 33       	cpi	r24, 0x31	; 49
    3002:	21 f4       	brne	.+8      	; 0x300c <cm.1346+0xb8e>
									UART_voidSendData_TX(10);
    3004:	8a e0       	ldi	r24, 0x0A	; 10
    3006:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    300a:	e7 cf       	rjmp	.-50     	; 0x2fda <cm.1346+0xb5c>
								} else if (pressed == '2') {
    300c:	e3 96       	adiw	r28, 0x33	; 51
    300e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3010:	ff ad       	ldd	r31, Y+63	; 0x3f
    3012:	e3 97       	sbiw	r28, 0x33	; 51
    3014:	80 81       	ld	r24, Z
    3016:	82 33       	cpi	r24, 0x32	; 50
    3018:	21 f4       	brne	.+8      	; 0x3022 <cm.1346+0xba4>
									UART_voidSendData_TX(11);
    301a:	8b e0       	ldi	r24, 0x0B	; 11
    301c:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_voidSendData_TX>
    3020:	dc cf       	rjmp	.-72     	; 0x2fda <cm.1346+0xb5c>
								} else if (pressed == '3') {
    3022:	e3 96       	adiw	r28, 0x33	; 51
    3024:	ee ad       	ldd	r30, Y+62	; 0x3e
    3026:	ff ad       	ldd	r31, Y+63	; 0x3f
    3028:	e3 97       	sbiw	r28, 0x33	; 51
    302a:	80 81       	ld	r24, Z
    302c:	83 33       	cpi	r24, 0x33	; 51
    302e:	a9 f6       	brne	.-86     	; 0x2fda <cm.1346+0xb5c>
									// Return to the previous menu
									cm();
    3030:	e3 96       	adiw	r28, 0x33	; 51
    3032:	2e ac       	ldd	r2, Y+62	; 0x3e
    3034:	3f ac       	ldd	r3, Y+63	; 0x3f
    3036:	e3 97       	sbiw	r28, 0x33	; 51
    3038:	0e 94 3f 12 	call	0x247e	; 0x247e <cm.1346>
    303c:	ce cf       	rjmp	.-100    	; 0x2fda <cm.1346+0xb5c>
								}
							}
						}
					}
				} else {
					CLCD_voidString("Have a nice day!");
    303e:	89 e3       	ldi	r24, 0x39	; 57
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	0e 94 35 08 	call	0x106a	; 0x106a <CLCD_voidString>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	aa e7       	ldi	r26, 0x7A	; 122
    304c:	b4 e4       	ldi	r27, 0x44	; 68
    304e:	8b 87       	std	Y+11, r24	; 0x0b
    3050:	9c 87       	std	Y+12, r25	; 0x0c
    3052:	ad 87       	std	Y+13, r26	; 0x0d
    3054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	6b 85       	ldd	r22, Y+11	; 0x0b
    3058:	7c 85       	ldd	r23, Y+12	; 0x0c
    305a:	8d 85       	ldd	r24, Y+13	; 0x0d
    305c:	9e 85       	ldd	r25, Y+14	; 0x0e
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a ef       	ldi	r20, 0xFA	; 250
    3064:	54 e4       	ldi	r21, 0x44	; 68
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8f 83       	std	Y+7, r24	; 0x07
    3070:	98 87       	std	Y+8, r25	; 0x08
    3072:	a9 87       	std	Y+9, r26	; 0x09
    3074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3076:	6f 81       	ldd	r22, Y+7	; 0x07
    3078:	78 85       	ldd	r23, Y+8	; 0x08
    307a:	89 85       	ldd	r24, Y+9	; 0x09
    307c:	9a 85       	ldd	r25, Y+10	; 0x0a
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <cm.1346+0xc1a>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <cm.1346+0xc98>
	else if (__tmp > 65535)
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	89 85       	ldd	r24, Y+9	; 0x09
    309e:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <cm.1346+0xc84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <cm.1346+0xc7a>
    30da:	88 ec       	ldi	r24, 0xC8	; 200
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9c 83       	std	Y+4, r25	; 0x04
    30e0:	8b 83       	std	Y+3, r24	; 0x03
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <cm.1346+0xc68>
    30ea:	9c 83       	std	Y+4, r25	; 0x04
    30ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <cm.1346+0xc5c>
    3100:	d1 c9       	rjmp	.-3166   	; 0x24a4 <cm.1346+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	6f 81       	ldd	r22, Y+7	; 0x07
    3104:	78 85       	ldd	r23, Y+8	; 0x08
    3106:	89 85       	ldd	r24, Y+9	; 0x09
    3108:	9a 85       	ldd	r25, Y+10	; 0x0a
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	9a 83       	std	Y+2, r25	; 0x02
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <cm.1346+0xca4>
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
    312a:	bc c9       	rjmp	.-3208   	; 0x24a4 <cm.1346+0x26>

0000312c <servo_angle>:
	// Check if there are more password trials remaining
	if (h > 0) {
		cm(); // Enter the manual control section
	}
}
void servo_angle(u16 angle) {
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <servo_angle+0x6>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <servo_angle+0x8>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
	// Set the initial position of the servo motor
	TIMER1_voidSetChannelCompareMatch(1000); // Assuming 1000 is the neutral position
    313c:	88 ee       	ldi	r24, 0xE8	; 232
    313e:	93 e0       	ldi	r25, 0x03	; 3
    3140:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <TIMER1_voidSetChannelCompareMatch>

	// Calculate the new angle value within the servo's range
	u16 new_angle = 1000 + (u16)angle * 9.72222222222; // Adjust this calculation as needed
    3144:	8b 81       	ldd	r24, Y+3	; 0x03
    3146:	9c 81       	ldd	r25, Y+4	; 0x04
    3148:	cc 01       	movw	r24, r24
    314a:	a0 e0       	ldi	r26, 0x00	; 0
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	bc 01       	movw	r22, r24
    315c:	cd 01       	movw	r24, r26
    315e:	29 e3       	ldi	r18, 0x39	; 57
    3160:	3e e8       	ldi	r19, 0x8E	; 142
    3162:	4b e1       	ldi	r20, 0x1B	; 27
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a e7       	ldi	r20, 0x7A	; 122
    3178:	54 e4       	ldi	r21, 0x44	; 68
    317a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01

	// Set the servo motor to the   new angle
	TIMER1_voidSetChannelCompareMatch(new_angle);
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	9a 81       	ldd	r25, Y+2	; 0x02
    3196:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <TIMER1_voidSetChannelCompareMatch>
}
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <TIMER0_voidINIT>:
#define NULL ((void*)0)

void (*TIMER0_PvCallBackFun)(void) = NULL;

void TIMER0_voidINIT(void)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
	//choose CTC mode
	CLR_BIT(TCCR0,TCCR0_WGM00);
    31b0:	a3 e5       	ldi	r26, 0x53	; 83
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e3 e5       	ldi	r30, 0x53	; 83
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 7b       	andi	r24, 0xBF	; 191
    31bc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    31be:	a3 e5       	ldi	r26, 0x53	; 83
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e3 e5       	ldi	r30, 0x53	; 83
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	88 60       	ori	r24, 0x08	; 8
    31ca:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,TCCR0_WGM00);
    31cc:	a3 e5       	ldi	r26, 0x53	; 83
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e3 e5       	ldi	r30, 0x53	; 83
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 7b       	andi	r24, 0xBF	; 191
    31d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
    31da:	a3 e5       	ldi	r26, 0x53	; 83
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e3 e5       	ldi	r30, 0x53	; 83
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	87 7f       	andi	r24, 0xF7	; 247
    31e6:	8c 93       	st	X, r24

	//set compare value
	OCR0=250;
    31e8:	ec e5       	ldi	r30, 0x5C	; 92
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	8a ef       	ldi	r24, 0xFA	; 250
    31ee:	80 83       	st	Z, r24

	TCNT0=192;
    31f0:	e2 e5       	ldi	r30, 0x52	; 82
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 ec       	ldi	r24, 0xC0	; 192
    31f6:	80 83       	st	Z, r24
	//outPut compare enable
	SET_BIT(TIMSK,TIMSK_OCIE0);
    31f8:	a9 e5       	ldi	r26, 0x59	; 89
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e9 e5       	ldi	r30, 0x59	; 89
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	82 60       	ori	r24, 0x02	; 2
    3204:	8c 93       	st	X, r24

	SET_BIT(TIMSK,TIMSK_TOIE0);
    3206:	a9 e5       	ldi	r26, 0x59	; 89
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e9 e5       	ldi	r30, 0x59	; 89
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	82 60       	ori	r24, 0x02	; 2
    3212:	8c 93       	st	X, r24
	//prescaller : division by 8
	CLR_BIT(TCCR0,TCCR0_CS00 );
    3214:	a3 e5       	ldi	r26, 0x53	; 83
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e3 e5       	ldi	r30, 0x53	; 83
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	8e 7f       	andi	r24, 0xFE	; 254
    3220:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01 );
    3222:	a3 e5       	ldi	r26, 0x53	; 83
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e3 e5       	ldi	r30, 0x53	; 83
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	82 60       	ori	r24, 0x02	; 2
    322e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02 );
    3230:	a3 e5       	ldi	r26, 0x53	; 83
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e3 e5       	ldi	r30, 0x53	; 83
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8b 7f       	andi	r24, 0xFB	; 251
    323c:	8c 93       	st	X, r24
}
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <TIMER0_u8SetCallBack>:
u8 TIMER0_u8SetCallBack(void(*Copy_PvCallBackFun))
{
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	00 d0       	rcall	.+0      	; 0x324a <TIMER0_u8SetCallBack+0x6>
    324a:	0f 92       	push	r0
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	9b 83       	std	Y+3, r25	; 0x03
    3252:	8a 83       	std	Y+2, r24	; 0x02
   u8 u8ErrorStatus_Local = OK;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_PvCallBackFun != NULL)
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	39 f0       	breq	.+14     	; 0x326e <TIMER0_u8SetCallBack+0x2a>
   {
	   TIMER0_PvCallBackFun = Copy_PvCallBackFun;
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	90 93 63 02 	sts	0x0263, r25
    3268:	80 93 62 02 	sts	0x0262, r24
    326c:	01 c0       	rjmp	.+2      	; 0x3270 <TIMER0_u8SetCallBack+0x2c>
   }
   else
   {
	   u8ErrorStatus_Local= NOT_OK;
    326e:	19 82       	std	Y+1, r1	; 0x01
   }
   return u8ErrorStatus_Local;
    3270:	89 81       	ldd	r24, Y+1	; 0x01
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    327e:	1f 92       	push	r1
    3280:	0f 92       	push	r0
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	0f 92       	push	r0
    3286:	11 24       	eor	r1, r1
    3288:	2f 93       	push	r18
    328a:	3f 93       	push	r19
    328c:	4f 93       	push	r20
    328e:	5f 93       	push	r21
    3290:	6f 93       	push	r22
    3292:	7f 93       	push	r23
    3294:	8f 93       	push	r24
    3296:	9f 93       	push	r25
    3298:	af 93       	push	r26
    329a:	bf 93       	push	r27
    329c:	ef 93       	push	r30
    329e:	ff 93       	push	r31
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_PvCallBackFun != 0)
    32a8:	80 91 62 02 	lds	r24, 0x0262
    32ac:	90 91 63 02 	lds	r25, 0x0263
    32b0:	00 97       	sbiw	r24, 0x00	; 0
    32b2:	29 f0       	breq	.+10     	; 0x32be <__vector_10+0x40>
	{
		TIMER0_PvCallBackFun();
    32b4:	e0 91 62 02 	lds	r30, 0x0262
    32b8:	f0 91 63 02 	lds	r31, 0x0263
    32bc:	09 95       	icall
	}
}
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	ff 91       	pop	r31
    32c4:	ef 91       	pop	r30
    32c6:	bf 91       	pop	r27
    32c8:	af 91       	pop	r26
    32ca:	9f 91       	pop	r25
    32cc:	8f 91       	pop	r24
    32ce:	7f 91       	pop	r23
    32d0:	6f 91       	pop	r22
    32d2:	5f 91       	pop	r21
    32d4:	4f 91       	pop	r20
    32d6:	3f 91       	pop	r19
    32d8:	2f 91       	pop	r18
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	0f 90       	pop	r0
    32e0:	1f 90       	pop	r1
    32e2:	18 95       	reti

000032e4 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    32e4:	1f 92       	push	r1
    32e6:	0f 92       	push	r0
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	0f 92       	push	r0
    32ec:	11 24       	eor	r1, r1
    32ee:	2f 93       	push	r18
    32f0:	3f 93       	push	r19
    32f2:	4f 93       	push	r20
    32f4:	5f 93       	push	r21
    32f6:	6f 93       	push	r22
    32f8:	7f 93       	push	r23
    32fa:	8f 93       	push	r24
    32fc:	9f 93       	push	r25
    32fe:	af 93       	push	r26
    3300:	bf 93       	push	r27
    3302:	ef 93       	push	r30
    3304:	ff 93       	push	r31
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_PvCallBackFun != 0)
    330e:	80 91 62 02 	lds	r24, 0x0262
    3312:	90 91 63 02 	lds	r25, 0x0263
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	29 f0       	breq	.+10     	; 0x3324 <__vector_11+0x40>
	{
		TIMER0_PvCallBackFun();
    331a:	e0 91 62 02 	lds	r30, 0x0262
    331e:	f0 91 63 02 	lds	r31, 0x0263
    3322:	09 95       	icall
	}
}
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	ff 91       	pop	r31
    332a:	ef 91       	pop	r30
    332c:	bf 91       	pop	r27
    332e:	af 91       	pop	r26
    3330:	9f 91       	pop	r25
    3332:	8f 91       	pop	r24
    3334:	7f 91       	pop	r23
    3336:	6f 91       	pop	r22
    3338:	5f 91       	pop	r21
    333a:	4f 91       	pop	r20
    333c:	3f 91       	pop	r19
    333e:	2f 91       	pop	r18
    3340:	0f 90       	pop	r0
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	0f 90       	pop	r0
    3346:	1f 90       	pop	r1
    3348:	18 95       	reti

0000334a <TIMER1_voidINIT>:
void TIMER1_voidINIT(void)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3352:	af e4       	ldi	r26, 0x4F	; 79
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	ef e4       	ldi	r30, 0x4F	; 79
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	80 68       	ori	r24, 0x80	; 128
    335e:	8c 93       	st	X, r24
   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3360:	af e4       	ldi	r26, 0x4F	; 79
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	ef e4       	ldi	r30, 0x4F	; 79
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8f 7b       	andi	r24, 0xBF	; 191
    336c:	8c 93       	st	X, r24
   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    336e:	af e4       	ldi	r26, 0x4F	; 79
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	ef e4       	ldi	r30, 0x4F	; 79
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	8e 7f       	andi	r24, 0xFE	; 254
    337a:	8c 93       	st	X, r24
   SET_BIT(TCCR1A,TCCR1A_WGM11);
    337c:	af e4       	ldi	r26, 0x4F	; 79
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	ef e4       	ldi	r30, 0x4F	; 79
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	82 60       	ori	r24, 0x02	; 2
    3388:	8c 93       	st	X, r24
   SET_BIT(TCCR1B,TCCR1B_WGM12);
    338a:	ae e4       	ldi	r26, 0x4E	; 78
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	ee e4       	ldi	r30, 0x4E	; 78
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	80 81       	ld	r24, Z
    3394:	88 60       	ori	r24, 0x08	; 8
    3396:	8c 93       	st	X, r24
   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3398:	ae e4       	ldi	r26, 0x4E	; 78
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	ee e4       	ldi	r30, 0x4E	; 78
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	80 81       	ld	r24, Z
    33a2:	80 61       	ori	r24, 0x10	; 16
    33a4:	8c 93       	st	X, r24
   ICR1=19999;
    33a6:	e6 e4       	ldi	r30, 0x46	; 70
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	8f e1       	ldi	r24, 0x1F	; 31
    33ac:	9e e4       	ldi	r25, 0x4E	; 78
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
   TCCR1B&=PRESCALLER_MASK;
    33b2:	ae e4       	ldi	r26, 0x4E	; 78
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	ee e4       	ldi	r30, 0x4E	; 78
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	88 7f       	andi	r24, 0xF8	; 248
    33be:	8c 93       	st	X, r24
   TCCR1B|=DIVIDE_BY_8;
    33c0:	ae e4       	ldi	r26, 0x4E	; 78
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	ee e4       	ldi	r30, 0x4E	; 78
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	82 60       	ori	r24, 0x02	; 2
    33cc:	8c 93       	st	X, r24
}
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <TIMER1_voidSetChannelCompareMatch>:
void TIMER1_voidSetChannelCompareMatch(u16 Copy_u16CompareMatch)
{
    33d4:	df 93       	push	r29
    33d6:	cf 93       	push	r28
    33d8:	00 d0       	rcall	.+0      	; 0x33da <TIMER1_voidSetChannelCompareMatch+0x6>
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	9a 83       	std	Y+2, r25	; 0x02
    33e0:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =  Copy_u16CompareMatch;
    33e2:	ea e4       	ldi	r30, 0x4A	; 74
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
}
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <__prologue_saves__>:
    33f8:	2f 92       	push	r2
    33fa:	3f 92       	push	r3
    33fc:	4f 92       	push	r4
    33fe:	5f 92       	push	r5
    3400:	6f 92       	push	r6
    3402:	7f 92       	push	r7
    3404:	8f 92       	push	r8
    3406:	9f 92       	push	r9
    3408:	af 92       	push	r10
    340a:	bf 92       	push	r11
    340c:	cf 92       	push	r12
    340e:	df 92       	push	r13
    3410:	ef 92       	push	r14
    3412:	ff 92       	push	r15
    3414:	0f 93       	push	r16
    3416:	1f 93       	push	r17
    3418:	cf 93       	push	r28
    341a:	df 93       	push	r29
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	ca 1b       	sub	r28, r26
    3422:	db 0b       	sbc	r29, r27
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	09 94       	ijmp

00003430 <__epilogue_restores__>:
    3430:	2a 88       	ldd	r2, Y+18	; 0x12
    3432:	39 88       	ldd	r3, Y+17	; 0x11
    3434:	48 88       	ldd	r4, Y+16	; 0x10
    3436:	5f 84       	ldd	r5, Y+15	; 0x0f
    3438:	6e 84       	ldd	r6, Y+14	; 0x0e
    343a:	7d 84       	ldd	r7, Y+13	; 0x0d
    343c:	8c 84       	ldd	r8, Y+12	; 0x0c
    343e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3440:	aa 84       	ldd	r10, Y+10	; 0x0a
    3442:	b9 84       	ldd	r11, Y+9	; 0x09
    3444:	c8 84       	ldd	r12, Y+8	; 0x08
    3446:	df 80       	ldd	r13, Y+7	; 0x07
    3448:	ee 80       	ldd	r14, Y+6	; 0x06
    344a:	fd 80       	ldd	r15, Y+5	; 0x05
    344c:	0c 81       	ldd	r16, Y+4	; 0x04
    344e:	1b 81       	ldd	r17, Y+3	; 0x03
    3450:	aa 81       	ldd	r26, Y+2	; 0x02
    3452:	b9 81       	ldd	r27, Y+1	; 0x01
    3454:	ce 0f       	add	r28, r30
    3456:	d1 1d       	adc	r29, r1
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	ed 01       	movw	r28, r26
    3464:	08 95       	ret

00003466 <memset>:
    3466:	dc 01       	movw	r26, r24
    3468:	01 c0       	rjmp	.+2      	; 0x346c <memset+0x6>
    346a:	6d 93       	st	X+, r22
    346c:	41 50       	subi	r20, 0x01	; 1
    346e:	50 40       	sbci	r21, 0x00	; 0
    3470:	e0 f7       	brcc	.-8      	; 0x346a <memset+0x4>
    3472:	08 95       	ret

00003474 <_exit>:
    3474:	f8 94       	cli

00003476 <__stop_program>:
    3476:	ff cf       	rjmp	.-2      	; 0x3476 <__stop_program>
