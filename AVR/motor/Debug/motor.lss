
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001e8a  00001f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800088  00800088  00001f46  2**0
                  ALLOC
  3 .stab         00001b0c  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfc  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <main>
      8a:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include"DIO.h"
#include <avr/io.h>
#include <util/delay.h>
#include "CLCD.h"

void CLCD_voidSendCommand(u8 Copy_u8Command){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN, DIO_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN, DIO_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_SetPortValue>
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN, DIO_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN, DIO_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data){
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN, DIO_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
		DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN, DIO_LOW);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
		DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 0f 0a 	call	0x141e	; 0x141e <DIO_SetPortValue>
		DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN, DIO_HIGH);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN, DIO_LOW);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInitl>:

void CLCD_voidInitl(void){
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInitl+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInitl+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInitl+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInitl+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInitl+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInitl+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInitl+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInitl+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSrting>:

void CLCD_voidSrting(const char*Copy_pcSrting){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_voidSrting+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 x=0;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_voidSrting+0x30>
		while(Copy_pcSrting[x]!=0){
			CLCD_voidSendData(Copy_pcSrting[x]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			x++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(1);
}

void CLCD_voidSrting(const char*Copy_pcSrting){
	u8 x=0;
		while(Copy_pcSrting[x]!=0){
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_voidSrting+0x14>
			CLCD_voidSendData(Copy_pcSrting[x]);
			x++;
}}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidGoTo_X_Y>:

void CLCD_voidGoTo_X_Y(u8 Copy_u8Xpos,u8 Copy_u8Ypos){
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_voidGoTo_X_Y+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8Xpos==0){
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 23       	and	r24, r24
     f40:	19 f4       	brne	.+6      	; 0xf48 <CLCD_voidGoTo_X_Y+0x1c>
		Local_u8Address=Copy_u8Ypos;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <CLCD_voidGoTo_X_Y+0x28>
	}
	else if(Copy_u8Xpos==1){
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoTo_X_Y+0x28>
		Local_u8Address= Copy_u8Ypos + 0x40;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+128);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 58       	subi	r24, 0x80	; 128
     f58:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidLCD_Clear>:

void CLCD_voidLCD_Clear(void){
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(1);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <DIO_SetPinDirection>:
#include"BIT_MATH.h"
#include"DIO.h"
#include <avr/io.h>
#include <util/delay.h>

void DIO_SetPinDirection(u8 u8PortIDcopy,u8 u8PinIDcopy,u8 u8PinDircopy){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	27 97       	sbiw	r28, 0x07	; 7
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
     f94:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIDcopy<=DIO_PORTD)&& (u8PinIDcopy<=DIO_PIN7)){
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	84 30       	cpi	r24, 0x04	; 4
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <DIO_SetPinDirection+0x22>
     f9c:	ee c0       	rjmp	.+476    	; 0x117a <DIO_SetPinDirection+0x1fe>
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	88 30       	cpi	r24, 0x08	; 8
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <DIO_SetPinDirection+0x2a>
     fa4:	ea c0       	rjmp	.+468    	; 0x117a <DIO_SetPinDirection+0x1fe>
		if(u8PinDircopy==DIO_OUTPUT){
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	09 f0       	breq	.+2      	; 0xfae <DIO_SetPinDirection+0x32>
     fac:	6f c0       	rjmp	.+222    	; 0x108c <DIO_SetPinDirection+0x110>
					switch(u8PortIDcopy)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3f 83       	std	Y+7, r19	; 0x07
     fb6:	2e 83       	std	Y+6, r18	; 0x06
     fb8:	8e 81       	ldd	r24, Y+6	; 0x06
     fba:	9f 81       	ldd	r25, Y+7	; 0x07
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	49 f1       	breq	.+82     	; 0x1014 <DIO_SetPinDirection+0x98>
     fc2:	2e 81       	ldd	r18, Y+6	; 0x06
     fc4:	3f 81       	ldd	r19, Y+7	; 0x07
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <DIO_SetPinDirection+0x5a>
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	9f 81       	ldd	r25, Y+7	; 0x07
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	61 f0       	breq	.+24     	; 0xfec <DIO_SetPinDirection+0x70>
     fd4:	d2 c0       	rjmp	.+420    	; 0x117a <DIO_SetPinDirection+0x1fe>
     fd6:	2e 81       	ldd	r18, Y+6	; 0x06
     fd8:	3f 81       	ldd	r19, Y+7	; 0x07
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	71 f1       	breq	.+92     	; 0x103c <DIO_SetPinDirection+0xc0>
     fe0:	8e 81       	ldd	r24, Y+6	; 0x06
     fe2:	9f 81       	ldd	r25, Y+7	; 0x07
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	e9 f1       	breq	.+122    	; 0x1064 <DIO_SetPinDirection+0xe8>
     fea:	c7 c0       	rjmp	.+398    	; 0x117a <DIO_SetPinDirection+0x1fe>
					{
					case DIO_PORTA:SET_BIT(DDRA,u8PinIDcopy);break;
     fec:	aa e3       	ldi	r26, 0x3A	; 58
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ea e3       	ldi	r30, 0x3A	; 58
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_SetPinDirection+0x8e>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_SetPinDirection+0x8a>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	b3 c0       	rjmp	.+358    	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB:SET_BIT(DDRB,u8PinIDcopy);break;
    1014:	a7 e3       	ldi	r26, 0x37	; 55
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e7 e3       	ldi	r30, 0x37	; 55
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_SetPinDirection+0xb6>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_SetPinDirection+0xb2>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
    103a:	9f c0       	rjmp	.+318    	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC:SET_BIT(DDRC,u8PinIDcopy);break;
    103c:	a4 e3       	ldi	r26, 0x34	; 52
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e3       	ldi	r30, 0x34	; 52
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_SetPinDirection+0xde>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_SetPinDirection+0xda>
    105e:	84 2b       	or	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	8b c0       	rjmp	.+278    	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD:SET_BIT(DDRD,u8PinIDcopy);break;
    1064:	a1 e3       	ldi	r26, 0x31	; 49
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e1 e3       	ldi	r30, 0x31	; 49
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_SetPinDirection+0x106>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_SetPinDirection+0x102>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	77 c0       	rjmp	.+238    	; 0x117a <DIO_SetPinDirection+0x1fe>
					}
				}
				else if (u8PinDircopy==DIO_INPUT){
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 23       	and	r24, r24
    1090:	09 f0       	breq	.+2      	; 0x1094 <DIO_SetPinDirection+0x118>
    1092:	73 c0       	rjmp	.+230    	; 0x117a <DIO_SetPinDirection+0x1fe>
					switch(u8PortIDcopy)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 83       	std	Y+5, r19	; 0x05
    109c:	2c 83       	std	Y+4, r18	; 0x04
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	59 f1       	breq	.+86     	; 0x10fe <DIO_SetPinDirection+0x182>
    10a8:	2c 81       	ldd	r18, Y+4	; 0x04
    10aa:	3d 81       	ldd	r19, Y+5	; 0x05
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <DIO_SetPinDirection+0x140>
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	69 f0       	breq	.+26     	; 0x10d4 <DIO_SetPinDirection+0x158>
    10ba:	5f c0       	rjmp	.+190    	; 0x117a <DIO_SetPinDirection+0x1fe>
    10bc:	2c 81       	ldd	r18, Y+4	; 0x04
    10be:	3d 81       	ldd	r19, Y+5	; 0x05
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	89 f1       	breq	.+98     	; 0x1128 <DIO_SetPinDirection+0x1ac>
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <DIO_SetPinDirection+0x156>
    10d0:	40 c0       	rjmp	.+128    	; 0x1152 <DIO_SetPinDirection+0x1d6>
    10d2:	53 c0       	rjmp	.+166    	; 0x117a <DIO_SetPinDirection+0x1fe>
					{
					case DIO_PORTA:CLR_BIT(DDRA,u8PinIDcopy);break;
    10d4:	aa e3       	ldi	r26, 0x3A	; 58
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ea e3       	ldi	r30, 0x3A	; 58
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_SetPinDirection+0x176>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_SetPinDirection+0x172>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	3e c0       	rjmp	.+124    	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB:CLR_BIT(DDRB,u8PinIDcopy);break;
    10fe:	a7 e3       	ldi	r26, 0x37	; 55
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e3       	ldi	r30, 0x37	; 55
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_SetPinDirection+0x1a0>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_SetPinDirection+0x19c>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	29 c0       	rjmp	.+82     	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC:CLR_BIT(DDRC,u8PinIDcopy);break;
    1128:	a4 e3       	ldi	r26, 0x34	; 52
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e4 e3       	ldi	r30, 0x34	; 52
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_SetPinDirection+0x1ca>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_SetPinDirection+0x1c6>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	14 c0       	rjmp	.+40     	; 0x117a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD:CLR_BIT(DDRD,u8PinIDcopy);break;
    1152:	a1 e3       	ldi	r26, 0x31	; 49
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e1 e3       	ldi	r30, 0x31	; 49
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_SetPinDirection+0x1f4>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_SetPinDirection+0x1f0>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
				}
			}
				else{}}}
    117a:	27 96       	adiw	r28, 0x07	; 7
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 u8PortIDcopy,u8 u8PortDircopy){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <DIO_SetPortDirection+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_SetPortDirection+0x8>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	6a 83       	std	Y+2, r22	; 0x02

			switch(u8PortIDcopy)
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	3c 83       	std	Y+4, r19	; 0x04
    11a4:	2b 83       	std	Y+3, r18	; 0x03
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	91 05       	cpc	r25, r1
    11ae:	d1 f0       	breq	.+52     	; 0x11e4 <DIO_SetPortDirection+0x58>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	3c 81       	ldd	r19, Y+4	; 0x04
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <DIO_SetPortDirection+0x38>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	61 f0       	breq	.+24     	; 0x11da <DIO_SetPortDirection+0x4e>
    11c2:	1e c0       	rjmp	.+60     	; 0x1200 <DIO_SetPortDirection+0x74>
    11c4:	2b 81       	ldd	r18, Y+3	; 0x03
    11c6:	3c 81       	ldd	r19, Y+4	; 0x04
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	81 f0       	breq	.+32     	; 0x11ee <DIO_SetPortDirection+0x62>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	91 05       	cpc	r25, r1
    11d6:	81 f0       	breq	.+32     	; 0x11f8 <DIO_SetPortDirection+0x6c>
    11d8:	13 c0       	rjmp	.+38     	; 0x1200 <DIO_SetPortDirection+0x74>
						{
					case DIO_PORTA:DDRA=u8PortDircopy;break;
    11da:	ea e3       	ldi	r30, 0x3A	; 58
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	80 83       	st	Z, r24
    11e2:	0e c0       	rjmp	.+28     	; 0x1200 <DIO_SetPortDirection+0x74>
					case DIO_PORTB:DDRB=u8PortDircopy;break;
    11e4:	e7 e3       	ldi	r30, 0x37	; 55
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	80 83       	st	Z, r24
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <DIO_SetPortDirection+0x74>
					case DIO_PORTC:DDRC=u8PortDircopy;break;
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	80 83       	st	Z, r24
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <DIO_SetPortDirection+0x74>
					case DIO_PORTD:DDRD=u8PortDircopy;break;
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
						}
					}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <DIO_SetPinValue>:

void DIO_SetPinValue(u8 u8PortIDcopy,u8 u8PinIDcopy,u8 u8PinValuecopy){
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	27 97       	sbiw	r28, 0x07	; 7
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
    1226:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIDcopy<=DIO_PORTD)&& (u8PinIDcopy<=DIO_PIN7)){
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	08 f0       	brcs	.+2      	; 0x1230 <DIO_SetPinValue+0x22>
    122e:	ee c0       	rjmp	.+476    	; 0x140c <DIO_SetPinValue+0x1fe>
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <DIO_SetPinValue+0x2a>
    1236:	ea c0       	rjmp	.+468    	; 0x140c <DIO_SetPinValue+0x1fe>
			if(u8PinValuecopy==DIO_HIGH){
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	09 f0       	breq	.+2      	; 0x1240 <DIO_SetPinValue+0x32>
    123e:	6f c0       	rjmp	.+222    	; 0x131e <DIO_SetPinValue+0x110>
				switch(u8PortIDcopy)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3f 83       	std	Y+7, r19	; 0x07
    1248:	2e 83       	std	Y+6, r18	; 0x06
    124a:	8e 81       	ldd	r24, Y+6	; 0x06
    124c:	9f 81       	ldd	r25, Y+7	; 0x07
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	49 f1       	breq	.+82     	; 0x12a6 <DIO_SetPinValue+0x98>
    1254:	2e 81       	ldd	r18, Y+6	; 0x06
    1256:	3f 81       	ldd	r19, Y+7	; 0x07
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <DIO_SetPinValue+0x5a>
    125e:	8e 81       	ldd	r24, Y+6	; 0x06
    1260:	9f 81       	ldd	r25, Y+7	; 0x07
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <DIO_SetPinValue+0x70>
    1266:	d2 c0       	rjmp	.+420    	; 0x140c <DIO_SetPinValue+0x1fe>
    1268:	2e 81       	ldd	r18, Y+6	; 0x06
    126a:	3f 81       	ldd	r19, Y+7	; 0x07
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	71 f1       	breq	.+92     	; 0x12ce <DIO_SetPinValue+0xc0>
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	e9 f1       	breq	.+122    	; 0x12f6 <DIO_SetPinValue+0xe8>
    127c:	c7 c0       	rjmp	.+398    	; 0x140c <DIO_SetPinValue+0x1fe>
									{
						case DIO_PORTA:SET_BIT(PORTA,u8PinIDcopy);break;
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_SetPinValue+0x8e>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_SetPinValue+0x8a>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	b3 c0       	rjmp	.+358    	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTB:SET_BIT(PORTB,u8PinIDcopy);break;
    12a6:	a8 e3       	ldi	r26, 0x38	; 56
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_SetPinValue+0xb6>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_SetPinValue+0xb2>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	9f c0       	rjmp	.+318    	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTC:SET_BIT(PORTC,u8PinIDcopy);break;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_SetPinValue+0xde>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_SetPinValue+0xda>
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	8b c0       	rjmp	.+278    	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTD:SET_BIT(PORTD,u8PinIDcopy);break;
    12f6:	a2 e3       	ldi	r26, 0x32	; 50
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e2 e3       	ldi	r30, 0x32	; 50
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_SetPinValue+0x106>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_SetPinValue+0x102>
    1318:	84 2b       	or	r24, r20
    131a:	8c 93       	st	X, r24
    131c:	77 c0       	rjmp	.+238    	; 0x140c <DIO_SetPinValue+0x1fe>
									}
							}
	else if (u8PinValuecopy==DIO_LOW){
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <DIO_SetPinValue+0x118>
    1324:	73 c0       	rjmp	.+230    	; 0x140c <DIO_SetPinValue+0x1fe>
						switch(u8PortIDcopy)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3d 83       	std	Y+5, r19	; 0x05
    132e:	2c 83       	std	Y+4, r18	; 0x04
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	59 f1       	breq	.+86     	; 0x1390 <DIO_SetPinValue+0x182>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <DIO_SetPinValue+0x140>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	9d 81       	ldd	r25, Y+5	; 0x05
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f0       	breq	.+26     	; 0x1366 <DIO_SetPinValue+0x158>
    134c:	5f c0       	rjmp	.+190    	; 0x140c <DIO_SetPinValue+0x1fe>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	89 f1       	breq	.+98     	; 0x13ba <DIO_SetPinValue+0x1ac>
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	09 f4       	brne	.+2      	; 0x1364 <DIO_SetPinValue+0x156>
    1362:	40 c0       	rjmp	.+128    	; 0x13e4 <DIO_SetPinValue+0x1d6>
    1364:	53 c0       	rjmp	.+166    	; 0x140c <DIO_SetPinValue+0x1fe>
						{
						case DIO_PORTA:CLR_BIT(PORTA,u8PinIDcopy);break;
    1366:	ab e3       	ldi	r26, 0x3B	; 59
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	eb e3       	ldi	r30, 0x3B	; 59
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_SetPinValue+0x176>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_SetPinValue+0x172>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	3e c0       	rjmp	.+124    	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTB:CLR_BIT(PORTB,u8PinIDcopy);break;
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_SetPinValue+0x1a0>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_SetPinValue+0x19c>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	29 c0       	rjmp	.+82     	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTC:CLR_BIT(PORTC,u8PinIDcopy);break;
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_SetPinValue+0x1ca>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_SetPinValue+0x1c6>
    13dc:	80 95       	com	r24
    13de:	84 23       	and	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	14 c0       	rjmp	.+40     	; 0x140c <DIO_SetPinValue+0x1fe>
						case DIO_PORTD:CLR_BIT(PORTD,u8PinIDcopy);break;
    13e4:	a2 e3       	ldi	r26, 0x32	; 50
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e2 e3       	ldi	r30, 0x32	; 50
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_SetPinValue+0x1f4>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_SetPinValue+0x1f0>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
					}
				}}
					else{}
	}
    140c:	27 96       	adiw	r28, 0x07	; 7
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <DIO_SetPortValue>:
void DIO_SetPortValue(u8 u8PortIDcopy,u8 u8PortValuecopy){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_SetPortValue+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_SetPortValue+0x8>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	6a 83       	std	Y+2, r22	; 0x02

			switch(u8PortIDcopy)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3c 83       	std	Y+4, r19	; 0x04
    1436:	2b 83       	std	Y+3, r18	; 0x03
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	d1 f0       	breq	.+52     	; 0x1476 <DIO_SetPortValue+0x58>
    1442:	2b 81       	ldd	r18, Y+3	; 0x03
    1444:	3c 81       	ldd	r19, Y+4	; 0x04
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <DIO_SetPortValue+0x38>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <DIO_SetPortValue+0x4e>
    1454:	1e c0       	rjmp	.+60     	; 0x1492 <DIO_SetPortValue+0x74>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	81 f0       	breq	.+32     	; 0x1480 <DIO_SetPortValue+0x62>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <DIO_SetPortValue+0x6c>
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <DIO_SetPortValue+0x74>
							{
							case DIO_PORTA:PORTA=u8PortValuecopy;break;
    146c:	eb e3       	ldi	r30, 0x3B	; 59
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 83       	st	Z, r24
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <DIO_SetPortValue+0x74>
							case DIO_PORTB:PORTB=u8PortValuecopy;break;
    1476:	e8 e3       	ldi	r30, 0x38	; 56
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	80 83       	st	Z, r24
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <DIO_SetPortValue+0x74>
							case DIO_PORTC:PORTC=u8PortValuecopy;break;
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <DIO_SetPortValue+0x74>
							case DIO_PORTD:PORTD=u8PortValuecopy;break;
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
							}
						}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIDcopy,u8 u8PinIDcopy){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <DIO_GetPinValue+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <DIO_GetPinValue+0x8>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ResultLocal;
	if((u8PortIDcopy<=DIO_PORTD)&& (u8PinIDcopy<=DIO_PIN7)){
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <DIO_GetPinValue+0x1a>
    14b8:	6b c0       	rjmp	.+214    	; 0x1590 <DIO_GetPinValue+0xf0>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <DIO_GetPinValue+0x22>
    14c0:	67 c0       	rjmp	.+206    	; 0x1590 <DIO_GetPinValue+0xf0>
					switch(u8PortIDcopy)
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	4c 81       	ldd	r20, Y+4	; 0x04
    14ce:	5d 81       	ldd	r21, Y+5	; 0x05
    14d0:	41 30       	cpi	r20, 0x01	; 1
    14d2:	51 05       	cpc	r21, r1
    14d4:	41 f1       	breq	.+80     	; 0x1526 <DIO_GetPinValue+0x86>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	34 f4       	brge	.+12     	; 0x14ec <DIO_GetPinValue+0x4c>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	21 15       	cp	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	61 f0       	breq	.+24     	; 0x1502 <DIO_GetPinValue+0x62>
    14ea:	52 c0       	rjmp	.+164    	; 0x1590 <DIO_GetPinValue+0xf0>
    14ec:	4c 81       	ldd	r20, Y+4	; 0x04
    14ee:	5d 81       	ldd	r21, Y+5	; 0x05
    14f0:	42 30       	cpi	r20, 0x02	; 2
    14f2:	51 05       	cpc	r21, r1
    14f4:	51 f1       	breq	.+84     	; 0x154a <DIO_GetPinValue+0xaa>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	b9 f1       	breq	.+110    	; 0x156e <DIO_GetPinValue+0xce>
    1500:	47 c0       	rjmp	.+142    	; 0x1590 <DIO_GetPinValue+0xf0>
					{
					case DIO_PORTA:u8ResultLocal=GET_BIT(PINA,u8PinIDcopy);break;
    1502:	e9 e3       	ldi	r30, 0x39	; 57
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_GetPinValue+0x7a>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_GetPinValue+0x76>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	35 c0       	rjmp	.+106    	; 0x1590 <DIO_GetPinValue+0xf0>
					case DIO_PORTB:u8ResultLocal=GET_BIT(PINB,u8PinIDcopy);break;
    1526:	e6 e3       	ldi	r30, 0x36	; 54
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_GetPinValue+0x9e>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_GetPinValue+0x9a>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	23 c0       	rjmp	.+70     	; 0x1590 <DIO_GetPinValue+0xf0>
					case DIO_PORTC:u8ResultLocal=GET_BIT(PINC,u8PinIDcopy);break;
    154a:	e3 e3       	ldi	r30, 0x33	; 51
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_GetPinValue+0xc2>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_GetPinValue+0xbe>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	11 c0       	rjmp	.+34     	; 0x1590 <DIO_GetPinValue+0xf0>
					case DIO_PORTD:u8ResultLocal=GET_BIT(PIND,u8PinIDcopy);break;
    156e:	e0 e3       	ldi	r30, 0x30	; 48
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_GetPinValue+0xe6>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_GetPinValue+0xe2>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
					}
	}
					else{}
	return u8ResultLocal;
    1590:	89 81       	ldd	r24, Y+1	; 0x01
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EXTI_void_INT0>:
#include "EXTI.h"
#include <util/delay.h>
#include <avr/io.h>
#include "DIO.h"

void EXTI_void_INT0(void){
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	// set falling edge
	// set sense control for INT0
	SET_BIT(MCUCR,MCUCR_ISC01);
    15aa:	a5 e5       	ldi	r26, 0x55	; 85
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e5       	ldi	r30, 0x55	; 85
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    15b8:	a5 e5       	ldi	r26, 0x55	; 85
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e5       	ldi	r30, 0x55	; 85
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8e 7f       	andi	r24, 0xFE	; 254
    15c4:	8c 93       	st	X, r24

	// PREPHIRAL INTERRUPT ENABLE FOR INT0
	SET_BIT(GICR,GICR_INT0);
    15c6:	ab e5       	ldi	r26, 0x5B	; 91
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	eb e5       	ldi	r30, 0x5B	; 91
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	8c 93       	st	X, r24
}
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <EXTI_void_INT1>:
void EXTI_void_INT1(void){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC10);
    15e2:	a5 e5       	ldi	r26, 0x55	; 85
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e5 e5       	ldi	r30, 0x55	; 85
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	84 60       	ori	r24, 0x04	; 4
    15ee:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    15f0:	a5 e5       	ldi	r26, 0x55	; 85
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e5       	ldi	r30, 0x55	; 85
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8e 7f       	andi	r24, 0xFE	; 254
    15fc:	8c 93       	st	X, r24


}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <EXTI_void_INT2>:
void EXTI_void_INT2(void){
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	// FALLING EDGE



}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GIE_ENABLED>:
#include "EXTI.h"
#include <util/delay.h>
#include <avr/io.h>
#include "DIO.h"

void GIE_ENABLED(void){
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    161a:	af e5       	ldi	r26, 0x5F	; 95
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ef e5       	ldi	r30, 0x5F	; 95
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	80 68       	ori	r24, 0x80	; 128
    1626:	8c 93       	st	X, r24

}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <GIE_DISABLED>:
void GIE_DISABLED(void){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1636:	af e5       	ldi	r26, 0x5F	; 95
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ef e5       	ldi	r30, 0x5F	; 95
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8f 77       	andi	r24, 0x7F	; 127
    1642:	8c 93       	st	X, r24

}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <KPD_Init>:
#include"CLCD.h"
#include <avr/io.h>
#include <util/delay.h>
#include"Keypad.h"

void KPD_Init(void){
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	 DIO_SetPinDirection(KPD_R0_PORT,KPD_R0_PIN,DIO_INPUT);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R1_PORT,KPD_R1_PIN,DIO_INPUT);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R2_PORT,KPD_R2_PIN,DIO_INPUT);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
	 DIO_SetPinDirection(KPD_R3_PORT,KPD_R3_PIN,DIO_INPUT);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	63 e0       	ldi	r22, 0x03	; 3
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>

	 DIO_SetPinValue(KPD_R0_PORT,KPD_R0_PIN,DIO_HIGH);
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R1_PORT,KPD_R1_PIN,DIO_HIGH);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R2_PORT,KPD_R2_PIN,DIO_HIGH);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	 DIO_SetPinValue(KPD_R3_PORT,KPD_R3_PIN,DIO_HIGH);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>

     DIO_SetPinDirection(KPD_C0_PORT,KPD_C0_PIN,DIO_OUTPUT);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	64 e0       	ldi	r22, 0x04	; 4
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C1_PORT,KPD_C1_PIN,DIO_OUTPUT);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	65 e0       	ldi	r22, 0x05	; 5
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C2_PORT,KPD_C2_PIN,DIO_OUTPUT);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	66 e0       	ldi	r22, 0x06	; 6
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
 	 DIO_SetPinDirection(KPD_C3_PORT,KPD_C3_PIN,DIO_OUTPUT);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	67 e0       	ldi	r22, 0x07	; 7
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>

 	 DIO_SetPinValue(KPD_C0_PORT,KPD_C0_PIN,DIO_HIGH);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	64 e0       	ldi	r22, 0x04	; 4
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C1_PORT,KPD_C1_PIN,DIO_HIGH);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	65 e0       	ldi	r22, 0x05	; 5
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C2_PORT,KPD_C2_PIN,DIO_HIGH);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
 	 DIO_SetPinValue(KPD_C3_PORT,KPD_C3_PIN,DIO_HIGH);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	67 e0       	ldi	r22, 0x07	; 7
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <KPD_GETPressedKey>:

u8  KPD_GETPressedKey(void){
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	e7 97       	sbiw	r28, 0x37	; 55
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
	u8 u8RowLocal=0;
    170c:	19 8a       	std	Y+17, r1	; 0x11
	u8 u8ColLocal=0;
    170e:	18 8a       	std	Y+16, r1	; 0x10
	u8 KPD_u8Value[ROW_NUMBER][COL_NUMBER]=KPD_VALUES;
    1710:	ce 01       	movw	r24, r28
    1712:	42 96       	adiw	r24, 0x12	; 18
    1714:	9c ab       	std	Y+52, r25	; 0x34
    1716:	8b ab       	std	Y+51, r24	; 0x33
    1718:	e8 e7       	ldi	r30, 0x78	; 120
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	fe ab       	std	Y+54, r31	; 0x36
    171e:	ed ab       	std	Y+53, r30	; 0x35
    1720:	f0 e1       	ldi	r31, 0x10	; 16
    1722:	ff ab       	std	Y+55, r31	; 0x37
    1724:	ed a9       	ldd	r30, Y+53	; 0x35
    1726:	fe a9       	ldd	r31, Y+54	; 0x36
    1728:	00 80       	ld	r0, Z
    172a:	8d a9       	ldd	r24, Y+53	; 0x35
    172c:	9e a9       	ldd	r25, Y+54	; 0x36
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	9e ab       	std	Y+54, r25	; 0x36
    1732:	8d ab       	std	Y+53, r24	; 0x35
    1734:	eb a9       	ldd	r30, Y+51	; 0x33
    1736:	fc a9       	ldd	r31, Y+52	; 0x34
    1738:	00 82       	st	Z, r0
    173a:	8b a9       	ldd	r24, Y+51	; 0x33
    173c:	9c a9       	ldd	r25, Y+52	; 0x34
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	9c ab       	std	Y+52, r25	; 0x34
    1742:	8b ab       	std	Y+51, r24	; 0x33
    1744:	9f a9       	ldd	r25, Y+55	; 0x37
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	9f ab       	std	Y+55, r25	; 0x37
    174a:	ef a9       	ldd	r30, Y+55	; 0x37
    174c:	ee 23       	and	r30, r30
    174e:	51 f7       	brne	.-44     	; 0x1724 <KPD_GETPressedKey+0x2c>
	u8 KPD_U8ROWPortArr[ROW_NUMBER]={KPD_R0_PORT,KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT};
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	8a a3       	std	Y+34, r24	; 0x22
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	8b a3       	std	Y+35, r24	; 0x23
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	8c a3       	std	Y+36, r24	; 0x24
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	8d a3       	std	Y+37, r24	; 0x25
	u8 KPD_U8ROWPINArr[ROW_NUMBER]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};
    1760:	1e a2       	std	Y+38, r1	; 0x26
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	8f a3       	std	Y+39, r24	; 0x27
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	88 a7       	std	Y+40, r24	; 0x28
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	89 a7       	std	Y+41, r24	; 0x29

	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	8a a7       	std	Y+42, r24	; 0x2a
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	8b a7       	std	Y+43, r24	; 0x2b
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	8c a7       	std	Y+44, r24	; 0x2c
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	8d a7       	std	Y+45, r24	; 0x2d
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
    177e:	84 e0       	ldi	r24, 0x04	; 4
    1780:	8e a7       	std	Y+46, r24	; 0x2e
    1782:	85 e0       	ldi	r24, 0x05	; 5
    1784:	8f a7       	std	Y+47, r24	; 0x2f
    1786:	86 e0       	ldi	r24, 0x06	; 6
    1788:	88 ab       	std	Y+48, r24	; 0x30
    178a:	87 e0       	ldi	r24, 0x07	; 7
    178c:	89 ab       	std	Y+49, r24	; 0x31

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
    178e:	18 8a       	std	Y+16, r1	; 0x10
    1790:	11 c1       	rjmp	.+546    	; 0x19b4 <KPD_GETPressedKey+0x2bc>
		DIO_SetPinValue(KPD_U8ROWPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_LOW);
    1792:	88 89       	ldd	r24, Y+16	; 0x10
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	ce 01       	movw	r24, r28
    179a:	82 96       	adiw	r24, 0x22	; 34
    179c:	fc 01       	movw	r30, r24
    179e:	e2 0f       	add	r30, r18
    17a0:	f3 1f       	adc	r31, r19
    17a2:	40 81       	ld	r20, Z
    17a4:	88 89       	ldd	r24, Y+16	; 0x10
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	ce 01       	movw	r24, r28
    17ac:	8e 96       	adiw	r24, 0x2e	; 46
    17ae:	fc 01       	movw	r30, r24
    17b0:	e2 0f       	add	r30, r18
    17b2:	f3 1f       	adc	r31, r19
    17b4:	90 81       	ld	r25, Z
    17b6:	84 2f       	mov	r24, r20
    17b8:	69 2f       	mov	r22, r25
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
		for(u8RowLocal=0;u8RowLocal<ROW_NUMBER; u8RowLocal++){
    17c0:	19 8a       	std	Y+17, r1	; 0x11
    17c2:	da c0       	rjmp	.+436    	; 0x1978 <KPD_GETPressedKey+0x280>
			u8 u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    17c4:	89 89       	ldd	r24, Y+17	; 0x11
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	ce 01       	movw	r24, r28
    17cc:	82 96       	adiw	r24, 0x22	; 34
    17ce:	fc 01       	movw	r30, r24
    17d0:	e2 0f       	add	r30, r18
    17d2:	f3 1f       	adc	r31, r19
    17d4:	40 81       	ld	r20, Z
    17d6:	89 89       	ldd	r24, Y+17	; 0x11
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	ce 01       	movw	r24, r28
    17de:	86 96       	adiw	r24, 0x26	; 38
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	90 81       	ld	r25, Z
    17e8:	84 2f       	mov	r24, r20
    17ea:	69 2f       	mov	r22, r25
    17ec:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_GetPinValue>
    17f0:	8f 87       	std	Y+15, r24	; 0x0f
					if(u8PinValueLocal== KPD_PRESSED_KEY)
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	88 23       	and	r24, r24
    17f6:	09 f0       	breq	.+2      	; 0x17fa <KPD_GETPressedKey+0x102>
    17f8:	bc c0       	rjmp	.+376    	; 0x1972 <KPD_GETPressedKey+0x27a>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a8 e4       	ldi	r26, 0x48	; 72
    1800:	b2 e4       	ldi	r27, 0x42	; 66
    1802:	8b 87       	std	Y+11, r24	; 0x0b
    1804:	9c 87       	std	Y+12, r25	; 0x0c
    1806:	ad 87       	std	Y+13, r26	; 0x0d
    1808:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6b 85       	ldd	r22, Y+11	; 0x0b
    180c:	7c 85       	ldd	r23, Y+12	; 0x0c
    180e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1810:	9e 85       	ldd	r25, Y+14	; 0x0e
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a ef       	ldi	r20, 0xFA	; 250
    1818:	54 e4       	ldi	r21, 0x44	; 68
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8f 83       	std	Y+7, r24	; 0x07
    1824:	98 87       	std	Y+8, r25	; 0x08
    1826:	a9 87       	std	Y+9, r26	; 0x09
    1828:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <KPD_GETPressedKey+0x154>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <KPD_GETPressedKey+0x1d2>
	else if (__tmp > 65535)
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <KPD_GETPressedKey+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6b 85       	ldd	r22, Y+11	; 0x0b
    1866:	7c 85       	ldd	r23, Y+12	; 0x0c
    1868:	8d 85       	ldd	r24, Y+13	; 0x0d
    186a:	9e 85       	ldd	r25, Y+14	; 0x0e
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <KPD_GETPressedKey+0x1b4>
    188e:	88 ec       	ldi	r24, 0xC8	; 200
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <KPD_GETPressedKey+0x1a2>
    189e:	9c 83       	std	Y+4, r25	; 0x04
    18a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <KPD_GETPressedKey+0x196>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <KPD_GETPressedKey+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6f 81       	ldd	r22, Y+7	; 0x07
    18b8:	78 85       	ldd	r23, Y+8	; 0x08
    18ba:	89 85       	ldd	r24, Y+9	; 0x09
    18bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <KPD_GETPressedKey+0x1de>
    18da:	9a 83       	std	Y+2, r25	; 0x02
    18dc:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(50);
						u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    18de:	89 89       	ldd	r24, Y+17	; 0x11
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	ce 01       	movw	r24, r28
    18e6:	82 96       	adiw	r24, 0x22	; 34
    18e8:	fc 01       	movw	r30, r24
    18ea:	e2 0f       	add	r30, r18
    18ec:	f3 1f       	adc	r31, r19
    18ee:	40 81       	ld	r20, Z
    18f0:	89 89       	ldd	r24, Y+17	; 0x11
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	ce 01       	movw	r24, r28
    18f8:	86 96       	adiw	r24, 0x26	; 38
    18fa:	fc 01       	movw	r30, r24
    18fc:	e2 0f       	add	r30, r18
    18fe:	f3 1f       	adc	r31, r19
    1900:	90 81       	ld	r25, Z
    1902:	84 2f       	mov	r24, r20
    1904:	69 2f       	mov	r22, r25
    1906:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_GetPinValue>
    190a:	8f 87       	std	Y+15, r24	; 0x0f
						if(u8PinValueLocal== KPD_PRESSED_KEY)
    190c:	8f 85       	ldd	r24, Y+15	; 0x0f
    190e:	88 23       	and	r24, r24
    1910:	81 f5       	brne	.+96     	; 0x1972 <KPD_GETPressedKey+0x27a>
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <KPD_GETPressedKey+0x24a>
						{
							while(u8PinValueLocal== KPD_PRESSED_KEY)
							{
								u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
    1914:	89 89       	ldd	r24, Y+17	; 0x11
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	ce 01       	movw	r24, r28
    191c:	82 96       	adiw	r24, 0x22	; 34
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	40 81       	ld	r20, Z
    1926:	89 89       	ldd	r24, Y+17	; 0x11
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	ce 01       	movw	r24, r28
    192e:	86 96       	adiw	r24, 0x26	; 38
    1930:	fc 01       	movw	r30, r24
    1932:	e2 0f       	add	r30, r18
    1934:	f3 1f       	adc	r31, r19
    1936:	90 81       	ld	r25, Z
    1938:	84 2f       	mov	r24, r20
    193a:	69 2f       	mov	r22, r25
    193c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <DIO_GetPinValue>
    1940:	8f 87       	std	Y+15, r24	; 0x0f
					{
						_delay_ms(50);
						u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
						if(u8PinValueLocal== KPD_PRESSED_KEY)
						{
							while(u8PinValueLocal== KPD_PRESSED_KEY)
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	88 23       	and	r24, r24
    1946:	31 f3       	breq	.-52     	; 0x1914 <KPD_GETPressedKey+0x21c>
							{
								u8PinValueLocal= DIO_GetPinValue(KPD_U8ROWPortArr[u8RowLocal],KPD_U8ROWPINArr[u8RowLocal]);
							}
							return KPD_u8Value[u8RowLocal][u8ColLocal];
    1948:	89 89       	ldd	r24, Y+17	; 0x11
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	88 89       	ldd	r24, Y+16	; 0x10
    1950:	48 2f       	mov	r20, r24
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	22 0f       	add	r18, r18
    1956:	33 1f       	adc	r19, r19
    1958:	22 0f       	add	r18, r18
    195a:	33 1f       	adc	r19, r19
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	84 0f       	add	r24, r20
    1966:	95 1f       	adc	r25, r21
    1968:	fc 01       	movw	r30, r24
    196a:	71 96       	adiw	r30, 0x11	; 17
    196c:	80 81       	ld	r24, Z
    196e:	8a ab       	std	Y+50, r24	; 0x32
    1970:	27 c0       	rjmp	.+78     	; 0x19c0 <KPD_GETPressedKey+0x2c8>
	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
		DIO_SetPinValue(KPD_U8ROWPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_LOW);
		for(u8RowLocal=0;u8RowLocal<ROW_NUMBER; u8RowLocal++){
    1972:	89 89       	ldd	r24, Y+17	; 0x11
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	89 8b       	std	Y+17, r24	; 0x11
    1978:	89 89       	ldd	r24, Y+17	; 0x11
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	08 f4       	brcc	.+2      	; 0x1980 <KPD_GETPressedKey+0x288>
    197e:	22 cf       	rjmp	.-444    	; 0x17c4 <KPD_GETPressedKey+0xcc>
							}
							return KPD_u8Value[u8RowLocal][u8ColLocal];
						}
					}
		}
		DIO_SetPinValue(KPD_U8COLPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_HIGH);
    1980:	88 89       	ldd	r24, Y+16	; 0x10
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	ce 01       	movw	r24, r28
    1988:	8a 96       	adiw	r24, 0x2a	; 42
    198a:	fc 01       	movw	r30, r24
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	40 81       	ld	r20, Z
    1992:	88 89       	ldd	r24, Y+16	; 0x10
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	ce 01       	movw	r24, r28
    199a:	8e 96       	adiw	r24, 0x2e	; 46
    199c:	fc 01       	movw	r30, r24
    199e:	e2 0f       	add	r30, r18
    19a0:	f3 1f       	adc	r31, r19
    19a2:	90 81       	ld	r25, Z
    19a4:	84 2f       	mov	r24, r20
    19a6:	69 2f       	mov	r22, r25
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_SetPinValue>
	u8 KPD_U8ROWPINArr[ROW_NUMBER]={KPD_R0_PIN,KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN};

	u8 KPD_U8COLPortArr[COL_NUMBER]={KPD_C0_PORT,KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT};
	u8 KPD_U8COLPINArr[COL_NUMBER]={KPD_C0_PIN,KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	for(u8ColLocal=0;u8ColLocal<COL_NUMBER; u8ColLocal++){
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	88 8b       	std	Y+16, r24	; 0x10
    19b4:	88 89       	ldd	r24, Y+16	; 0x10
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <KPD_GETPressedKey+0x2c4>
    19ba:	eb ce       	rjmp	.-554    	; 0x1792 <KPD_GETPressedKey+0x9a>
						}
					}
		}
		DIO_SetPinValue(KPD_U8COLPortArr[u8ColLocal],KPD_U8COLPINArr[u8ColLocal],DIO_HIGH);
	}
	return KPD_NOT_PRESSED_KEY;
    19bc:	9f ef       	ldi	r25, 0xFF	; 255
    19be:	9a ab       	std	Y+50, r25	; 0x32
    19c0:	8a a9       	ldd	r24, Y+50	; 0x32

}
    19c2:	e7 96       	adiw	r28, 0x37	; 55
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <main>:
#include "GIE.h"
#include <avr/io.h>
#include <util/delay.h>

void main(void)
{
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	28 97       	sbiw	r28, 0x08	; 8
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    // Set up LCD and keypad
    DIO_SetPortDirection(CLCD_DATA_PORT, DIO_PORT_OUTPUT);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	6f ef       	ldi	r22, 0xFF	; 255
    19f0:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_SetPortDirection>
    DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN0, DIO_OUTPUT);
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
    DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN1, DIO_OUTPUT);
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
    DIO_SetPinDirection(CLCD_CTRL_PORT, DIO_PIN2, DIO_OUTPUT);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>

    CLCD_voidInitl();
    1a12:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInitl>
    KPD_Init();
    1a16:	0e 94 25 0b 	call	0x164a	; 0x164a <KPD_Init>

    // Display a prompt for the user
    CLCD_voidGoTo_X_Y(0, 0);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoTo_X_Y>
    CLCD_voidSrting("Enter an angle:");
    1a26:	80 e6       	ldi	r24, 0x60	; 96
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSrting>

    u16 angle = 0;
    1a2e:	1e 82       	std	Y+6, r1	; 0x06
    1a30:	1d 82       	std	Y+5, r1	; 0x05
    u8 key;
    u8 digitCount = 0;
    1a32:	1b 82       	std	Y+3, r1	; 0x03

    while (1) {
        key = KPD_GETPressedKey();
    1a34:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <KPD_GETPressedKey>
    1a38:	8c 83       	std	Y+4, r24	; 0x04

        switch (key) {
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	38 87       	std	Y+8, r19	; 0x08
    1a42:	2f 83       	std	Y+7, r18	; 0x07
    1a44:	4f 81       	ldd	r20, Y+7	; 0x07
    1a46:	58 85       	ldd	r21, Y+8	; 0x08
    1a48:	40 33       	cpi	r20, 0x30	; 48
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	9c f3       	brlt	.-26     	; 0x1a34 <main+0x60>
    1a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a50:	98 85       	ldd	r25, Y+8	; 0x08
    1a52:	8a 33       	cpi	r24, 0x3A	; 58
    1a54:	91 05       	cpc	r25, r1
    1a56:	34 f0       	brlt	.+12     	; 0x1a64 <main+0x90>
    1a58:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5a:	38 85       	ldd	r19, Y+8	; 0x08
    1a5c:	2d 33       	cpi	r18, 0x3D	; 61
    1a5e:	31 05       	cpc	r19, r1
    1a60:	49 f1       	breq	.+82     	; 0x1ab4 <main+0xe0>
    1a62:	e8 cf       	rjmp	.-48     	; 0x1a34 <main+0x60>
            case '0' ... '9':
                if (digitCount < 3) {
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	28 f7       	brcc	.-54     	; 0x1a34 <main+0x60>
                    angle = (angle * 10) + (key - '0');
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9c 01       	movw	r18, r24
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	c9 01       	movw	r24, r18
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	28 0f       	add	r18, r24
    1a80:	39 1f       	adc	r19, r25
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	88 2f       	mov	r24, r24
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	c0 97       	sbiw	r24, 0x30	; 48
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
                    CLCD_voidGoTo_X_Y(1, digitCount);
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoTo_X_Y>
                    CLCD_voidSendData(key);
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa4:	88 2f       	mov	r24, r24
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
                    digitCount++;
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	c0 cf       	rjmp	.-128    	; 0x1a34 <main+0x60>
        }
    }

angleEntered:
    // Rotate the servo to the desired angle
    TIMER1_voidINIT();
    1ab4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <TIMER1_voidINIT>
    TIMER1_voidSetTopTicks(20000);
    1ab8:	80 e2       	ldi	r24, 0x20	; 32
    1aba:	9e e4       	ldi	r25, 0x4E	; 78
    1abc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TIMER1_voidSetTopTicks>

    // Calculate PW
    u16 servoAngle = map(angle, 0, 99, 1000, 2000);
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	43 e6       	ldi	r20, 0x63	; 99
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	28 ee       	ldi	r18, 0xE8	; 232
    1ace:	33 e0       	ldi	r19, 0x03	; 3
    1ad0:	00 ed       	ldi	r16, 0xD0	; 208
    1ad2:	17 e0       	ldi	r17, 0x07	; 7
    1ad4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <map>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    servoAngle = (servoAngle * 180) / 100;  // Set the angle between 0-180 range
    1adc:	29 81       	ldd	r18, Y+1	; 0x01
    1ade:	3a 81       	ldd	r19, Y+2	; 0x02
    1ae0:	84 eb       	ldi	r24, 0xB4	; 180
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	24 9f       	mul	r18, r20
    1ae8:	c0 01       	movw	r24, r0
    1aea:	25 9f       	mul	r18, r21
    1aec:	90 0d       	add	r25, r0
    1aee:	34 9f       	mul	r19, r20
    1af0:	90 0d       	add	r25, r0
    1af2:	11 24       	eor	r1, r1
    1af4:	24 e6       	ldi	r18, 0x64	; 100
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	b9 01       	movw	r22, r18
    1afa:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__udivmodhi4>
    1afe:	cb 01       	movw	r24, r22
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    servoAngle = map(servoAngle, 0, 180, 1000, 2000);  // Map the angle to the corresponding PW
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	44 eb       	ldi	r20, 0xB4	; 180
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	28 ee       	ldi	r18, 0xE8	; 232
    1b12:	33 e0       	ldi	r19, 0x03	; 3
    1b14:	00 ed       	ldi	r16, 0xD0	; 208
    1b16:	17 e0       	ldi	r17, 0x07	; 7
    1b18:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <map>
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01

    TIMER1_voidSetChannelCompareMatch(servoAngle);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <TIMER1_voidSetChannelCompareMatch>
    DIO_SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_OUTPUT);
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	65 e0       	ldi	r22, 0x05	; 5
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	0e 94 be 07 	call	0xf7c	; 0xf7c <DIO_SetPinDirection>
    1b32:	ff cf       	rjmp	.-2      	; 0x1b32 <main+0x15e>

00001b34 <TIMER0_voidINIT>:
#include "BIT_MATH.h"
#include "timer.h"
#include <avr/io.h>
#define NULL ((void*)0)
void (*TIMER0_pvCallBackFunc)(void)= NULL;
void TIMER0_voidINIT(void){
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	// CHOOSE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1b3c:	a3 e5       	ldi	r26, 0x53	; 83
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e3 e5       	ldi	r30, 0x53	; 83
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 7b       	andi	r24, 0xBF	; 191
    1b48:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1b4a:	a3 e5       	ldi	r26, 0x53	; 83
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e3 e5       	ldi	r30, 0x53	; 83
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	88 60       	ori	r24, 0x08	; 8
    1b56:	8c 93       	st	X, r24

	OCR0 = 250;
    1b58:	ec e5       	ldi	r30, 0x5C	; 92
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a ef       	ldi	r24, 0xFA	; 250
    1b5e:	80 83       	st	Z, r24

	SET_BIT(TIMSK,TIMSK_OCIE0);
    1b60:	a9 e5       	ldi	r26, 0x59	; 89
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e9 e5       	ldi	r30, 0x59	; 89
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	82 60       	ori	r24, 0x02	; 2
    1b6c:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,TCCR0_CS00);
    1b6e:	a3 e5       	ldi	r26, 0x53	; 83
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e3 e5       	ldi	r30, 0x53	; 83
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1b7c:	a3 e5       	ldi	r26, 0x53	; 83
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e3 e5       	ldi	r30, 0x53	; 83
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1b8a:	a3 e5       	ldi	r26, 0x53	; 83
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e3 e5       	ldi	r30, 0x53	; 83
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	8b 7f       	andi	r24, 0xFB	; 251
    1b96:	8c 93       	st	X, r24
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <TIMER0_voidINIT1>:

void TIMER0_voidINIT1(void){
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	// CHOOSE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    1ba6:	a3 e5       	ldi	r26, 0x53	; 83
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e3 e5       	ldi	r30, 0x53	; 83
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 7b       	andi	r24, 0xBF	; 191
    1bb2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1bb4:	a3 e5       	ldi	r26, 0x53	; 83
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e3 e5       	ldi	r30, 0x53	; 83
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	8c 93       	st	X, r24

	OCR0 = 250;
    1bc2:	ec e5       	ldi	r30, 0x5C	; 92
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	8a ef       	ldi	r24, 0xFA	; 250
    1bc8:	80 83       	st	Z, r24

	SET_BIT(TIMSK,TIMSK_OCIE0);
    1bca:	a9 e5       	ldi	r26, 0x59	; 89
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e9 e5       	ldi	r30, 0x59	; 89
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	8c 93       	st	X, r24

	CLR_BIT(TCCR0,TCCR0_CS00);
    1bd8:	a3 e5       	ldi	r26, 0x53	; 83
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e3 e5       	ldi	r30, 0x53	; 83
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8e 7f       	andi	r24, 0xFE	; 254
    1be4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1be6:	a3 e5       	ldi	r26, 0x53	; 83
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e3 e5       	ldi	r30, 0x53	; 83
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	82 60       	ori	r24, 0x02	; 2
    1bf2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8b 7f       	andi	r24, 0xFB	; 251
    1c00:	8c 93       	st	X, r24
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <TIMER0_u8SetCallBack>:
u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)){
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <TIMER0_u8SetCallBack+0x6>
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9b 83       	std	Y+3, r25	; 0x03
    1c16:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatus_Local=OK;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc!= NULL){
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	39 f0       	breq	.+14     	; 0x1c32 <TIMER0_u8SetCallBack+0x2a>
		TIMER0_pvCallBackFunc =Copy_pvCallBackFunc;
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	9b 81       	ldd	r25, Y+3	; 0x03
    1c28:	90 93 89 00 	sts	0x0089, r25
    1c2c:	80 93 88 00 	sts	0x0088, r24
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		u8ErrorStatus_Local= NOT_OK;
    1c32:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorStatus_Local;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	2f 93       	push	r18
    1c4e:	3f 93       	push	r19
    1c50:	4f 93       	push	r20
    1c52:	5f 93       	push	r21
    1c54:	6f 93       	push	r22
    1c56:	7f 93       	push	r23
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	af 93       	push	r26
    1c5e:	bf 93       	push	r27
    1c60:	ef 93       	push	r30
    1c62:	ff 93       	push	r31
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=0){
    1c6c:	80 91 88 00 	lds	r24, 0x0088
    1c70:	90 91 89 00 	lds	r25, 0x0089
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
    1c78:	e0 91 88 00 	lds	r30, 0x0088
    1c7c:	f0 91 89 00 	lds	r31, 0x0089
    1c80:	09 95       	icall
	}
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	ff 91       	pop	r31
    1c88:	ef 91       	pop	r30
    1c8a:	bf 91       	pop	r27
    1c8c:	af 91       	pop	r26
    1c8e:	9f 91       	pop	r25
    1c90:	8f 91       	pop	r24
    1c92:	7f 91       	pop	r23
    1c94:	6f 91       	pop	r22
    1c96:	5f 91       	pop	r21
    1c98:	4f 91       	pop	r20
    1c9a:	3f 91       	pop	r19
    1c9c:	2f 91       	pop	r18
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	0f 90       	pop	r0
    1ca4:	1f 90       	pop	r1
    1ca6:	18 95       	reti

00001ca8 <TIMER1_voidINIT>:
void TIMER1_voidINIT(void)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1cb0:	af e4       	ldi	r26, 0x4F	; 79
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ef e4       	ldi	r30, 0x4F	; 79
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 7b       	andi	r24, 0xBF	; 191
    1cbc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1cbe:	af e4       	ldi	r26, 0x4F	; 79
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ef e4       	ldi	r30, 0x4F	; 79
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 68       	ori	r24, 0x80	; 128
    1cca:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1ccc:	af e4       	ldi	r26, 0x4F	; 79
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ef e4       	ldi	r30, 0x4F	; 79
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8e 7f       	andi	r24, 0xFE	; 254
    1cd8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1cda:	af e4       	ldi	r26, 0x4F	; 79
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	ef e4       	ldi	r30, 0x4F	; 79
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	82 60       	ori	r24, 0x02	; 2
    1ce6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1ce8:	ae e4       	ldi	r26, 0x4E	; 78
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ee e4       	ldi	r30, 0x4E	; 78
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 60       	ori	r24, 0x08	; 8
    1cf4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1cf6:	ae e4       	ldi	r26, 0x4E	; 78
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	ee e4       	ldi	r30, 0x4E	; 78
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 61       	ori	r24, 0x10	; 16
    1d02:	8c 93       	st	X, r24

	TCCR1B&= PRESCALLER_MASK;
    1d04:	ae e4       	ldi	r26, 0x4E	; 78
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	ee e4       	ldi	r30, 0x4E	; 78
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 7f       	andi	r24, 0xF8	; 248
    1d10:	8c 93       	st	X, r24

}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <TIMER1_voidSetChannelCompareMatch>:
void TIMER1_voidSetChannelCompareMatch(u16 copy_u16CompareMatch)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <TIMER1_voidSetChannelCompareMatch+0x6>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_u16CompareMatch;
    1d26:	ea e4       	ldi	r30, 0x4A	; 74
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <TIMER1_voidSetTopTicks>:
void TIMER1_voidSetTopTicks(u16 copy_u16TopTicks)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <TIMER1_voidSetTopTicks+0x6>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_u16TopTicks;
    1d4a:	e6 e4       	ldi	r30, 0x46	; 70
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <map>:

u16 map(u16 x, u16 in_min, u16 in_max, u16 out_min, u16 out_max) {
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	7c 83       	std	Y+4, r23	; 0x04
    1d7e:	6b 83       	std	Y+3, r22	; 0x03
    1d80:	5e 83       	std	Y+6, r21	; 0x06
    1d82:	4d 83       	std	Y+5, r20	; 0x05
    1d84:	38 87       	std	Y+8, r19	; 0x08
    1d86:	2f 83       	std	Y+7, r18	; 0x07
    1d88:	1a 87       	std	Y+10, r17	; 0x0a
    1d8a:	09 87       	std	Y+9, r16	; 0x09
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1d8c:	29 81       	ldd	r18, Y+1	; 0x01
    1d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	a9 01       	movw	r20, r18
    1d96:	48 1b       	sub	r20, r24
    1d98:	59 0b       	sbc	r21, r25
    1d9a:	29 85       	ldd	r18, Y+9	; 0x09
    1d9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1da0:	98 85       	ldd	r25, Y+8	; 0x08
    1da2:	b9 01       	movw	r22, r18
    1da4:	68 1b       	sub	r22, r24
    1da6:	79 0b       	sbc	r23, r25
    1da8:	cb 01       	movw	r24, r22
    1daa:	9a 01       	movw	r18, r20
    1dac:	28 9f       	mul	r18, r24
    1dae:	a0 01       	movw	r20, r0
    1db0:	29 9f       	mul	r18, r25
    1db2:	50 0d       	add	r21, r0
    1db4:	38 9f       	mul	r19, r24
    1db6:	50 0d       	add	r21, r0
    1db8:	11 24       	eor	r1, r1
    1dba:	2d 81       	ldd	r18, Y+5	; 0x05
    1dbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	28 1b       	sub	r18, r24
    1dc4:	39 0b       	sbc	r19, r25
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	b9 01       	movw	r22, r18
    1dca:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__udivmodhi4>
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd4:	98 85       	ldd	r25, Y+8	; 0x08
    1dd6:	82 0f       	add	r24, r18
    1dd8:	93 1f       	adc	r25, r19
}
    1dda:	2a 96       	adiw	r28, 0x0a	; 10
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	08 95       	ret

00001df0 <__udivmodhi4>:
    1df0:	aa 1b       	sub	r26, r26
    1df2:	bb 1b       	sub	r27, r27
    1df4:	51 e1       	ldi	r21, 0x11	; 17
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <__udivmodhi4_ep>

00001df8 <__udivmodhi4_loop>:
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	a6 17       	cp	r26, r22
    1dfe:	b7 07       	cpc	r27, r23
    1e00:	10 f0       	brcs	.+4      	; 0x1e06 <__udivmodhi4_ep>
    1e02:	a6 1b       	sub	r26, r22
    1e04:	b7 0b       	sbc	r27, r23

00001e06 <__udivmodhi4_ep>:
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	5a 95       	dec	r21
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <__udivmodhi4_loop>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	08 95       	ret

00001e18 <__prologue_saves__>:
    1e18:	2f 92       	push	r2
    1e1a:	3f 92       	push	r3
    1e1c:	4f 92       	push	r4
    1e1e:	5f 92       	push	r5
    1e20:	6f 92       	push	r6
    1e22:	7f 92       	push	r7
    1e24:	8f 92       	push	r8
    1e26:	9f 92       	push	r9
    1e28:	af 92       	push	r10
    1e2a:	bf 92       	push	r11
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	ca 1b       	sub	r28, r26
    1e42:	db 0b       	sbc	r29, r27
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	09 94       	ijmp

00001e50 <__epilogue_restores__>:
    1e50:	2a 88       	ldd	r2, Y+18	; 0x12
    1e52:	39 88       	ldd	r3, Y+17	; 0x11
    1e54:	48 88       	ldd	r4, Y+16	; 0x10
    1e56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e62:	b9 84       	ldd	r11, Y+9	; 0x09
    1e64:	c8 84       	ldd	r12, Y+8	; 0x08
    1e66:	df 80       	ldd	r13, Y+7	; 0x07
    1e68:	ee 80       	ldd	r14, Y+6	; 0x06
    1e6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e70:	aa 81       	ldd	r26, Y+2	; 0x02
    1e72:	b9 81       	ldd	r27, Y+1	; 0x01
    1e74:	ce 0f       	add	r28, r30
    1e76:	d1 1d       	adc	r29, r1
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	ed 01       	movw	r28, r26
    1e84:	08 95       	ret

00001e86 <_exit>:
    1e86:	f8 94       	cli

00001e88 <__stop_program>:
    1e88:	ff cf       	rjmp	.-2      	; 0x1e88 <__stop_program>
