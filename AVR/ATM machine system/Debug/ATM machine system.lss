
SafeAssignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000276c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  0000276c  000027e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b6c  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001092  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000549e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000055de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000574e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000941d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ab 0c 	call	0x1956	; 0x1956 <main>
      7a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e0       	ldi	r26, 0x05	; 5
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e0       	ldi	r24, 0x05	; 5
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_void_SendCommand>:
#include "STD_TYPES.h"
#include "DIO.h"
#include <util/delay.h>


void CLCD_void_SendCommand(u8 Copy_u8_Command){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	//RS = 0 to select instruction register
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_LOW);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	//RW = 0 to write
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	//send command to data port
	DIO_SetPortValue(CLCD_DATA_PORT, Copy_u8_Command);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_SetPortValue>

	//enable pulse
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_HIGH);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e4       	ldi	r27, 0x40	; 64
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_void_SendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_void_SendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_void_SendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_void_SendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_void_SendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_void_SendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_void_SendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_void_SendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_LOW);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_void_SendData>:
void CLCD_void_SendData(u8 Copy_u8_Data){
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	//RS = 1 to select data register
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_HIGH);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	//RW = 0 to write
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_LOW);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	//send a char to data port
	DIO_SetPortValue(CLCD_DATA_PORT, Copy_u8_Data);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 1b 09 	call	0x1236	; 0x1236 <DIO_SetPortValue>

	//enable pulse
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_HIGH);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	62 e0       	ldi	r22, 0x02	; 2
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e4       	ldi	r27, 0x40	; 64
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_void_SendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_void_SendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_void_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_void_SendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_void_SendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_void_SendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_void_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_void_SendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_LOW);
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>

}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_void_Init>:
void CLCD_void_Init(void){
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2e 97       	sbiw	r28, 0x0e	; 14
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	//set data port
	DIO_SetPortDirection(CLCD_DATA_PORT, DIO_PORT_OUTPUT);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	6f ef       	ldi	r22, 0xFF	; 255
     dc6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_SetPortDirection>
	//set control pins
	DIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_OUTPUT);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_OUTPUT);
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_OUTPUT);
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	41 e0       	ldi	r20, 0x01	; 1
     de4:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e2       	ldi	r26, 0x20	; 32
     dee:	b2 e4       	ldi	r27, 0x42	; 66
     df0:	8b 87       	std	Y+11, r24	; 0x0b
     df2:	9c 87       	std	Y+12, r25	; 0x0c
     df4:	ad 87       	std	Y+13, r26	; 0x0d
     df6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4a ef       	ldi	r20, 0xFA	; 250
     e06:	54 e4       	ldi	r21, 0x44	; 68
     e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	8f 83       	std	Y+7, r24	; 0x07
     e12:	98 87       	std	Y+8, r25	; 0x08
     e14:	a9 87       	std	Y+9, r26	; 0x09
     e16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f e3       	ldi	r21, 0x3F	; 63
     e28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	2c f4       	brge	.+10     	; 0xe3a <CLCD_void_Init+0x8c>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <CLCD_void_Init+0x10a>
	else if (__tmp > 65535)
     e3a:	6f 81       	ldd	r22, Y+7	; 0x07
     e3c:	78 85       	ldd	r23, Y+8	; 0x08
     e3e:	89 85       	ldd	r24, Y+9	; 0x09
     e40:	9a 85       	ldd	r25, Y+10	; 0x0a
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	3f ef       	ldi	r19, 0xFF	; 255
     e46:	4f e7       	ldi	r20, 0x7F	; 127
     e48:	57 e4       	ldi	r21, 0x47	; 71
     e4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e4e:	18 16       	cp	r1, r24
     e50:	4c f5       	brge	.+82     	; 0xea4 <CLCD_void_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e52:	6b 85       	ldd	r22, Y+11	; 0x0b
     e54:	7c 85       	ldd	r23, Y+12	; 0x0c
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <CLCD_void_Init+0xec>
     e7c:	88 ec       	ldi	r24, 0xC8	; 200
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	8b 83       	std	Y+3, r24	; 0x03
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <CLCD_void_Init+0xda>
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	9e 83       	std	Y+6, r25	; 0x06
     e98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	8d 81       	ldd	r24, Y+5	; 0x05
     e9c:	9e 81       	ldd	r25, Y+6	; 0x06
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	69 f7       	brne	.-38     	; 0xe7c <CLCD_void_Init+0xce>
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <CLCD_void_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea4:	6f 81       	ldd	r22, Y+7	; 0x07
     ea6:	78 85       	ldd	r23, Y+8	; 0x08
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <CLCD_void_Init+0x116>
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40); //wait till VDD rises to 4.5V
	CLCD_void_SendCommand(0b00111000); //function set
     ecc:	88 e3       	ldi	r24, 0x38	; 56
     ece:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_void_SendCommand>
	CLCD_void_SendCommand(0b00001100); //display on/off control
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_void_SendCommand>
	CLCD_void_CLR();
     ed8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>

}
     edc:	2e 96       	adiw	r28, 0x0e	; 14
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <CLCD_void_SendString>:
void CLCD_void_SendString(const char * PtrString){
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <CLCD_void_SendString+0x6>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	9b 83       	std	Y+3, r25	; 0x03
     efc:	8a 83       	std	Y+2, r24	; 0x02
     efe:	1c c0       	rjmp	.+56     	; 0xf38 <CLCD_void_SendString+0x4a>
	u8 count_local_u8;
	while(*PtrString > 0){
		if(count_local_u8 < 16){
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	80 31       	cpi	r24, 0x10	; 16
     f04:	20 f4       	brcc	.+8      	; 0xf0e <CLCD_void_SendString+0x20>
			count_local_u8++;
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <CLCD_void_SendString+0x34>
		}
		else {
			CLCD_void_CursorPos(1, count_local_u8 - 16);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	98 2f       	mov	r25, r24
     f12:	90 51       	subi	r25, 0x10	; 16
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	69 2f       	mov	r22, r25
     f18:	0e 94 a7 07 	call	0xf4e	; 0xf4e <CLCD_void_CursorPos>
			count_local_u8++;
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	89 83       	std	Y+1, r24	; 0x01
		}
		CLCD_void_SendData(*PtrString++);
     f22:	ea 81       	ldd	r30, Y+2	; 0x02
     f24:	fb 81       	ldd	r31, Y+3	; 0x03
     f26:	20 81       	ld	r18, Z
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	9b 81       	ldd	r25, Y+3	; 0x03
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	9b 83       	std	Y+3, r25	; 0x03
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	82 2f       	mov	r24, r18
     f34:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_void_SendData>
	CLCD_void_CLR();

}
void CLCD_void_SendString(const char * PtrString){
	u8 count_local_u8;
	while(*PtrString > 0){
     f38:	ea 81       	ldd	r30, Y+2	; 0x02
     f3a:	fb 81       	ldd	r31, Y+3	; 0x03
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	f9 f6       	brne	.-66     	; 0xf00 <CLCD_void_SendString+0x12>
			CLCD_void_CursorPos(1, count_local_u8 - 16);
			count_local_u8++;
		}
		CLCD_void_SendData(*PtrString++);
	}
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <CLCD_void_CursorPos>:
void CLCD_void_CursorPos(u8 Copy_u8_X, u8 Copy_u8_Y){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <CLCD_void_CursorPos+0x6>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_Address;
	if(Copy_u8_X == 0){
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 23       	and	r24, r24
     f62:	19 f4       	brne	.+6      	; 0xf6a <CLCD_void_CursorPos+0x1c>
		local_u8_Address = Copy_u8_Y;
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	06 c0       	rjmp	.+12     	; 0xf76 <CLCD_void_CursorPos+0x28>
	}
	else if(Copy_u8_X == 1){
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	19 f4       	brne	.+6      	; 0xf76 <CLCD_void_CursorPos+0x28>
		local_u8_Address = Copy_u8_Y + 0x40;
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	80 5c       	subi	r24, 0xC0	; 192
     f74:	89 83       	std	Y+1, r24	; 0x01
	}
	//set DDRAM address to the cursor coordinates
	CLCD_void_SendCommand(0b10000000 | local_u8_Address);
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_void_SendCommand>
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <CLCD_void_CLR>:
void CLCD_void_CLR(void){
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_SendCommand(0b00000001);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_void_SendCommand>
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <DIO_SetPortDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO.h"
#include <avr/io.h>

void DIO_SetPortDirection(u8 u8PortIdCopy, u8 u8PortDirCopy){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_SetPortDirection+0x6>
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <DIO_SetPortDirection+0x8>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PortIdCopy <= DIO_PORTD){
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	90 f5       	brcc	.+100    	; 0x1018 <DIO_SetPortDirection+0x7a>
		switch(u8PortIdCopy){
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3c 83       	std	Y+4, r19	; 0x04
     fbc:	2b 83       	std	Y+3, r18	; 0x03
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	d1 f0       	breq	.+52     	; 0xffc <DIO_SetPortDirection+0x5e>
     fc8:	2b 81       	ldd	r18, Y+3	; 0x03
     fca:	3c 81       	ldd	r19, Y+4	; 0x04
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	2c f4       	brge	.+10     	; 0xfdc <DIO_SetPortDirection+0x3e>
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	61 f0       	breq	.+24     	; 0xff2 <DIO_SetPortDirection+0x54>
     fda:	1e c0       	rjmp	.+60     	; 0x1018 <DIO_SetPortDirection+0x7a>
     fdc:	2b 81       	ldd	r18, Y+3	; 0x03
     fde:	3c 81       	ldd	r19, Y+4	; 0x04
     fe0:	22 30       	cpi	r18, 0x02	; 2
     fe2:	31 05       	cpc	r19, r1
     fe4:	81 f0       	breq	.+32     	; 0x1006 <DIO_SetPortDirection+0x68>
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	91 05       	cpc	r25, r1
     fee:	81 f0       	breq	.+32     	; 0x1010 <DIO_SetPortDirection+0x72>
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <DIO_SetPortDirection+0x7a>
			case DIO_PORTA: DDRA = u8PortDirCopy; break;
     ff2:	ea e3       	ldi	r30, 0x3A	; 58
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	80 83       	st	Z, r24
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <DIO_SetPortDirection+0x7a>
			case DIO_PORTB: DDRB = u8PortDirCopy; break;
     ffc:	e7 e3       	ldi	r30, 0x37	; 55
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	80 83       	st	Z, r24
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <DIO_SetPortDirection+0x7a>
			case DIO_PORTC: DDRC = u8PortDirCopy; break;
    1006:	e4 e3       	ldi	r30, 0x34	; 52
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	80 83       	st	Z, r24
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <DIO_SetPortDirection+0x7a>
			case DIO_PORTD: DDRD = u8PortDirCopy; break;
    1010:	e1 e3       	ldi	r30, 0x31	; 49
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 83       	st	Z, r24
		}
	}
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <DIO_SetPinDirection>:
void DIO_SetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	27 97       	sbiw	r28, 0x07	; 7
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
    103e:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PortIdCopy <= DIO_PORTD){
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	08 f0       	brcs	.+2      	; 0x1048 <DIO_SetPinDirection+0x22>
    1046:	ee c0       	rjmp	.+476    	; 0x1224 <DIO_SetPinDirection+0x1fe>
		if(u8PinIdCopy <= DIO_PIN7){
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_SetPinDirection+0x2a>
    104e:	ea c0       	rjmp	.+468    	; 0x1224 <DIO_SetPinDirection+0x1fe>
			if(u8PinDirCopy == DIO_OUTPUT){
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	09 f0       	breq	.+2      	; 0x1058 <DIO_SetPinDirection+0x32>
    1056:	6f c0       	rjmp	.+222    	; 0x1136 <DIO_SetPinDirection+0x110>
				switch(u8PortIdCopy){
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3f 83       	std	Y+7, r19	; 0x07
    1060:	2e 83       	std	Y+6, r18	; 0x06
    1062:	8e 81       	ldd	r24, Y+6	; 0x06
    1064:	9f 81       	ldd	r25, Y+7	; 0x07
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	49 f1       	breq	.+82     	; 0x10be <DIO_SetPinDirection+0x98>
    106c:	2e 81       	ldd	r18, Y+6	; 0x06
    106e:	3f 81       	ldd	r19, Y+7	; 0x07
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <DIO_SetPinDirection+0x5a>
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	9f 81       	ldd	r25, Y+7	; 0x07
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	61 f0       	breq	.+24     	; 0x1096 <DIO_SetPinDirection+0x70>
    107e:	d2 c0       	rjmp	.+420    	; 0x1224 <DIO_SetPinDirection+0x1fe>
    1080:	2e 81       	ldd	r18, Y+6	; 0x06
    1082:	3f 81       	ldd	r19, Y+7	; 0x07
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	71 f1       	breq	.+92     	; 0x10e6 <DIO_SetPinDirection+0xc0>
    108a:	8e 81       	ldd	r24, Y+6	; 0x06
    108c:	9f 81       	ldd	r25, Y+7	; 0x07
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	e9 f1       	breq	.+122    	; 0x110e <DIO_SetPinDirection+0xe8>
    1094:	c7 c0       	rjmp	.+398    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTA: SET_BIT(DDRA, u8PinIdCopy); break;
    1096:	aa e3       	ldi	r26, 0x3A	; 58
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e3       	ldi	r30, 0x3A	; 58
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_SetPinDirection+0x8e>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_SetPinDirection+0x8a>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	b3 c0       	rjmp	.+358    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: SET_BIT(DDRB, u8PinIdCopy); break;
    10be:	a7 e3       	ldi	r26, 0x37	; 55
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e7 e3       	ldi	r30, 0x37	; 55
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_SetPinDirection+0xb6>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_SetPinDirection+0xb2>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	9f c0       	rjmp	.+318    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: SET_BIT(DDRC, u8PinIdCopy); break;
    10e6:	a4 e3       	ldi	r26, 0x34	; 52
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e4 e3       	ldi	r30, 0x34	; 52
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_SetPinDirection+0xde>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_SetPinDirection+0xda>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	8b c0       	rjmp	.+278    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: SET_BIT(DDRD, u8PinIdCopy); break;
    110e:	a1 e3       	ldi	r26, 0x31	; 49
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e1 e3       	ldi	r30, 0x31	; 49
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_SetPinDirection+0x106>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_SetPinDirection+0x102>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	77 c0       	rjmp	.+238    	; 0x1224 <DIO_SetPinDirection+0x1fe>
				}
			}
			else if(u8PinDirCopy == DIO_INPUT){
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 23       	and	r24, r24
    113a:	09 f0       	breq	.+2      	; 0x113e <DIO_SetPinDirection+0x118>
    113c:	73 c0       	rjmp	.+230    	; 0x1224 <DIO_SetPinDirection+0x1fe>
				switch(u8PortIdCopy){
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3d 83       	std	Y+5, r19	; 0x05
    1146:	2c 83       	std	Y+4, r18	; 0x04
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	59 f1       	breq	.+86     	; 0x11a8 <DIO_SetPinDirection+0x182>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <DIO_SetPinDirection+0x140>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f0       	breq	.+26     	; 0x117e <DIO_SetPinDirection+0x158>
    1164:	5f c0       	rjmp	.+190    	; 0x1224 <DIO_SetPinDirection+0x1fe>
    1166:	2c 81       	ldd	r18, Y+4	; 0x04
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	89 f1       	breq	.+98     	; 0x11d2 <DIO_SetPinDirection+0x1ac>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <DIO_SetPinDirection+0x156>
    117a:	40 c0       	rjmp	.+128    	; 0x11fc <DIO_SetPinDirection+0x1d6>
    117c:	53 c0       	rjmp	.+166    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTA: CLR_BIT(DDRA, u8PinIdCopy); break;
    117e:	aa e3       	ldi	r26, 0x3A	; 58
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_SetPinDirection+0x176>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_SetPinDirection+0x172>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	3e c0       	rjmp	.+124    	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: CLR_BIT(DDRB, u8PinIdCopy); break;
    11a8:	a7 e3       	ldi	r26, 0x37	; 55
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e7 e3       	ldi	r30, 0x37	; 55
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_SetPinDirection+0x1a0>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_SetPinDirection+0x19c>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	29 c0       	rjmp	.+82     	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: CLR_BIT(DDRC, u8PinIdCopy); break;
    11d2:	a4 e3       	ldi	r26, 0x34	; 52
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e4 e3       	ldi	r30, 0x34	; 52
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_SetPinDirection+0x1ca>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_SetPinDirection+0x1c6>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	14 c0       	rjmp	.+40     	; 0x1224 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: CLR_BIT(DDRD, u8PinIdCopy); break;
    11fc:	a1 e3       	ldi	r26, 0x31	; 49
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e1 e3       	ldi	r30, 0x31	; 49
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_SetPinDirection+0x1f4>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_SetPinDirection+0x1f0>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
				}
			}
		}
	}
}
    1224:	27 96       	adiw	r28, 0x07	; 7
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <DIO_SetPortValue>:

void DIO_SetPortValue(u8 u8PortIdCopy, u8 u8PortValCopy){
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <DIO_SetPortValue+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_SetPortValue+0x8>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
	if(u8PortIdCopy <= DIO_PORTD){
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	90 f5       	brcc	.+100    	; 0x12b0 <DIO_SetPortValue+0x7a>
		switch(u8PortIdCopy){
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3c 83       	std	Y+4, r19	; 0x04
    1254:	2b 83       	std	Y+3, r18	; 0x03
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	d1 f0       	breq	.+52     	; 0x1294 <DIO_SetPortValue+0x5e>
    1260:	2b 81       	ldd	r18, Y+3	; 0x03
    1262:	3c 81       	ldd	r19, Y+4	; 0x04
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	2c f4       	brge	.+10     	; 0x1274 <DIO_SetPortValue+0x3e>
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	61 f0       	breq	.+24     	; 0x128a <DIO_SetPortValue+0x54>
    1272:	1e c0       	rjmp	.+60     	; 0x12b0 <DIO_SetPortValue+0x7a>
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <DIO_SetPortValue+0x68>
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	83 30       	cpi	r24, 0x03	; 3
    1284:	91 05       	cpc	r25, r1
    1286:	81 f0       	breq	.+32     	; 0x12a8 <DIO_SetPortValue+0x72>
    1288:	13 c0       	rjmp	.+38     	; 0x12b0 <DIO_SetPortValue+0x7a>
			case DIO_PORTA: PORTA = u8PortValCopy; break;
    128a:	eb e3       	ldi	r30, 0x3B	; 59
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 83       	st	Z, r24
    1292:	0e c0       	rjmp	.+28     	; 0x12b0 <DIO_SetPortValue+0x7a>
			case DIO_PORTB: PORTB = u8PortValCopy; break;
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <DIO_SetPortValue+0x7a>
			case DIO_PORTC: PORTC = u8PortValCopy; break;
    129e:	e5 e3       	ldi	r30, 0x35	; 53
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <DIO_SetPortValue+0x7a>
			case DIO_PORTD: PORTD = u8PortValCopy; break;
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	80 83       	st	Z, r24
		}
	}
}
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <DIO_SetPinValue>:
void DIO_SetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinValCopy){
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	27 97       	sbiw	r28, 0x07	; 7
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
    12d6:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PortIdCopy <= DIO_PORTD){
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <DIO_SetPinValue+0x22>
    12de:	ee c0       	rjmp	.+476    	; 0x14bc <DIO_SetPinValue+0x1fe>
		if(u8PinIdCopy <= DIO_PIN7){
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <DIO_SetPinValue+0x2a>
    12e6:	ea c0       	rjmp	.+468    	; 0x14bc <DIO_SetPinValue+0x1fe>
			if(u8PinValCopy == DIO_HIGH){
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <DIO_SetPinValue+0x32>
    12ee:	6f c0       	rjmp	.+222    	; 0x13ce <DIO_SetPinValue+0x110>
				switch(u8PortIdCopy){
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3f 83       	std	Y+7, r19	; 0x07
    12f8:	2e 83       	std	Y+6, r18	; 0x06
    12fa:	8e 81       	ldd	r24, Y+6	; 0x06
    12fc:	9f 81       	ldd	r25, Y+7	; 0x07
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	49 f1       	breq	.+82     	; 0x1356 <DIO_SetPinValue+0x98>
    1304:	2e 81       	ldd	r18, Y+6	; 0x06
    1306:	3f 81       	ldd	r19, Y+7	; 0x07
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_SetPinValue+0x5a>
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <DIO_SetPinValue+0x70>
    1316:	d2 c0       	rjmp	.+420    	; 0x14bc <DIO_SetPinValue+0x1fe>
    1318:	2e 81       	ldd	r18, Y+6	; 0x06
    131a:	3f 81       	ldd	r19, Y+7	; 0x07
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	71 f1       	breq	.+92     	; 0x137e <DIO_SetPinValue+0xc0>
    1322:	8e 81       	ldd	r24, Y+6	; 0x06
    1324:	9f 81       	ldd	r25, Y+7	; 0x07
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	e9 f1       	breq	.+122    	; 0x13a6 <DIO_SetPinValue+0xe8>
    132c:	c7 c0       	rjmp	.+398    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTA: SET_BIT(PORTA, u8PinIdCopy); break;
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_SetPinValue+0x8e>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_SetPinValue+0x8a>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	b3 c0       	rjmp	.+358    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTB: SET_BIT(PORTB, u8PinIdCopy); break;
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_SetPinValue+0xb6>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_SetPinValue+0xb2>
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	9f c0       	rjmp	.+318    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTC: SET_BIT(PORTC, u8PinIdCopy); break;
    137e:	a5 e3       	ldi	r26, 0x35	; 53
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_SetPinValue+0xde>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_SetPinValue+0xda>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	8b c0       	rjmp	.+278    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTD: SET_BIT(PORTD, u8PinIdCopy); break;
    13a6:	a2 e3       	ldi	r26, 0x32	; 50
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e2 e3       	ldi	r30, 0x32	; 50
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_SetPinValue+0x106>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_SetPinValue+0x102>
    13c8:	84 2b       	or	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	77 c0       	rjmp	.+238    	; 0x14bc <DIO_SetPinValue+0x1fe>
				}
			}
			else if(u8PinValCopy == DIO_LOW){
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 23       	and	r24, r24
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <DIO_SetPinValue+0x118>
    13d4:	73 c0       	rjmp	.+230    	; 0x14bc <DIO_SetPinValue+0x1fe>
				switch(u8PortIdCopy){
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3d 83       	std	Y+5, r19	; 0x05
    13de:	2c 83       	std	Y+4, r18	; 0x04
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	59 f1       	breq	.+86     	; 0x1440 <DIO_SetPinValue+0x182>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <DIO_SetPinValue+0x140>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f0       	breq	.+26     	; 0x1416 <DIO_SetPinValue+0x158>
    13fc:	5f c0       	rjmp	.+190    	; 0x14bc <DIO_SetPinValue+0x1fe>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	89 f1       	breq	.+98     	; 0x146a <DIO_SetPinValue+0x1ac>
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <DIO_SetPinValue+0x156>
    1412:	40 c0       	rjmp	.+128    	; 0x1494 <DIO_SetPinValue+0x1d6>
    1414:	53 c0       	rjmp	.+166    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTA: CLR_BIT(PORTA, u8PinIdCopy); break;
    1416:	ab e3       	ldi	r26, 0x3B	; 59
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	eb e3       	ldi	r30, 0x3B	; 59
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_SetPinValue+0x176>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_SetPinValue+0x172>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	3e c0       	rjmp	.+124    	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTB: CLR_BIT(PORTB, u8PinIdCopy); break;
    1440:	a8 e3       	ldi	r26, 0x38	; 56
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e8 e3       	ldi	r30, 0x38	; 56
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_SetPinValue+0x1a0>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_SetPinValue+0x19c>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	29 c0       	rjmp	.+82     	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTC: CLR_BIT(PORTC, u8PinIdCopy); break;
    146a:	a5 e3       	ldi	r26, 0x35	; 53
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e3       	ldi	r30, 0x35	; 53
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_SetPinValue+0x1ca>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_SetPinValue+0x1c6>
    148c:	80 95       	com	r24
    148e:	84 23       	and	r24, r20
    1490:	8c 93       	st	X, r24
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <DIO_SetPinValue+0x1fe>
					case DIO_PORTD: CLR_BIT(PORTD, u8PinIdCopy); break;
    1494:	a2 e3       	ldi	r26, 0x32	; 50
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e2 e3       	ldi	r30, 0x32	; 50
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_SetPinValue+0x1f4>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_SetPinValue+0x1f0>
    14b6:	80 95       	com	r24
    14b8:	84 23       	and	r24, r20
    14ba:	8c 93       	st	X, r24
				}
			}
		}
	}
}
    14bc:	27 96       	adiw	r28, 0x07	; 7
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_GetPinVal>:

u8 DIO_GetPinVal(u8 u8PortIdCopy, u8 u8PinIdCopy){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_GetPinVal+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_GetPinVal+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ResultLocal;
	if(u8PortIdCopy <= DIO_PORTD){
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <DIO_GetPinVal+0x1a>
    14e6:	6b c0       	rjmp	.+214    	; 0x15be <DIO_GetPinVal+0xf0>
		if(u8PinIdCopy <= DIO_PIN7){
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <DIO_GetPinVal+0x22>
    14ee:	67 c0       	rjmp	.+206    	; 0x15be <DIO_GetPinVal+0xf0>
			switch(u8PortIdCopy){
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3d 83       	std	Y+5, r19	; 0x05
    14f8:	2c 83       	std	Y+4, r18	; 0x04
    14fa:	4c 81       	ldd	r20, Y+4	; 0x04
    14fc:	5d 81       	ldd	r21, Y+5	; 0x05
    14fe:	41 30       	cpi	r20, 0x01	; 1
    1500:	51 05       	cpc	r21, r1
    1502:	41 f1       	breq	.+80     	; 0x1554 <DIO_GetPinVal+0x86>
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	34 f4       	brge	.+12     	; 0x151a <DIO_GetPinVal+0x4c>
    150e:	2c 81       	ldd	r18, Y+4	; 0x04
    1510:	3d 81       	ldd	r19, Y+5	; 0x05
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	61 f0       	breq	.+24     	; 0x1530 <DIO_GetPinVal+0x62>
    1518:	52 c0       	rjmp	.+164    	; 0x15be <DIO_GetPinVal+0xf0>
    151a:	4c 81       	ldd	r20, Y+4	; 0x04
    151c:	5d 81       	ldd	r21, Y+5	; 0x05
    151e:	42 30       	cpi	r20, 0x02	; 2
    1520:	51 05       	cpc	r21, r1
    1522:	51 f1       	breq	.+84     	; 0x1578 <DIO_GetPinVal+0xaa>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	b9 f1       	breq	.+110    	; 0x159c <DIO_GetPinVal+0xce>
    152e:	47 c0       	rjmp	.+142    	; 0x15be <DIO_GetPinVal+0xf0>
				case DIO_PORTA: u8ResultLocal = GET_BIT(PINA, u8PinIdCopy); break;
    1530:	e9 e3       	ldi	r30, 0x39	; 57
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_GetPinVal+0x7a>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_GetPinVal+0x76>
    154c:	ca 01       	movw	r24, r20
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	35 c0       	rjmp	.+106    	; 0x15be <DIO_GetPinVal+0xf0>
				case DIO_PORTB: u8ResultLocal = GET_BIT(PINB, u8PinIdCopy); break;
    1554:	e6 e3       	ldi	r30, 0x36	; 54
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_GetPinVal+0x9e>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_GetPinVal+0x9a>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	23 c0       	rjmp	.+70     	; 0x15be <DIO_GetPinVal+0xf0>
				case DIO_PORTC: u8ResultLocal = GET_BIT(PINC, u8PinIdCopy); break;
    1578:	e3 e3       	ldi	r30, 0x33	; 51
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_GetPinVal+0xc2>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_GetPinVal+0xbe>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	11 c0       	rjmp	.+34     	; 0x15be <DIO_GetPinVal+0xf0>
				case DIO_PORTD: u8ResultLocal = GET_BIT(PIND, u8PinIdCopy); break;
    159c:	e0 e3       	ldi	r30, 0x30	; 48
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_GetPinVal+0xe6>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_GetPinVal+0xe2>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	return u8ResultLocal;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <KPD_void_Init>:
#include "CLCD.h"
#include "keypad.h"
#include <avr/io.h>
#include <util/delay.h>

void KPD_void_Init(void){
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62


	//set row pins direction
	DIO_SetPinDirection(KPD_R0_PORT, KPD_R0_PIN, DIO_INPUT);
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R1_PORT, KPD_R1_PIN, DIO_INPUT);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R2_PORT, KPD_R2_PIN, DIO_INPUT);
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R3_PORT, KPD_R3_PIN, DIO_INPUT);
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	//set row pins values, pull-up setup allows accessing the pins
	DIO_SetPinValue(KPD_R0_PORT, KPD_R0_PIN, DIO_HIGH);
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R1_PORT, KPD_R1_PIN, DIO_HIGH);
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R2_PORT, KPD_R2_PIN, DIO_HIGH);
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	62 e0       	ldi	r22, 0x02	; 2
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R3_PORT, KPD_R3_PIN, DIO_HIGH);
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	63 e0       	ldi	r22, 0x03	; 3
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>

	//set col pins direction
	DIO_SetPinDirection(KPD_C0_PORT, KPD_C0_PIN, DIO_OUTPUT);
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	64 e0       	ldi	r22, 0x04	; 4
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C1_PORT, KPD_C1_PIN, DIO_OUTPUT);
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C2_PORT, KPD_C2_PIN, DIO_OUTPUT);
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	66 e0       	ldi	r22, 0x06	; 6
    1640:	41 e0       	ldi	r20, 0x01	; 1
    1642:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C3_PORT, KPD_C3_PIN, DIO_OUTPUT);
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	67 e0       	ldi	r22, 0x07	; 7
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_SetPinDirection>
	//set col pins values
	DIO_SetPinValue(KPD_C0_PORT, KPD_C0_PIN, DIO_HIGH);
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C1_PORT, KPD_C1_PIN, DIO_HIGH);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	65 e0       	ldi	r22, 0x05	; 5
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C2_PORT, KPD_C2_PIN, DIO_HIGH);
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C3_PORT, KPD_C3_PIN, DIO_HIGH);
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	67 e0       	ldi	r22, 0x07	; 7
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <KPD_u8_GetPressedKey>:
u8 KPD_u8_GetPressedKey(void){
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	e7 97       	sbiw	r28, 0x37	; 55
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Row, Local_u8_Col;

	u8 KPD_Val[ROW_NUM][COL_NUM] = KPD_VALUES;
    1692:	ce 01       	movw	r24, r28
    1694:	42 96       	adiw	r24, 0x12	; 18
    1696:	9c ab       	std	Y+52, r25	; 0x34
    1698:	8b ab       	std	Y+51, r24	; 0x33
    169a:	ed e0       	ldi	r30, 0x0D	; 13
    169c:	f1 e0       	ldi	r31, 0x01	; 1
    169e:	fe ab       	std	Y+54, r31	; 0x36
    16a0:	ed ab       	std	Y+53, r30	; 0x35
    16a2:	f0 e1       	ldi	r31, 0x10	; 16
    16a4:	ff ab       	std	Y+55, r31	; 0x37
    16a6:	ed a9       	ldd	r30, Y+53	; 0x35
    16a8:	fe a9       	ldd	r31, Y+54	; 0x36
    16aa:	00 80       	ld	r0, Z
    16ac:	8d a9       	ldd	r24, Y+53	; 0x35
    16ae:	9e a9       	ldd	r25, Y+54	; 0x36
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	9e ab       	std	Y+54, r25	; 0x36
    16b4:	8d ab       	std	Y+53, r24	; 0x35
    16b6:	eb a9       	ldd	r30, Y+51	; 0x33
    16b8:	fc a9       	ldd	r31, Y+52	; 0x34
    16ba:	00 82       	st	Z, r0
    16bc:	8b a9       	ldd	r24, Y+51	; 0x33
    16be:	9c a9       	ldd	r25, Y+52	; 0x34
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	9c ab       	std	Y+52, r25	; 0x34
    16c4:	8b ab       	std	Y+51, r24	; 0x33
    16c6:	9f a9       	ldd	r25, Y+55	; 0x37
    16c8:	91 50       	subi	r25, 0x01	; 1
    16ca:	9f ab       	std	Y+55, r25	; 0x37
    16cc:	ef a9       	ldd	r30, Y+55	; 0x37
    16ce:	ee 23       	and	r30, r30
    16d0:	51 f7       	brne	.-44     	; 0x16a6 <KPD_u8_GetPressedKey+0x28>

	u8 KPD_u8_RowPortArr[ROW_NUM] = {KPD_R0_PORT, KPD_R1_PORT, KPD_R2_PORT, KPD_R3_PORT};
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	8a a3       	std	Y+34, r24	; 0x22
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	8b a3       	std	Y+35, r24	; 0x23
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	8c a3       	std	Y+36, r24	; 0x24
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	8d a3       	std	Y+37, r24	; 0x25
	u8 KPD_u8_RowPinArr[ROW_NUM] = {KPD_R0_PIN, KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN};
    16e2:	1e a2       	std	Y+38, r1	; 0x26
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8f a3       	std	Y+39, r24	; 0x27
    16e8:	82 e0       	ldi	r24, 0x02	; 2
    16ea:	88 a7       	std	Y+40, r24	; 0x28
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	89 a7       	std	Y+41, r24	; 0x29

	u8 KPD_u8_ColPortArr[COL_NUM] = {KPD_C0_PORT, KPD_C1_PORT, KPD_C2_PORT, KPD_C3_PORT};
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	8a a7       	std	Y+42, r24	; 0x2a
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	8b a7       	std	Y+43, r24	; 0x2b
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	8c a7       	std	Y+44, r24	; 0x2c
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	8d a7       	std	Y+45, r24	; 0x2d
	u8 KPD_u8_ColPinArr[COL_NUM] = {KPD_C0_PIN, KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN};
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	8e a7       	std	Y+46, r24	; 0x2e
    1704:	85 e0       	ldi	r24, 0x05	; 5
    1706:	8f a7       	std	Y+47, r24	; 0x2f
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	88 ab       	std	Y+48, r24	; 0x30
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	89 ab       	std	Y+49, r24	; 0x31

	for(Local_u8_Col = 0; Local_u8_Col < COL_NUM; Local_u8_Col++){
    1710:	18 8a       	std	Y+16, r1	; 0x10
    1712:	11 c1       	rjmp	.+546    	; 0x1936 <KPD_u8_GetPressedKey+0x2b8>
		//activate col
		DIO_SetPinValue( KPD_u8_ColPortArr[Local_u8_Col], KPD_u8_ColPinArr[Local_u8_Col], DIO_LOW);
    1714:	88 89       	ldd	r24, Y+16	; 0x10
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ce 01       	movw	r24, r28
    171c:	8a 96       	adiw	r24, 0x2a	; 42
    171e:	fc 01       	movw	r30, r24
    1720:	e2 0f       	add	r30, r18
    1722:	f3 1f       	adc	r31, r19
    1724:	40 81       	ld	r20, Z
    1726:	88 89       	ldd	r24, Y+16	; 0x10
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	ce 01       	movw	r24, r28
    172e:	8e 96       	adiw	r24, 0x2e	; 46
    1730:	fc 01       	movw	r30, r24
    1732:	e2 0f       	add	r30, r18
    1734:	f3 1f       	adc	r31, r19
    1736:	90 81       	ld	r25, Z
    1738:	84 2f       	mov	r24, r20
    173a:	69 2f       	mov	r22, r25
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>

		for(Local_u8_Row = 0; Local_u8_Row < ROW_NUM; Local_u8_Row++){
    1742:	19 8a       	std	Y+17, r1	; 0x11
    1744:	da c0       	rjmp	.+436    	; 0x18fa <KPD_u8_GetPressedKey+0x27c>

			u8 u8PinVal = DIO_GetPinVal(KPD_u8_RowPortArr[Local_u8_Row], KPD_u8_RowPinArr[Local_u8_Row]);
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	ce 01       	movw	r24, r28
    174e:	82 96       	adiw	r24, 0x22	; 34
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	40 81       	ld	r20, Z
    1758:	89 89       	ldd	r24, Y+17	; 0x11
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	ce 01       	movw	r24, r28
    1760:	86 96       	adiw	r24, 0x26	; 38
    1762:	fc 01       	movw	r30, r24
    1764:	e2 0f       	add	r30, r18
    1766:	f3 1f       	adc	r31, r19
    1768:	90 81       	ld	r25, Z
    176a:	84 2f       	mov	r24, r20
    176c:	69 2f       	mov	r22, r25
    176e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_GetPinVal>
    1772:	8f 87       	std	Y+15, r24	; 0x0f
			if(u8PinVal == KPD_PRESSED_KEY){
    1774:	8f 85       	ldd	r24, Y+15	; 0x0f
    1776:	88 23       	and	r24, r24
    1778:	09 f0       	breq	.+2      	; 0x177c <KPD_u8_GetPressedKey+0xfe>
    177a:	bc c0       	rjmp	.+376    	; 0x18f4 <KPD_u8_GetPressedKey+0x276>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a8 e4       	ldi	r26, 0x48	; 72
    1782:	b2 e4       	ldi	r27, 0x42	; 66
    1784:	8b 87       	std	Y+11, r24	; 0x0b
    1786:	9c 87       	std	Y+12, r25	; 0x0c
    1788:	ad 87       	std	Y+13, r26	; 0x0d
    178a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6b 85       	ldd	r22, Y+11	; 0x0b
    178e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1790:	8d 85       	ldd	r24, Y+13	; 0x0d
    1792:	9e 85       	ldd	r25, Y+14	; 0x0e
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8f 83       	std	Y+7, r24	; 0x07
    17a6:	98 87       	std	Y+8, r25	; 0x08
    17a8:	a9 87       	std	Y+9, r26	; 0x09
    17aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <KPD_u8_GetPressedKey+0x150>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9e 83       	std	Y+6, r25	; 0x06
    17ca:	8d 83       	std	Y+5, r24	; 0x05
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <KPD_u8_GetPressedKey+0x1ce>
	else if (__tmp > 65535)
    17ce:	6f 81       	ldd	r22, Y+7	; 0x07
    17d0:	78 85       	ldd	r23, Y+8	; 0x08
    17d2:	89 85       	ldd	r24, Y+9	; 0x09
    17d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <KPD_u8_GetPressedKey+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	0f c0       	rjmp	.+30     	; 0x182e <KPD_u8_GetPressedKey+0x1b0>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <KPD_u8_GetPressedKey+0x19e>
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <KPD_u8_GetPressedKey+0x192>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <KPD_u8_GetPressedKey+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	9a 81       	ldd	r25, Y+2	; 0x02
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <KPD_u8_GetPressedKey+0x1da>
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50); //to neglect bouncing effect
				//check if the key is still pressed
				u8PinVal = DIO_GetPinVal(KPD_u8_RowPortArr[Local_u8_Row], KPD_u8_RowPinArr[Local_u8_Row]);
    1860:	89 89       	ldd	r24, Y+17	; 0x11
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	82 96       	adiw	r24, 0x22	; 34
    186a:	fc 01       	movw	r30, r24
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	40 81       	ld	r20, Z
    1872:	89 89       	ldd	r24, Y+17	; 0x11
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	ce 01       	movw	r24, r28
    187a:	86 96       	adiw	r24, 0x26	; 38
    187c:	fc 01       	movw	r30, r24
    187e:	e2 0f       	add	r30, r18
    1880:	f3 1f       	adc	r31, r19
    1882:	90 81       	ld	r25, Z
    1884:	84 2f       	mov	r24, r20
    1886:	69 2f       	mov	r22, r25
    1888:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_GetPinVal>
    188c:	8f 87       	std	Y+15, r24	; 0x0f
				if(u8PinVal == KPD_PRESSED_KEY){
    188e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1890:	88 23       	and	r24, r24
    1892:	81 f5       	brne	.+96     	; 0x18f4 <KPD_u8_GetPressedKey+0x276>
    1894:	17 c0       	rjmp	.+46     	; 0x18c4 <KPD_u8_GetPressedKey+0x246>
					while(u8PinVal == KPD_PRESSED_KEY){
						u8PinVal = DIO_GetPinVal(KPD_u8_RowPortArr[Local_u8_Row], KPD_u8_RowPinArr[Local_u8_Row]);
    1896:	89 89       	ldd	r24, Y+17	; 0x11
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	ce 01       	movw	r24, r28
    189e:	82 96       	adiw	r24, 0x22	; 34
    18a0:	fc 01       	movw	r30, r24
    18a2:	e2 0f       	add	r30, r18
    18a4:	f3 1f       	adc	r31, r19
    18a6:	40 81       	ld	r20, Z
    18a8:	89 89       	ldd	r24, Y+17	; 0x11
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	ce 01       	movw	r24, r28
    18b0:	86 96       	adiw	r24, 0x26	; 38
    18b2:	fc 01       	movw	r30, r24
    18b4:	e2 0f       	add	r30, r18
    18b6:	f3 1f       	adc	r31, r19
    18b8:	90 81       	ld	r25, Z
    18ba:	84 2f       	mov	r24, r20
    18bc:	69 2f       	mov	r22, r25
    18be:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_GetPinVal>
    18c2:	8f 87       	std	Y+15, r24	; 0x0f
			if(u8PinVal == KPD_PRESSED_KEY){
				_delay_ms(50); //to neglect bouncing effect
				//check if the key is still pressed
				u8PinVal = DIO_GetPinVal(KPD_u8_RowPortArr[Local_u8_Row], KPD_u8_RowPinArr[Local_u8_Row]);
				if(u8PinVal == KPD_PRESSED_KEY){
					while(u8PinVal == KPD_PRESSED_KEY){
    18c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c6:	88 23       	and	r24, r24
    18c8:	31 f3       	breq	.-52     	; 0x1896 <KPD_u8_GetPressedKey+0x218>
						u8PinVal = DIO_GetPinVal(KPD_u8_RowPortArr[Local_u8_Row], KPD_u8_RowPinArr[Local_u8_Row]);
					}
					return KPD_Val[Local_u8_Row][Local_u8_Col];
    18ca:	89 89       	ldd	r24, Y+17	; 0x11
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	48 2f       	mov	r20, r24
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	22 0f       	add	r18, r18
    18d8:	33 1f       	adc	r19, r19
    18da:	22 0f       	add	r18, r18
    18dc:	33 1f       	adc	r19, r19
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	82 0f       	add	r24, r18
    18e4:	93 1f       	adc	r25, r19
    18e6:	84 0f       	add	r24, r20
    18e8:	95 1f       	adc	r25, r21
    18ea:	fc 01       	movw	r30, r24
    18ec:	71 96       	adiw	r30, 0x11	; 17
    18ee:	80 81       	ld	r24, Z
    18f0:	8a ab       	std	Y+50, r24	; 0x32
    18f2:	27 c0       	rjmp	.+78     	; 0x1942 <KPD_u8_GetPressedKey+0x2c4>

	for(Local_u8_Col = 0; Local_u8_Col < COL_NUM; Local_u8_Col++){
		//activate col
		DIO_SetPinValue( KPD_u8_ColPortArr[Local_u8_Col], KPD_u8_ColPinArr[Local_u8_Col], DIO_LOW);

		for(Local_u8_Row = 0; Local_u8_Row < ROW_NUM; Local_u8_Row++){
    18f4:	89 89       	ldd	r24, Y+17	; 0x11
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	89 8b       	std	Y+17, r24	; 0x11
    18fa:	89 89       	ldd	r24, Y+17	; 0x11
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <KPD_u8_GetPressedKey+0x284>
    1900:	22 cf       	rjmp	.-444    	; 0x1746 <KPD_u8_GetPressedKey+0xc8>
					return KPD_Val[Local_u8_Row][Local_u8_Col];
				}
			}
		}
		//deactivate col
		DIO_SetPinValue( KPD_u8_ColPortArr[Local_u8_Col], KPD_u8_ColPinArr[Local_u8_Col], DIO_HIGH);
    1902:	88 89       	ldd	r24, Y+16	; 0x10
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	ce 01       	movw	r24, r28
    190a:	8a 96       	adiw	r24, 0x2a	; 42
    190c:	fc 01       	movw	r30, r24
    190e:	e2 0f       	add	r30, r18
    1910:	f3 1f       	adc	r31, r19
    1912:	40 81       	ld	r20, Z
    1914:	88 89       	ldd	r24, Y+16	; 0x10
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	ce 01       	movw	r24, r28
    191c:	8e 96       	adiw	r24, 0x2e	; 46
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	90 81       	ld	r25, Z
    1926:	84 2f       	mov	r24, r20
    1928:	69 2f       	mov	r22, r25
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_SetPinValue>
	u8 KPD_u8_RowPinArr[ROW_NUM] = {KPD_R0_PIN, KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN};

	u8 KPD_u8_ColPortArr[COL_NUM] = {KPD_C0_PORT, KPD_C1_PORT, KPD_C2_PORT, KPD_C3_PORT};
	u8 KPD_u8_ColPinArr[COL_NUM] = {KPD_C0_PIN, KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN};

	for(Local_u8_Col = 0; Local_u8_Col < COL_NUM; Local_u8_Col++){
    1930:	88 89       	ldd	r24, Y+16	; 0x10
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	88 8b       	std	Y+16, r24	; 0x10
    1936:	88 89       	ldd	r24, Y+16	; 0x10
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	08 f4       	brcc	.+2      	; 0x193e <KPD_u8_GetPressedKey+0x2c0>
    193c:	eb ce       	rjmp	.-554    	; 0x1714 <KPD_u8_GetPressedKey+0x96>
		}
		//deactivate col
		DIO_SetPinValue( KPD_u8_ColPortArr[Local_u8_Col], KPD_u8_ColPinArr[Local_u8_Col], DIO_HIGH);

	}
	return KPD_NOT_PRESSED_KEY;
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	9a ab       	std	Y+50, r25	; 0x32
    1942:	8a a9       	ldd	r24, Y+50	; 0x32

}
    1944:	e7 96       	adiw	r28, 0x37	; 55
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <main>:
u8 CheckPassword(u8 * Password);
void GetNum(u8 * input, u8 inputMaxLen);
u16 StrToInt(u8 * PtrToStr);
void IntToStr(u16 Copy_Int, u8 * PtrToStr);

void main(void){
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	c5 5f       	subi	r28, 0xF5	; 245
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
	CLCD_void_Init();
    1970:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_void_Init>
	KPD_void_Init();
    1974:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <KPD_void_Init>
	u8 balance[] = "2000";
    1978:	9e 01       	movw	r18, r28
    197a:	22 5c       	subi	r18, 0xC2	; 194
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	c2 53       	subi	r28, 0x32	; 50
    1980:	df 4f       	sbci	r29, 0xFF	; 255
    1982:	39 83       	std	Y+1, r19	; 0x01
    1984:	28 83       	st	Y, r18
    1986:	ce 5c       	subi	r28, 0xCE	; 206
    1988:	d0 40       	sbci	r29, 0x00	; 0
    198a:	80 e6       	ldi	r24, 0x60	; 96
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	c0 53       	subi	r28, 0x30	; 48
    1990:	df 4f       	sbci	r29, 0xFF	; 255
    1992:	99 83       	std	Y+1, r25	; 0x01
    1994:	88 83       	st	Y, r24
    1996:	c0 5d       	subi	r28, 0xD0	; 208
    1998:	d0 40       	sbci	r29, 0x00	; 0
    199a:	95 e0       	ldi	r25, 0x05	; 5
    199c:	ce 52       	subi	r28, 0x2E	; 46
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	98 83       	st	Y, r25
    19a2:	c2 5d       	subi	r28, 0xD2	; 210
    19a4:	d0 40       	sbci	r29, 0x00	; 0
    19a6:	c0 53       	subi	r28, 0x30	; 48
    19a8:	df 4f       	sbci	r29, 0xFF	; 255
    19aa:	e8 81       	ld	r30, Y
    19ac:	f9 81       	ldd	r31, Y+1	; 0x01
    19ae:	c0 5d       	subi	r28, 0xD0	; 208
    19b0:	d0 40       	sbci	r29, 0x00	; 0
    19b2:	00 80       	ld	r0, Z
    19b4:	c0 53       	subi	r28, 0x30	; 48
    19b6:	df 4f       	sbci	r29, 0xFF	; 255
    19b8:	28 81       	ld	r18, Y
    19ba:	39 81       	ldd	r19, Y+1	; 0x01
    19bc:	c0 5d       	subi	r28, 0xD0	; 208
    19be:	d0 40       	sbci	r29, 0x00	; 0
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	c0 53       	subi	r28, 0x30	; 48
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	39 83       	std	Y+1, r19	; 0x01
    19ca:	28 83       	st	Y, r18
    19cc:	c0 5d       	subi	r28, 0xD0	; 208
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	c2 53       	subi	r28, 0x32	; 50
    19d2:	df 4f       	sbci	r29, 0xFF	; 255
    19d4:	e8 81       	ld	r30, Y
    19d6:	f9 81       	ldd	r31, Y+1	; 0x01
    19d8:	ce 5c       	subi	r28, 0xCE	; 206
    19da:	d0 40       	sbci	r29, 0x00	; 0
    19dc:	00 82       	st	Z, r0
    19de:	c2 53       	subi	r28, 0x32	; 50
    19e0:	df 4f       	sbci	r29, 0xFF	; 255
    19e2:	28 81       	ld	r18, Y
    19e4:	39 81       	ldd	r19, Y+1	; 0x01
    19e6:	ce 5c       	subi	r28, 0xCE	; 206
    19e8:	d0 40       	sbci	r29, 0x00	; 0
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	c2 53       	subi	r28, 0x32	; 50
    19f0:	df 4f       	sbci	r29, 0xFF	; 255
    19f2:	39 83       	std	Y+1, r19	; 0x01
    19f4:	28 83       	st	Y, r18
    19f6:	ce 5c       	subi	r28, 0xCE	; 206
    19f8:	d0 40       	sbci	r29, 0x00	; 0
    19fa:	ce 52       	subi	r28, 0x2E	; 46
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	38 81       	ld	r19, Y
    1a00:	c2 5d       	subi	r28, 0xD2	; 210
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	31 50       	subi	r19, 0x01	; 1
    1a06:	ce 52       	subi	r28, 0x2E	; 46
    1a08:	df 4f       	sbci	r29, 0xFF	; 255
    1a0a:	38 83       	st	Y, r19
    1a0c:	c2 5d       	subi	r28, 0xD2	; 210
    1a0e:	d0 40       	sbci	r29, 0x00	; 0
    1a10:	ce 52       	subi	r28, 0x2E	; 46
    1a12:	df 4f       	sbci	r29, 0xFF	; 255
    1a14:	88 81       	ld	r24, Y
    1a16:	c2 5d       	subi	r28, 0xD2	; 210
    1a18:	d0 40       	sbci	r29, 0x00	; 0
    1a1a:	88 23       	and	r24, r24
    1a1c:	21 f6       	brne	.-120    	; 0x19a6 <main+0x50>
	u8 Password[] = "1234";
    1a1e:	ce 01       	movw	r24, r28
    1a20:	8d 5b       	subi	r24, 0xBD	; 189
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	cd 52       	subi	r28, 0x2D	; 45
    1a26:	df 4f       	sbci	r29, 0xFF	; 255
    1a28:	99 83       	std	Y+1, r25	; 0x01
    1a2a:	88 83       	st	Y, r24
    1a2c:	c3 5d       	subi	r28, 0xD3	; 211
    1a2e:	d0 40       	sbci	r29, 0x00	; 0
    1a30:	e5 e6       	ldi	r30, 0x65	; 101
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	cb 52       	subi	r28, 0x2B	; 43
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	f9 83       	std	Y+1, r31	; 0x01
    1a3a:	e8 83       	st	Y, r30
    1a3c:	c5 5d       	subi	r28, 0xD5	; 213
    1a3e:	d0 40       	sbci	r29, 0x00	; 0
    1a40:	f5 e0       	ldi	r31, 0x05	; 5
    1a42:	c9 52       	subi	r28, 0x29	; 41
    1a44:	df 4f       	sbci	r29, 0xFF	; 255
    1a46:	f8 83       	st	Y, r31
    1a48:	c7 5d       	subi	r28, 0xD7	; 215
    1a4a:	d0 40       	sbci	r29, 0x00	; 0
    1a4c:	cb 52       	subi	r28, 0x2B	; 43
    1a4e:	df 4f       	sbci	r29, 0xFF	; 255
    1a50:	e8 81       	ld	r30, Y
    1a52:	f9 81       	ldd	r31, Y+1	; 0x01
    1a54:	c5 5d       	subi	r28, 0xD5	; 213
    1a56:	d0 40       	sbci	r29, 0x00	; 0
    1a58:	00 80       	ld	r0, Z
    1a5a:	cb 52       	subi	r28, 0x2B	; 43
    1a5c:	df 4f       	sbci	r29, 0xFF	; 255
    1a5e:	28 81       	ld	r18, Y
    1a60:	39 81       	ldd	r19, Y+1	; 0x01
    1a62:	c5 5d       	subi	r28, 0xD5	; 213
    1a64:	d0 40       	sbci	r29, 0x00	; 0
    1a66:	2f 5f       	subi	r18, 0xFF	; 255
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	cb 52       	subi	r28, 0x2B	; 43
    1a6c:	df 4f       	sbci	r29, 0xFF	; 255
    1a6e:	39 83       	std	Y+1, r19	; 0x01
    1a70:	28 83       	st	Y, r18
    1a72:	c5 5d       	subi	r28, 0xD5	; 213
    1a74:	d0 40       	sbci	r29, 0x00	; 0
    1a76:	cd 52       	subi	r28, 0x2D	; 45
    1a78:	df 4f       	sbci	r29, 0xFF	; 255
    1a7a:	e8 81       	ld	r30, Y
    1a7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a7e:	c3 5d       	subi	r28, 0xD3	; 211
    1a80:	d0 40       	sbci	r29, 0x00	; 0
    1a82:	00 82       	st	Z, r0
    1a84:	cd 52       	subi	r28, 0x2D	; 45
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	28 81       	ld	r18, Y
    1a8a:	39 81       	ldd	r19, Y+1	; 0x01
    1a8c:	c3 5d       	subi	r28, 0xD3	; 211
    1a8e:	d0 40       	sbci	r29, 0x00	; 0
    1a90:	2f 5f       	subi	r18, 0xFF	; 255
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	cd 52       	subi	r28, 0x2D	; 45
    1a96:	df 4f       	sbci	r29, 0xFF	; 255
    1a98:	39 83       	std	Y+1, r19	; 0x01
    1a9a:	28 83       	st	Y, r18
    1a9c:	c3 5d       	subi	r28, 0xD3	; 211
    1a9e:	d0 40       	sbci	r29, 0x00	; 0
    1aa0:	c9 52       	subi	r28, 0x29	; 41
    1aa2:	df 4f       	sbci	r29, 0xFF	; 255
    1aa4:	38 81       	ld	r19, Y
    1aa6:	c7 5d       	subi	r28, 0xD7	; 215
    1aa8:	d0 40       	sbci	r29, 0x00	; 0
    1aaa:	31 50       	subi	r19, 0x01	; 1
    1aac:	c9 52       	subi	r28, 0x29	; 41
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	38 83       	st	Y, r19
    1ab2:	c7 5d       	subi	r28, 0xD7	; 215
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	c9 52       	subi	r28, 0x29	; 41
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	88 81       	ld	r24, Y
    1abc:	c7 5d       	subi	r28, 0xD7	; 215
    1abe:	d0 40       	sbci	r29, 0x00	; 0
    1ac0:	88 23       	and	r24, r24
    1ac2:	21 f6       	brne	.-120    	; 0x1a4c <main+0xf6>
	u8 WelcomeStr[] = "Welcome enter your password:";
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	88 5b       	subi	r24, 0xB8	; 184
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	c8 52       	subi	r28, 0x28	; 40
    1acc:	df 4f       	sbci	r29, 0xFF	; 255
    1ace:	99 83       	std	Y+1, r25	; 0x01
    1ad0:	88 83       	st	Y, r24
    1ad2:	c8 5d       	subi	r28, 0xD8	; 216
    1ad4:	d0 40       	sbci	r29, 0x00	; 0
    1ad6:	ea e6       	ldi	r30, 0x6A	; 106
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	c6 52       	subi	r28, 0x26	; 38
    1adc:	df 4f       	sbci	r29, 0xFF	; 255
    1ade:	f9 83       	std	Y+1, r31	; 0x01
    1ae0:	e8 83       	st	Y, r30
    1ae2:	ca 5d       	subi	r28, 0xDA	; 218
    1ae4:	d0 40       	sbci	r29, 0x00	; 0
    1ae6:	fd e1       	ldi	r31, 0x1D	; 29
    1ae8:	c4 52       	subi	r28, 0x24	; 36
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	f8 83       	st	Y, r31
    1aee:	cc 5d       	subi	r28, 0xDC	; 220
    1af0:	d0 40       	sbci	r29, 0x00	; 0
    1af2:	c6 52       	subi	r28, 0x26	; 38
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	ca 5d       	subi	r28, 0xDA	; 218
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	00 80       	ld	r0, Z
    1b00:	c6 52       	subi	r28, 0x26	; 38
    1b02:	df 4f       	sbci	r29, 0xFF	; 255
    1b04:	28 81       	ld	r18, Y
    1b06:	39 81       	ldd	r19, Y+1	; 0x01
    1b08:	ca 5d       	subi	r28, 0xDA	; 218
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	2f 5f       	subi	r18, 0xFF	; 255
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	c6 52       	subi	r28, 0x26	; 38
    1b12:	df 4f       	sbci	r29, 0xFF	; 255
    1b14:	39 83       	std	Y+1, r19	; 0x01
    1b16:	28 83       	st	Y, r18
    1b18:	ca 5d       	subi	r28, 0xDA	; 218
    1b1a:	d0 40       	sbci	r29, 0x00	; 0
    1b1c:	c8 52       	subi	r28, 0x28	; 40
    1b1e:	df 4f       	sbci	r29, 0xFF	; 255
    1b20:	e8 81       	ld	r30, Y
    1b22:	f9 81       	ldd	r31, Y+1	; 0x01
    1b24:	c8 5d       	subi	r28, 0xD8	; 216
    1b26:	d0 40       	sbci	r29, 0x00	; 0
    1b28:	00 82       	st	Z, r0
    1b2a:	c8 52       	subi	r28, 0x28	; 40
    1b2c:	df 4f       	sbci	r29, 0xFF	; 255
    1b2e:	28 81       	ld	r18, Y
    1b30:	39 81       	ldd	r19, Y+1	; 0x01
    1b32:	c8 5d       	subi	r28, 0xD8	; 216
    1b34:	d0 40       	sbci	r29, 0x00	; 0
    1b36:	2f 5f       	subi	r18, 0xFF	; 255
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	c8 52       	subi	r28, 0x28	; 40
    1b3c:	df 4f       	sbci	r29, 0xFF	; 255
    1b3e:	39 83       	std	Y+1, r19	; 0x01
    1b40:	28 83       	st	Y, r18
    1b42:	c8 5d       	subi	r28, 0xD8	; 216
    1b44:	d0 40       	sbci	r29, 0x00	; 0
    1b46:	c4 52       	subi	r28, 0x24	; 36
    1b48:	df 4f       	sbci	r29, 0xFF	; 255
    1b4a:	38 81       	ld	r19, Y
    1b4c:	cc 5d       	subi	r28, 0xDC	; 220
    1b4e:	d0 40       	sbci	r29, 0x00	; 0
    1b50:	31 50       	subi	r19, 0x01	; 1
    1b52:	c4 52       	subi	r28, 0x24	; 36
    1b54:	df 4f       	sbci	r29, 0xFF	; 255
    1b56:	38 83       	st	Y, r19
    1b58:	cc 5d       	subi	r28, 0xDC	; 220
    1b5a:	d0 40       	sbci	r29, 0x00	; 0
    1b5c:	c4 52       	subi	r28, 0x24	; 36
    1b5e:	df 4f       	sbci	r29, 0xFF	; 255
    1b60:	88 81       	ld	r24, Y
    1b62:	cc 5d       	subi	r28, 0xDC	; 220
    1b64:	d0 40       	sbci	r29, 0x00	; 0
    1b66:	88 23       	and	r24, r24
    1b68:	21 f6       	brne	.-120    	; 0x1af2 <main+0x19c>
	u8 OptionsStr[] = "1-balance 2-deposit 3-withdraw";
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	8b 59       	subi	r24, 0x9B	; 155
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	c3 52       	subi	r28, 0x23	; 35
    1b72:	df 4f       	sbci	r29, 0xFF	; 255
    1b74:	99 83       	std	Y+1, r25	; 0x01
    1b76:	88 83       	st	Y, r24
    1b78:	cd 5d       	subi	r28, 0xDD	; 221
    1b7a:	d0 40       	sbci	r29, 0x00	; 0
    1b7c:	e7 e8       	ldi	r30, 0x87	; 135
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	c1 52       	subi	r28, 0x21	; 33
    1b82:	df 4f       	sbci	r29, 0xFF	; 255
    1b84:	f9 83       	std	Y+1, r31	; 0x01
    1b86:	e8 83       	st	Y, r30
    1b88:	cf 5d       	subi	r28, 0xDF	; 223
    1b8a:	d0 40       	sbci	r29, 0x00	; 0
    1b8c:	ff e1       	ldi	r31, 0x1F	; 31
    1b8e:	cf 51       	subi	r28, 0x1F	; 31
    1b90:	df 4f       	sbci	r29, 0xFF	; 255
    1b92:	f8 83       	st	Y, r31
    1b94:	c1 5e       	subi	r28, 0xE1	; 225
    1b96:	d0 40       	sbci	r29, 0x00	; 0
    1b98:	c1 52       	subi	r28, 0x21	; 33
    1b9a:	df 4f       	sbci	r29, 0xFF	; 255
    1b9c:	e8 81       	ld	r30, Y
    1b9e:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba0:	cf 5d       	subi	r28, 0xDF	; 223
    1ba2:	d0 40       	sbci	r29, 0x00	; 0
    1ba4:	00 80       	ld	r0, Z
    1ba6:	c1 52       	subi	r28, 0x21	; 33
    1ba8:	df 4f       	sbci	r29, 0xFF	; 255
    1baa:	28 81       	ld	r18, Y
    1bac:	39 81       	ldd	r19, Y+1	; 0x01
    1bae:	cf 5d       	subi	r28, 0xDF	; 223
    1bb0:	d0 40       	sbci	r29, 0x00	; 0
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	c1 52       	subi	r28, 0x21	; 33
    1bb8:	df 4f       	sbci	r29, 0xFF	; 255
    1bba:	39 83       	std	Y+1, r19	; 0x01
    1bbc:	28 83       	st	Y, r18
    1bbe:	cf 5d       	subi	r28, 0xDF	; 223
    1bc0:	d0 40       	sbci	r29, 0x00	; 0
    1bc2:	c3 52       	subi	r28, 0x23	; 35
    1bc4:	df 4f       	sbci	r29, 0xFF	; 255
    1bc6:	e8 81       	ld	r30, Y
    1bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bca:	cd 5d       	subi	r28, 0xDD	; 221
    1bcc:	d0 40       	sbci	r29, 0x00	; 0
    1bce:	00 82       	st	Z, r0
    1bd0:	c3 52       	subi	r28, 0x23	; 35
    1bd2:	df 4f       	sbci	r29, 0xFF	; 255
    1bd4:	28 81       	ld	r18, Y
    1bd6:	39 81       	ldd	r19, Y+1	; 0x01
    1bd8:	cd 5d       	subi	r28, 0xDD	; 221
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	c3 52       	subi	r28, 0x23	; 35
    1be2:	df 4f       	sbci	r29, 0xFF	; 255
    1be4:	39 83       	std	Y+1, r19	; 0x01
    1be6:	28 83       	st	Y, r18
    1be8:	cd 5d       	subi	r28, 0xDD	; 221
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	cf 51       	subi	r28, 0x1F	; 31
    1bee:	df 4f       	sbci	r29, 0xFF	; 255
    1bf0:	38 81       	ld	r19, Y
    1bf2:	c1 5e       	subi	r28, 0xE1	; 225
    1bf4:	d0 40       	sbci	r29, 0x00	; 0
    1bf6:	31 50       	subi	r19, 0x01	; 1
    1bf8:	cf 51       	subi	r28, 0x1F	; 31
    1bfa:	df 4f       	sbci	r29, 0xFF	; 255
    1bfc:	38 83       	st	Y, r19
    1bfe:	c1 5e       	subi	r28, 0xE1	; 225
    1c00:	d0 40       	sbci	r29, 0x00	; 0
    1c02:	cf 51       	subi	r28, 0x1F	; 31
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	88 81       	ld	r24, Y
    1c08:	c1 5e       	subi	r28, 0xE1	; 225
    1c0a:	d0 40       	sbci	r29, 0x00	; 0
    1c0c:	88 23       	and	r24, r24
    1c0e:	21 f6       	brne	.-120    	; 0x1b98 <main+0x242>
	u8 BalanceStr[] = "your current balance is: ";
    1c10:	ce 01       	movw	r24, r28
    1c12:	8c 57       	subi	r24, 0x7C	; 124
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	ce 51       	subi	r28, 0x1E	; 30
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	99 83       	std	Y+1, r25	; 0x01
    1c1c:	88 83       	st	Y, r24
    1c1e:	c2 5e       	subi	r28, 0xE2	; 226
    1c20:	d0 40       	sbci	r29, 0x00	; 0
    1c22:	e6 ea       	ldi	r30, 0xA6	; 166
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	cc 51       	subi	r28, 0x1C	; 28
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	f9 83       	std	Y+1, r31	; 0x01
    1c2c:	e8 83       	st	Y, r30
    1c2e:	c4 5e       	subi	r28, 0xE4	; 228
    1c30:	d0 40       	sbci	r29, 0x00	; 0
    1c32:	fa e1       	ldi	r31, 0x1A	; 26
    1c34:	ca 51       	subi	r28, 0x1A	; 26
    1c36:	df 4f       	sbci	r29, 0xFF	; 255
    1c38:	f8 83       	st	Y, r31
    1c3a:	c6 5e       	subi	r28, 0xE6	; 230
    1c3c:	d0 40       	sbci	r29, 0x00	; 0
    1c3e:	cc 51       	subi	r28, 0x1C	; 28
    1c40:	df 4f       	sbci	r29, 0xFF	; 255
    1c42:	e8 81       	ld	r30, Y
    1c44:	f9 81       	ldd	r31, Y+1	; 0x01
    1c46:	c4 5e       	subi	r28, 0xE4	; 228
    1c48:	d0 40       	sbci	r29, 0x00	; 0
    1c4a:	00 80       	ld	r0, Z
    1c4c:	cc 51       	subi	r28, 0x1C	; 28
    1c4e:	df 4f       	sbci	r29, 0xFF	; 255
    1c50:	28 81       	ld	r18, Y
    1c52:	39 81       	ldd	r19, Y+1	; 0x01
    1c54:	c4 5e       	subi	r28, 0xE4	; 228
    1c56:	d0 40       	sbci	r29, 0x00	; 0
    1c58:	2f 5f       	subi	r18, 0xFF	; 255
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	cc 51       	subi	r28, 0x1C	; 28
    1c5e:	df 4f       	sbci	r29, 0xFF	; 255
    1c60:	39 83       	std	Y+1, r19	; 0x01
    1c62:	28 83       	st	Y, r18
    1c64:	c4 5e       	subi	r28, 0xE4	; 228
    1c66:	d0 40       	sbci	r29, 0x00	; 0
    1c68:	ce 51       	subi	r28, 0x1E	; 30
    1c6a:	df 4f       	sbci	r29, 0xFF	; 255
    1c6c:	e8 81       	ld	r30, Y
    1c6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c70:	c2 5e       	subi	r28, 0xE2	; 226
    1c72:	d0 40       	sbci	r29, 0x00	; 0
    1c74:	00 82       	st	Z, r0
    1c76:	ce 51       	subi	r28, 0x1E	; 30
    1c78:	df 4f       	sbci	r29, 0xFF	; 255
    1c7a:	28 81       	ld	r18, Y
    1c7c:	39 81       	ldd	r19, Y+1	; 0x01
    1c7e:	c2 5e       	subi	r28, 0xE2	; 226
    1c80:	d0 40       	sbci	r29, 0x00	; 0
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	ce 51       	subi	r28, 0x1E	; 30
    1c88:	df 4f       	sbci	r29, 0xFF	; 255
    1c8a:	39 83       	std	Y+1, r19	; 0x01
    1c8c:	28 83       	st	Y, r18
    1c8e:	c2 5e       	subi	r28, 0xE2	; 226
    1c90:	d0 40       	sbci	r29, 0x00	; 0
    1c92:	ca 51       	subi	r28, 0x1A	; 26
    1c94:	df 4f       	sbci	r29, 0xFF	; 255
    1c96:	38 81       	ld	r19, Y
    1c98:	c6 5e       	subi	r28, 0xE6	; 230
    1c9a:	d0 40       	sbci	r29, 0x00	; 0
    1c9c:	31 50       	subi	r19, 0x01	; 1
    1c9e:	ca 51       	subi	r28, 0x1A	; 26
    1ca0:	df 4f       	sbci	r29, 0xFF	; 255
    1ca2:	38 83       	st	Y, r19
    1ca4:	c6 5e       	subi	r28, 0xE6	; 230
    1ca6:	d0 40       	sbci	r29, 0x00	; 0
    1ca8:	ca 51       	subi	r28, 0x1A	; 26
    1caa:	df 4f       	sbci	r29, 0xFF	; 255
    1cac:	88 81       	ld	r24, Y
    1cae:	c6 5e       	subi	r28, 0xE6	; 230
    1cb0:	d0 40       	sbci	r29, 0x00	; 0
    1cb2:	88 23       	and	r24, r24
    1cb4:	21 f6       	brne	.-120    	; 0x1c3e <main+0x2e8>
	u8 DepositStr[] = "deposit: ";
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	82 56       	subi	r24, 0x62	; 98
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	c9 51       	subi	r28, 0x19	; 25
    1cbe:	df 4f       	sbci	r29, 0xFF	; 255
    1cc0:	99 83       	std	Y+1, r25	; 0x01
    1cc2:	88 83       	st	Y, r24
    1cc4:	c7 5e       	subi	r28, 0xE7	; 231
    1cc6:	d0 40       	sbci	r29, 0x00	; 0
    1cc8:	e0 ec       	ldi	r30, 0xC0	; 192
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	c7 51       	subi	r28, 0x17	; 23
    1cce:	df 4f       	sbci	r29, 0xFF	; 255
    1cd0:	f9 83       	std	Y+1, r31	; 0x01
    1cd2:	e8 83       	st	Y, r30
    1cd4:	c9 5e       	subi	r28, 0xE9	; 233
    1cd6:	d0 40       	sbci	r29, 0x00	; 0
    1cd8:	fa e0       	ldi	r31, 0x0A	; 10
    1cda:	c5 51       	subi	r28, 0x15	; 21
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	f8 83       	st	Y, r31
    1ce0:	cb 5e       	subi	r28, 0xEB	; 235
    1ce2:	d0 40       	sbci	r29, 0x00	; 0
    1ce4:	c7 51       	subi	r28, 0x17	; 23
    1ce6:	df 4f       	sbci	r29, 0xFF	; 255
    1ce8:	e8 81       	ld	r30, Y
    1cea:	f9 81       	ldd	r31, Y+1	; 0x01
    1cec:	c9 5e       	subi	r28, 0xE9	; 233
    1cee:	d0 40       	sbci	r29, 0x00	; 0
    1cf0:	00 80       	ld	r0, Z
    1cf2:	c7 51       	subi	r28, 0x17	; 23
    1cf4:	df 4f       	sbci	r29, 0xFF	; 255
    1cf6:	28 81       	ld	r18, Y
    1cf8:	39 81       	ldd	r19, Y+1	; 0x01
    1cfa:	c9 5e       	subi	r28, 0xE9	; 233
    1cfc:	d0 40       	sbci	r29, 0x00	; 0
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	c7 51       	subi	r28, 0x17	; 23
    1d04:	df 4f       	sbci	r29, 0xFF	; 255
    1d06:	39 83       	std	Y+1, r19	; 0x01
    1d08:	28 83       	st	Y, r18
    1d0a:	c9 5e       	subi	r28, 0xE9	; 233
    1d0c:	d0 40       	sbci	r29, 0x00	; 0
    1d0e:	c9 51       	subi	r28, 0x19	; 25
    1d10:	df 4f       	sbci	r29, 0xFF	; 255
    1d12:	e8 81       	ld	r30, Y
    1d14:	f9 81       	ldd	r31, Y+1	; 0x01
    1d16:	c7 5e       	subi	r28, 0xE7	; 231
    1d18:	d0 40       	sbci	r29, 0x00	; 0
    1d1a:	00 82       	st	Z, r0
    1d1c:	c9 51       	subi	r28, 0x19	; 25
    1d1e:	df 4f       	sbci	r29, 0xFF	; 255
    1d20:	28 81       	ld	r18, Y
    1d22:	39 81       	ldd	r19, Y+1	; 0x01
    1d24:	c7 5e       	subi	r28, 0xE7	; 231
    1d26:	d0 40       	sbci	r29, 0x00	; 0
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	c9 51       	subi	r28, 0x19	; 25
    1d2e:	df 4f       	sbci	r29, 0xFF	; 255
    1d30:	39 83       	std	Y+1, r19	; 0x01
    1d32:	28 83       	st	Y, r18
    1d34:	c7 5e       	subi	r28, 0xE7	; 231
    1d36:	d0 40       	sbci	r29, 0x00	; 0
    1d38:	c5 51       	subi	r28, 0x15	; 21
    1d3a:	df 4f       	sbci	r29, 0xFF	; 255
    1d3c:	38 81       	ld	r19, Y
    1d3e:	cb 5e       	subi	r28, 0xEB	; 235
    1d40:	d0 40       	sbci	r29, 0x00	; 0
    1d42:	31 50       	subi	r19, 0x01	; 1
    1d44:	c5 51       	subi	r28, 0x15	; 21
    1d46:	df 4f       	sbci	r29, 0xFF	; 255
    1d48:	38 83       	st	Y, r19
    1d4a:	cb 5e       	subi	r28, 0xEB	; 235
    1d4c:	d0 40       	sbci	r29, 0x00	; 0
    1d4e:	c5 51       	subi	r28, 0x15	; 21
    1d50:	df 4f       	sbci	r29, 0xFF	; 255
    1d52:	88 81       	ld	r24, Y
    1d54:	cb 5e       	subi	r28, 0xEB	; 235
    1d56:	d0 40       	sbci	r29, 0x00	; 0
    1d58:	88 23       	and	r24, r24
    1d5a:	21 f6       	brne	.-120    	; 0x1ce4 <main+0x38e>
	u8 WithdrawStr[] = "withdraw: ";
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	88 55       	subi	r24, 0x58	; 88
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	c4 51       	subi	r28, 0x14	; 20
    1d64:	df 4f       	sbci	r29, 0xFF	; 255
    1d66:	99 83       	std	Y+1, r25	; 0x01
    1d68:	88 83       	st	Y, r24
    1d6a:	cc 5e       	subi	r28, 0xEC	; 236
    1d6c:	d0 40       	sbci	r29, 0x00	; 0
    1d6e:	ea ec       	ldi	r30, 0xCA	; 202
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	c2 51       	subi	r28, 0x12	; 18
    1d74:	df 4f       	sbci	r29, 0xFF	; 255
    1d76:	f9 83       	std	Y+1, r31	; 0x01
    1d78:	e8 83       	st	Y, r30
    1d7a:	ce 5e       	subi	r28, 0xEE	; 238
    1d7c:	d0 40       	sbci	r29, 0x00	; 0
    1d7e:	fb e0       	ldi	r31, 0x0B	; 11
    1d80:	c0 51       	subi	r28, 0x10	; 16
    1d82:	df 4f       	sbci	r29, 0xFF	; 255
    1d84:	f8 83       	st	Y, r31
    1d86:	c0 5f       	subi	r28, 0xF0	; 240
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	c2 51       	subi	r28, 0x12	; 18
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	e8 81       	ld	r30, Y
    1d90:	f9 81       	ldd	r31, Y+1	; 0x01
    1d92:	ce 5e       	subi	r28, 0xEE	; 238
    1d94:	d0 40       	sbci	r29, 0x00	; 0
    1d96:	00 80       	ld	r0, Z
    1d98:	c2 51       	subi	r28, 0x12	; 18
    1d9a:	df 4f       	sbci	r29, 0xFF	; 255
    1d9c:	28 81       	ld	r18, Y
    1d9e:	39 81       	ldd	r19, Y+1	; 0x01
    1da0:	ce 5e       	subi	r28, 0xEE	; 238
    1da2:	d0 40       	sbci	r29, 0x00	; 0
    1da4:	2f 5f       	subi	r18, 0xFF	; 255
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	c2 51       	subi	r28, 0x12	; 18
    1daa:	df 4f       	sbci	r29, 0xFF	; 255
    1dac:	39 83       	std	Y+1, r19	; 0x01
    1dae:	28 83       	st	Y, r18
    1db0:	ce 5e       	subi	r28, 0xEE	; 238
    1db2:	d0 40       	sbci	r29, 0x00	; 0
    1db4:	c4 51       	subi	r28, 0x14	; 20
    1db6:	df 4f       	sbci	r29, 0xFF	; 255
    1db8:	e8 81       	ld	r30, Y
    1dba:	f9 81       	ldd	r31, Y+1	; 0x01
    1dbc:	cc 5e       	subi	r28, 0xEC	; 236
    1dbe:	d0 40       	sbci	r29, 0x00	; 0
    1dc0:	00 82       	st	Z, r0
    1dc2:	c4 51       	subi	r28, 0x14	; 20
    1dc4:	df 4f       	sbci	r29, 0xFF	; 255
    1dc6:	28 81       	ld	r18, Y
    1dc8:	39 81       	ldd	r19, Y+1	; 0x01
    1dca:	cc 5e       	subi	r28, 0xEC	; 236
    1dcc:	d0 40       	sbci	r29, 0x00	; 0
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd2:	c4 51       	subi	r28, 0x14	; 20
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	39 83       	std	Y+1, r19	; 0x01
    1dd8:	28 83       	st	Y, r18
    1dda:	cc 5e       	subi	r28, 0xEC	; 236
    1ddc:	d0 40       	sbci	r29, 0x00	; 0
    1dde:	c0 51       	subi	r28, 0x10	; 16
    1de0:	df 4f       	sbci	r29, 0xFF	; 255
    1de2:	38 81       	ld	r19, Y
    1de4:	c0 5f       	subi	r28, 0xF0	; 240
    1de6:	d0 40       	sbci	r29, 0x00	; 0
    1de8:	31 50       	subi	r19, 0x01	; 1
    1dea:	c0 51       	subi	r28, 0x10	; 16
    1dec:	df 4f       	sbci	r29, 0xFF	; 255
    1dee:	38 83       	st	Y, r19
    1df0:	c0 5f       	subi	r28, 0xF0	; 240
    1df2:	d0 40       	sbci	r29, 0x00	; 0
    1df4:	c0 51       	subi	r28, 0x10	; 16
    1df6:	df 4f       	sbci	r29, 0xFF	; 255
    1df8:	88 81       	ld	r24, Y
    1dfa:	c0 5f       	subi	r28, 0xF0	; 240
    1dfc:	d0 40       	sbci	r29, 0x00	; 0
    1dfe:	88 23       	and	r24, r24
    1e00:	21 f6       	brne	.-120    	; 0x1d8a <main+0x434>
	u8 ErrMsg[] = "not enough balance ";
    1e02:	ce 01       	movw	r24, r28
    1e04:	8d 54       	subi	r24, 0x4D	; 77
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	cf 50       	subi	r28, 0x0F	; 15
    1e0a:	df 4f       	sbci	r29, 0xFF	; 255
    1e0c:	99 83       	std	Y+1, r25	; 0x01
    1e0e:	88 83       	st	Y, r24
    1e10:	c1 5f       	subi	r28, 0xF1	; 241
    1e12:	d0 40       	sbci	r29, 0x00	; 0
    1e14:	e5 ed       	ldi	r30, 0xD5	; 213
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	cd 50       	subi	r28, 0x0D	; 13
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	f9 83       	std	Y+1, r31	; 0x01
    1e1e:	e8 83       	st	Y, r30
    1e20:	c3 5f       	subi	r28, 0xF3	; 243
    1e22:	d0 40       	sbci	r29, 0x00	; 0
    1e24:	f4 e1       	ldi	r31, 0x14	; 20
    1e26:	cb 50       	subi	r28, 0x0B	; 11
    1e28:	df 4f       	sbci	r29, 0xFF	; 255
    1e2a:	f8 83       	st	Y, r31
    1e2c:	c5 5f       	subi	r28, 0xF5	; 245
    1e2e:	d0 40       	sbci	r29, 0x00	; 0
    1e30:	cd 50       	subi	r28, 0x0D	; 13
    1e32:	df 4f       	sbci	r29, 0xFF	; 255
    1e34:	e8 81       	ld	r30, Y
    1e36:	f9 81       	ldd	r31, Y+1	; 0x01
    1e38:	c3 5f       	subi	r28, 0xF3	; 243
    1e3a:	d0 40       	sbci	r29, 0x00	; 0
    1e3c:	00 80       	ld	r0, Z
    1e3e:	cd 50       	subi	r28, 0x0D	; 13
    1e40:	df 4f       	sbci	r29, 0xFF	; 255
    1e42:	28 81       	ld	r18, Y
    1e44:	39 81       	ldd	r19, Y+1	; 0x01
    1e46:	c3 5f       	subi	r28, 0xF3	; 243
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	2f 5f       	subi	r18, 0xFF	; 255
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	cd 50       	subi	r28, 0x0D	; 13
    1e50:	df 4f       	sbci	r29, 0xFF	; 255
    1e52:	39 83       	std	Y+1, r19	; 0x01
    1e54:	28 83       	st	Y, r18
    1e56:	c3 5f       	subi	r28, 0xF3	; 243
    1e58:	d0 40       	sbci	r29, 0x00	; 0
    1e5a:	cf 50       	subi	r28, 0x0F	; 15
    1e5c:	df 4f       	sbci	r29, 0xFF	; 255
    1e5e:	e8 81       	ld	r30, Y
    1e60:	f9 81       	ldd	r31, Y+1	; 0x01
    1e62:	c1 5f       	subi	r28, 0xF1	; 241
    1e64:	d0 40       	sbci	r29, 0x00	; 0
    1e66:	00 82       	st	Z, r0
    1e68:	cf 50       	subi	r28, 0x0F	; 15
    1e6a:	df 4f       	sbci	r29, 0xFF	; 255
    1e6c:	28 81       	ld	r18, Y
    1e6e:	39 81       	ldd	r19, Y+1	; 0x01
    1e70:	c1 5f       	subi	r28, 0xF1	; 241
    1e72:	d0 40       	sbci	r29, 0x00	; 0
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	cf 50       	subi	r28, 0x0F	; 15
    1e7a:	df 4f       	sbci	r29, 0xFF	; 255
    1e7c:	39 83       	std	Y+1, r19	; 0x01
    1e7e:	28 83       	st	Y, r18
    1e80:	c1 5f       	subi	r28, 0xF1	; 241
    1e82:	d0 40       	sbci	r29, 0x00	; 0
    1e84:	cb 50       	subi	r28, 0x0B	; 11
    1e86:	df 4f       	sbci	r29, 0xFF	; 255
    1e88:	38 81       	ld	r19, Y
    1e8a:	c5 5f       	subi	r28, 0xF5	; 245
    1e8c:	d0 40       	sbci	r29, 0x00	; 0
    1e8e:	31 50       	subi	r19, 0x01	; 1
    1e90:	cb 50       	subi	r28, 0x0B	; 11
    1e92:	df 4f       	sbci	r29, 0xFF	; 255
    1e94:	38 83       	st	Y, r19
    1e96:	c5 5f       	subi	r28, 0xF5	; 245
    1e98:	d0 40       	sbci	r29, 0x00	; 0
    1e9a:	cb 50       	subi	r28, 0x0B	; 11
    1e9c:	df 4f       	sbci	r29, 0xFF	; 255
    1e9e:	88 81       	ld	r24, Y
    1ea0:	c5 5f       	subi	r28, 0xF5	; 245
    1ea2:	d0 40       	sbci	r29, 0x00	; 0
    1ea4:	88 23       	and	r24, r24
    1ea6:	21 f6       	brne	.-120    	; 0x1e30 <main+0x4da>
	u8 operationNum;
	u8 input[5];
	u8 inputMaxLen = sizeof(input)/sizeof(input[0]);
    1ea8:	85 e0       	ldi	r24, 0x05	; 5
    1eaa:	8c af       	std	Y+60, r24	; 0x3c
	u16 newBalance;

	CLCD_void_SendString(WelcomeStr);
    1eac:	ce 01       	movw	r24, r28
    1eae:	88 5b       	subi	r24, 0xB8	; 184
    1eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb2:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	af e2       	ldi	r26, 0x2F	; 47
    1ebc:	b4 e4       	ldi	r27, 0x44	; 68
    1ebe:	8d ab       	std	Y+53, r24	; 0x35
    1ec0:	9e ab       	std	Y+54, r25	; 0x36
    1ec2:	af ab       	std	Y+55, r26	; 0x37
    1ec4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec8:	7e a9       	ldd	r23, Y+54	; 0x36
    1eca:	8f a9       	ldd	r24, Y+55	; 0x37
    1ecc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a ef       	ldi	r20, 0xFA	; 250
    1ed4:	54 e4       	ldi	r21, 0x44	; 68
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	89 ab       	std	Y+49, r24	; 0x31
    1ee0:	9a ab       	std	Y+50, r25	; 0x32
    1ee2:	ab ab       	std	Y+51, r26	; 0x33
    1ee4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eea:	8b a9       	ldd	r24, Y+51	; 0x33
    1eec:	9c a9       	ldd	r25, Y+52	; 0x34
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <main+0x5b2>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <main+0x630>
	else if (__tmp > 65535)
    1f08:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <main+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6d a9       	ldd	r22, Y+53	; 0x35
    1f22:	7e a9       	ldd	r23, Y+54	; 0x36
    1f24:	8f a9       	ldd	r24, Y+55	; 0x37
    1f26:	98 ad       	ldd	r25, Y+56	; 0x38
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	98 ab       	std	Y+48, r25	; 0x30
    1f46:	8f a7       	std	Y+47, r24	; 0x2f
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <main+0x612>
    1f4a:	88 ec       	ldi	r24, 0xC8	; 200
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e a7       	std	Y+46, r25	; 0x2e
    1f50:	8d a7       	std	Y+45, r24	; 0x2d
    1f52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <main+0x600>
    1f5a:	9e a7       	std	Y+46, r25	; 0x2e
    1f5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f60:	98 a9       	ldd	r25, Y+48	; 0x30
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	98 ab       	std	Y+48, r25	; 0x30
    1f66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <main+0x5f4>
    1f70:	14 c0       	rjmp	.+40     	; 0x1f9a <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	69 a9       	ldd	r22, Y+49	; 0x31
    1f74:	7a a9       	ldd	r23, Y+50	; 0x32
    1f76:	8b a9       	ldd	r24, Y+51	; 0x33
    1f78:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	98 ab       	std	Y+48, r25	; 0x30
    1f84:	8f a7       	std	Y+47, r24	; 0x2f
    1f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f88:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8a:	9c a7       	std	Y+44, r25	; 0x2c
    1f8c:	8b a7       	std	Y+43, r24	; 0x2b
    1f8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <main+0x63c>
    1f96:	9c a7       	std	Y+44, r25	; 0x2c
    1f98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(700);
	CLCD_void_CLR();
    1f9a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>

	u8 isCorrect = CheckPassword(Password);
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	8d 5b       	subi	r24, 0xBD	; 189
    1fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <CheckPassword>
    1fa8:	89 af       	std	Y+57, r24	; 0x39
    1faa:	f8 c1       	rjmp	.+1008   	; 0x239c <main+0xa46>

	while( ~isCorrect){
		CLCD_void_CLR();
    1fac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>
		CLCD_void_SendString(OptionsStr);
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	8b 59       	subi	r24, 0x9B	; 155
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
		do{
			operationNum = KPD_u8_GetPressedKey();
    1fba:	0e 94 3f 0b 	call	0x167e	; 0x167e <KPD_u8_GetPressedKey>
    1fbe:	8d af       	std	Y+61, r24	; 0x3d
		}while(operationNum == KPD_NOT_PRESSED_KEY);
    1fc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc4:	d1 f3       	breq	.-12     	; 0x1fba <main+0x664>

		CLCD_void_CLR();
    1fc6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>

		switch(operationNum){
    1fca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fcc:	e8 2f       	mov	r30, r24
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	c4 53       	subi	r28, 0x34	; 52
    1fd2:	df 4f       	sbci	r29, 0xFF	; 255
    1fd4:	f9 83       	std	Y+1, r31	; 0x01
    1fd6:	e8 83       	st	Y, r30
    1fd8:	cc 5c       	subi	r28, 0xCC	; 204
    1fda:	d0 40       	sbci	r29, 0x00	; 0
    1fdc:	c4 53       	subi	r28, 0x34	; 52
    1fde:	df 4f       	sbci	r29, 0xFF	; 255
    1fe0:	28 81       	ld	r18, Y
    1fe2:	39 81       	ldd	r19, Y+1	; 0x01
    1fe4:	cc 5c       	subi	r28, 0xCC	; 204
    1fe6:	d0 40       	sbci	r29, 0x00	; 0
    1fe8:	22 33       	cpi	r18, 0x32	; 50
    1fea:	31 05       	cpc	r19, r1
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <main+0x69a>
    1fee:	90 c0       	rjmp	.+288    	; 0x2110 <main+0x7ba>
    1ff0:	c4 53       	subi	r28, 0x34	; 52
    1ff2:	df 4f       	sbci	r29, 0xFF	; 255
    1ff4:	88 81       	ld	r24, Y
    1ff6:	99 81       	ldd	r25, Y+1	; 0x01
    1ff8:	cc 5c       	subi	r28, 0xCC	; 204
    1ffa:	d0 40       	sbci	r29, 0x00	; 0
    1ffc:	83 33       	cpi	r24, 0x33	; 51
    1ffe:	91 05       	cpc	r25, r1
    2000:	09 f4       	brne	.+2      	; 0x2004 <main+0x6ae>
    2002:	20 c1       	rjmp	.+576    	; 0x2244 <main+0x8ee>
    2004:	c4 53       	subi	r28, 0x34	; 52
    2006:	df 4f       	sbci	r29, 0xFF	; 255
    2008:	e8 81       	ld	r30, Y
    200a:	f9 81       	ldd	r31, Y+1	; 0x01
    200c:	cc 5c       	subi	r28, 0xCC	; 204
    200e:	d0 40       	sbci	r29, 0x00	; 0
    2010:	e1 33       	cpi	r30, 0x31	; 49
    2012:	f1 05       	cpc	r31, r1
    2014:	09 f0       	breq	.+2      	; 0x2018 <main+0x6c2>
    2016:	c2 c1       	rjmp	.+900    	; 0x239c <main+0xa46>
		case '1':
			CLCD_void_SendString(BalanceStr);
    2018:	ce 01       	movw	r24, r28
    201a:	8c 57       	subi	r24, 0x7C	; 124
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
			CLCD_void_SendString(balance);
    2022:	ce 01       	movw	r24, r28
    2024:	ce 96       	adiw	r24, 0x3e	; 62
    2026:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	aa e7       	ldi	r26, 0x7A	; 122
    2030:	b4 e4       	ldi	r27, 0x44	; 68
    2032:	8f a3       	std	Y+39, r24	; 0x27
    2034:	98 a7       	std	Y+40, r25	; 0x28
    2036:	a9 a7       	std	Y+41, r26	; 0x29
    2038:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6f a1       	ldd	r22, Y+39	; 0x27
    203c:	78 a5       	ldd	r23, Y+40	; 0x28
    203e:	89 a5       	ldd	r24, Y+41	; 0x29
    2040:	9a a5       	ldd	r25, Y+42	; 0x2a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8b a3       	std	Y+35, r24	; 0x23
    2054:	9c a3       	std	Y+36, r25	; 0x24
    2056:	ad a3       	std	Y+37, r26	; 0x25
    2058:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <main+0x726>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <main+0x7a4>
	else if (__tmp > 65535)
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <main+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6f a1       	ldd	r22, Y+39	; 0x27
    2096:	78 a5       	ldd	r23, Y+40	; 0x28
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <main+0x786>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	98 a3       	std	Y+32, r25	; 0x20
    20c4:	8f 8f       	std	Y+31, r24	; 0x1f
    20c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x774>
    20ce:	98 a3       	std	Y+32, r25	; 0x20
    20d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	89 a1       	ldd	r24, Y+33	; 0x21
    20d4:	9a a1       	ldd	r25, Y+34	; 0x22
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <main+0x768>
    20e4:	5b c1       	rjmp	.+694    	; 0x239c <main+0xa46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6b a1       	ldd	r22, Y+35	; 0x23
    20e8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ea:	8d a1       	ldd	r24, Y+37	; 0x25
    20ec:	9e a1       	ldd	r25, Y+38	; 0x26
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	89 a1       	ldd	r24, Y+33	; 0x21
    20fc:	9a a1       	ldd	r25, Y+34	; 0x22
    20fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2100:	8d 8f       	std	Y+29, r24	; 0x1d
    2102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2104:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <main+0x7b0>
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	8d 8f       	std	Y+29, r24	; 0x1d
    210e:	46 c1       	rjmp	.+652    	; 0x239c <main+0xa46>
			_delay_ms(1000);
			break;
		case '2':
			CLCD_void_SendString(DepositStr);
    2110:	ce 01       	movw	r24, r28
    2112:	82 56       	subi	r24, 0x62	; 98
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
			GetNum(input, inputMaxLen);
    211a:	ce 01       	movw	r24, r28
    211c:	89 53       	subi	r24, 0x39	; 57
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	6c ad       	ldd	r22, Y+60	; 0x3c
    2122:	0e 94 70 12 	call	0x24e0	; 0x24e0 <GetNum>
			CLCD_void_CLR();
    2126:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>
			newBalance = StrToInt(balance) + StrToInt(input);
    212a:	ce 01       	movw	r24, r28
    212c:	ce 96       	adiw	r24, 0x3e	; 62
    212e:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    2132:	8c 01       	movw	r16, r24
    2134:	ce 01       	movw	r24, r28
    2136:	89 53       	subi	r24, 0x39	; 57
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    213e:	80 0f       	add	r24, r16
    2140:	91 1f       	adc	r25, r17
    2142:	9b af       	std	Y+59, r25	; 0x3b
    2144:	8a af       	std	Y+58, r24	; 0x3a
			IntToStr(newBalance, balance);
    2146:	8a ad       	ldd	r24, Y+58	; 0x3a
    2148:	9b ad       	ldd	r25, Y+59	; 0x3b
    214a:	9e 01       	movw	r18, r28
    214c:	22 5c       	subi	r18, 0xC2	; 194
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	b9 01       	movw	r22, r18
    2152:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <IntToStr>
			CLCD_void_SendString(balance);
    2156:	ce 01       	movw	r24, r28
    2158:	ce 96       	adiw	r24, 0x3e	; 62
    215a:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	aa e7       	ldi	r26, 0x7A	; 122
    2164:	b4 e4       	ldi	r27, 0x44	; 68
    2166:	89 8f       	std	Y+25, r24	; 0x19
    2168:	9a 8f       	std	Y+26, r25	; 0x1a
    216a:	ab 8f       	std	Y+27, r26	; 0x1b
    216c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	69 8d       	ldd	r22, Y+25	; 0x19
    2170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8d 8b       	std	Y+21, r24	; 0x15
    2188:	9e 8b       	std	Y+22, r25	; 0x16
    218a:	af 8b       	std	Y+23, r26	; 0x17
    218c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    218e:	6d 89       	ldd	r22, Y+21	; 0x15
    2190:	7e 89       	ldd	r23, Y+22	; 0x16
    2192:	8f 89       	ldd	r24, Y+23	; 0x17
    2194:	98 8d       	ldd	r25, Y+24	; 0x18
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <main+0x85a>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 8b       	std	Y+20, r25	; 0x14
    21ac:	8b 8b       	std	Y+19, r24	; 0x13
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <main+0x8d8>
	else if (__tmp > 65535)
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <main+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9c 8b       	std	Y+20, r25	; 0x14
    21ee:	8b 8b       	std	Y+19, r24	; 0x13
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <main+0x8ba>
    21f2:	88 ec       	ldi	r24, 0xC8	; 200
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9a 8b       	std	Y+18, r25	; 0x12
    21f8:	89 8b       	std	Y+17, r24	; 0x11
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	9a 89       	ldd	r25, Y+18	; 0x12
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <main+0x8a8>
    2202:	9a 8b       	std	Y+18, r25	; 0x12
    2204:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9c 8b       	std	Y+20, r25	; 0x14
    220e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	8b 89       	ldd	r24, Y+19	; 0x13
    2212:	9c 89       	ldd	r25, Y+20	; 0x14
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <main+0x89c>
    2218:	c1 c0       	rjmp	.+386    	; 0x239c <main+0xa46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6d 89       	ldd	r22, Y+21	; 0x15
    221c:	7e 89       	ldd	r23, Y+22	; 0x16
    221e:	8f 89       	ldd	r24, Y+23	; 0x17
    2220:	98 8d       	ldd	r25, Y+24	; 0x18
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	98 8b       	std	Y+16, r25	; 0x10
    2234:	8f 87       	std	Y+15, r24	; 0x0f
    2236:	8f 85       	ldd	r24, Y+15	; 0x0f
    2238:	98 89       	ldd	r25, Y+16	; 0x10
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <main+0x8e4>
    223e:	98 8b       	std	Y+16, r25	; 0x10
    2240:	8f 87       	std	Y+15, r24	; 0x0f
    2242:	ac c0       	rjmp	.+344    	; 0x239c <main+0xa46>
			_delay_ms(1000);
			break;
		case '3':
			CLCD_void_SendString(WithdrawStr);
    2244:	ce 01       	movw	r24, r28
    2246:	88 55       	subi	r24, 0x58	; 88
    2248:	9f 4f       	sbci	r25, 0xFF	; 255
    224a:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
			GetNum(input, inputMaxLen);
    224e:	ce 01       	movw	r24, r28
    2250:	89 53       	subi	r24, 0x39	; 57
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	6c ad       	ldd	r22, Y+60	; 0x3c
    2256:	0e 94 70 12 	call	0x24e0	; 0x24e0 <GetNum>
			if(StrToInt(balance) > StrToInt(input)){
    225a:	ce 01       	movw	r24, r28
    225c:	ce 96       	adiw	r24, 0x3e	; 62
    225e:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    2262:	8c 01       	movw	r16, r24
    2264:	ce 01       	movw	r24, r28
    2266:	89 53       	subi	r24, 0x39	; 57
    2268:	9f 4f       	sbci	r25, 0xFF	; 255
    226a:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    226e:	80 17       	cp	r24, r16
    2270:	91 07       	cpc	r25, r17
    2272:	c8 f4       	brcc	.+50     	; 0x22a6 <main+0x950>
				newBalance = StrToInt(balance) - StrToInt(input);
    2274:	ce 01       	movw	r24, r28
    2276:	ce 96       	adiw	r24, 0x3e	; 62
    2278:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    227c:	8c 01       	movw	r16, r24
    227e:	ce 01       	movw	r24, r28
    2280:	89 53       	subi	r24, 0x39	; 57
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	0e 94 b4 12 	call	0x2568	; 0x2568 <StrToInt>
    2288:	98 01       	movw	r18, r16
    228a:	28 1b       	sub	r18, r24
    228c:	39 0b       	sbc	r19, r25
    228e:	c9 01       	movw	r24, r18
    2290:	9b af       	std	Y+59, r25	; 0x3b
    2292:	8a af       	std	Y+58, r24	; 0x3a
				IntToStr(newBalance, balance);
    2294:	8a ad       	ldd	r24, Y+58	; 0x3a
    2296:	9b ad       	ldd	r25, Y+59	; 0x3b
    2298:	9e 01       	movw	r18, r28
    229a:	22 5c       	subi	r18, 0xC2	; 194
    229c:	3f 4f       	sbci	r19, 0xFF	; 255
    229e:	b9 01       	movw	r22, r18
    22a0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <IntToStr>
    22a4:	05 c0       	rjmp	.+10     	; 0x22b0 <main+0x95a>
			}
			else {
				CLCD_void_SendString(ErrMsg);
    22a6:	ce 01       	movw	r24, r28
    22a8:	8d 54       	subi	r24, 0x4D	; 77
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
			}
			CLCD_void_SendString(balance);
    22b0:	ce 01       	movw	r24, r28
    22b2:	ce 96       	adiw	r24, 0x3e	; 62
    22b4:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	aa e7       	ldi	r26, 0x7A	; 122
    22be:	b4 e4       	ldi	r27, 0x44	; 68
    22c0:	8b 87       	std	Y+11, r24	; 0x0b
    22c2:	9c 87       	std	Y+12, r25	; 0x0c
    22c4:	ad 87       	std	Y+13, r26	; 0x0d
    22c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a ef       	ldi	r20, 0xFA	; 250
    22d6:	54 e4       	ldi	r21, 0x44	; 68
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8f 83       	std	Y+7, r24	; 0x07
    22e2:	98 87       	std	Y+8, r25	; 0x08
    22e4:	a9 87       	std	Y+9, r26	; 0x09
    22e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <main+0x9b4>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <main+0xa32>
	else if (__tmp > 65535)
    230a:	6f 81       	ldd	r22, Y+7	; 0x07
    230c:	78 85       	ldd	r23, Y+8	; 0x08
    230e:	89 85       	ldd	r24, Y+9	; 0x09
    2310:	9a 85       	ldd	r25, Y+10	; 0x0a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <main+0xa1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9e 83       	std	Y+6, r25	; 0x06
    2348:	8d 83       	std	Y+5, r24	; 0x05
    234a:	0f c0       	rjmp	.+30     	; 0x236a <main+0xa14>
    234c:	88 ec       	ldi	r24, 0xC8	; 200
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <main+0xa02>
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <main+0x9f6>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <main+0xa46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6f 81       	ldd	r22, Y+7	; 0x07
    2376:	78 85       	ldd	r23, Y+8	; 0x08
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	9a 81       	ldd	r25, Y+2	; 0x02
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <main+0xa3e>
    2398:	9a 83       	std	Y+2, r25	; 0x02
    239a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(700);
	CLCD_void_CLR();

	u8 isCorrect = CheckPassword(Password);

	while( ~isCorrect){
    239c:	89 ad       	ldd	r24, Y+57	; 0x39
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	8f 3f       	cpi	r24, 0xFF	; 255
    23a6:	93 07       	cpc	r25, r19
    23a8:	09 f0       	breq	.+2      	; 0x23ac <main+0xa56>
    23aa:	00 ce       	rjmp	.-1024   	; 0x1fac <main+0x656>
			_delay_ms(1000);
			break;
		}
	}

}
    23ac:	cb 50       	subi	r28, 0x0B	; 11
    23ae:	df 4f       	sbci	r29, 0xFF	; 255
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret

000023c4 <CheckPassword>:


u8 CheckPassword(u8 * Password){
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	aa 97       	sbiw	r28, 0x2a	; 42
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	9d a3       	std	Y+37, r25	; 0x25
    23de:	8c a3       	std	Y+36, r24	; 0x24
	u8 checkPass[4];
	u8 trialNo, i, errFlag = 0;
    23e0:	19 82       	std	Y+1, r1	; 0x01
	u8 tryAgainStr[] = "Wrong password, try again: ";
    23e2:	ce 01       	movw	r24, r28
    23e4:	08 96       	adiw	r24, 0x08	; 8
    23e6:	9f a3       	std	Y+39, r25	; 0x27
    23e8:	8e a3       	std	Y+38, r24	; 0x26
    23ea:	e9 ee       	ldi	r30, 0xE9	; 233
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	f9 a7       	std	Y+41, r31	; 0x29
    23f0:	e8 a7       	std	Y+40, r30	; 0x28
    23f2:	fc e1       	ldi	r31, 0x1C	; 28
    23f4:	fa a7       	std	Y+42, r31	; 0x2a
    23f6:	e8 a5       	ldd	r30, Y+40	; 0x28
    23f8:	f9 a5       	ldd	r31, Y+41	; 0x29
    23fa:	00 80       	ld	r0, Z
    23fc:	88 a5       	ldd	r24, Y+40	; 0x28
    23fe:	99 a5       	ldd	r25, Y+41	; 0x29
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	99 a7       	std	Y+41, r25	; 0x29
    2404:	88 a7       	std	Y+40, r24	; 0x28
    2406:	ee a1       	ldd	r30, Y+38	; 0x26
    2408:	ff a1       	ldd	r31, Y+39	; 0x27
    240a:	00 82       	st	Z, r0
    240c:	8e a1       	ldd	r24, Y+38	; 0x26
    240e:	9f a1       	ldd	r25, Y+39	; 0x27
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	9f a3       	std	Y+39, r25	; 0x27
    2414:	8e a3       	std	Y+38, r24	; 0x26
    2416:	9a a5       	ldd	r25, Y+42	; 0x2a
    2418:	91 50       	subi	r25, 0x01	; 1
    241a:	9a a7       	std	Y+42, r25	; 0x2a
    241c:	ea a5       	ldd	r30, Y+42	; 0x2a
    241e:	ee 23       	and	r30, r30
    2420:	51 f7       	brne	.-44     	; 0x23f6 <CheckPassword+0x32>

	for(trialNo=0; trialNo<3; trialNo++){
    2422:	1b 82       	std	Y+3, r1	; 0x03
    2424:	4d c0       	rjmp	.+154    	; 0x24c0 <CheckPassword+0xfc>
		//get password and display it on LCD
		for(i=0; i<4; i++){
    2426:	1a 82       	std	Y+2, r1	; 0x02
    2428:	3b c0       	rjmp	.+118    	; 0x24a0 <CheckPassword+0xdc>
			do{
				checkPass[i] = KPD_u8_GetPressedKey();
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	08 2f       	mov	r16, r24
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	0e 94 3f 0b 	call	0x167e	; 0x167e <KPD_u8_GetPressedKey>
    2434:	28 2f       	mov	r18, r24
    2436:	ce 01       	movw	r24, r28
    2438:	04 96       	adiw	r24, 0x04	; 4
    243a:	fc 01       	movw	r30, r24
    243c:	e0 0f       	add	r30, r16
    243e:	f1 1f       	adc	r31, r17
    2440:	20 83       	st	Z, r18
			}while(checkPass[i] == KPD_NOT_PRESSED_KEY);
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	28 2f       	mov	r18, r24
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	ce 01       	movw	r24, r28
    244a:	04 96       	adiw	r24, 0x04	; 4
    244c:	fc 01       	movw	r30, r24
    244e:	e2 0f       	add	r30, r18
    2450:	f3 1f       	adc	r31, r19
    2452:	80 81       	ld	r24, Z
    2454:	8f 3f       	cpi	r24, 0xFF	; 255
    2456:	49 f3       	breq	.-46     	; 0x242a <CheckPassword+0x66>
			CLCD_void_SendData(checkPass[i]);
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	ce 01       	movw	r24, r28
    2460:	04 96       	adiw	r24, 0x04	; 4
    2462:	fc 01       	movw	r30, r24
    2464:	e2 0f       	add	r30, r18
    2466:	f3 1f       	adc	r31, r19
    2468:	80 81       	ld	r24, Z
    246a:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_void_SendData>
			if(checkPass[i] != Password[i]){
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	ce 01       	movw	r24, r28
    2476:	04 96       	adiw	r24, 0x04	; 4
    2478:	fc 01       	movw	r30, r24
    247a:	e2 0f       	add	r30, r18
    247c:	f3 1f       	adc	r31, r19
    247e:	40 81       	ld	r20, Z
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	8c a1       	ldd	r24, Y+36	; 0x24
    2488:	9d a1       	ldd	r25, Y+37	; 0x25
    248a:	fc 01       	movw	r30, r24
    248c:	e2 0f       	add	r30, r18
    248e:	f3 1f       	adc	r31, r19
    2490:	80 81       	ld	r24, Z
    2492:	48 17       	cp	r20, r24
    2494:	11 f0       	breq	.+4      	; 0x249a <CheckPassword+0xd6>
				errFlag = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	89 83       	std	Y+1, r24	; 0x01
	u8 trialNo, i, errFlag = 0;
	u8 tryAgainStr[] = "Wrong password, try again: ";

	for(trialNo=0; trialNo<3; trialNo++){
		//get password and display it on LCD
		for(i=0; i<4; i++){
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	10 f2       	brcs	.-124    	; 0x242a <CheckPassword+0x66>
			if(checkPass[i] != Password[i]){
				errFlag = 1;
			}
		}
		//compare passwords
		if(errFlag == 1){
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	71 f4       	brne	.+28     	; 0x24c8 <CheckPassword+0x104>
			CLCD_void_CLR();
    24ac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <CLCD_void_CLR>
			CLCD_void_SendString(tryAgainStr);
    24b0:	ce 01       	movw	r24, r28
    24b2:	08 96       	adiw	r24, 0x08	; 8
    24b4:	0e 94 77 07 	call	0xeee	; 0xeee <CLCD_void_SendString>
			errFlag = 0;
    24b8:	19 82       	std	Y+1, r1	; 0x01
u8 CheckPassword(u8 * Password){
	u8 checkPass[4];
	u8 trialNo, i, errFlag = 0;
	u8 tryAgainStr[] = "Wrong password, try again: ";

	for(trialNo=0; trialNo<3; trialNo++){
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	08 f4       	brcc	.+2      	; 0x24c8 <CheckPassword+0x104>
    24c6:	af cf       	rjmp	.-162    	; 0x2426 <CheckPassword+0x62>
		else {
			break;
		}

	}
	return errFlag;
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ca:	aa 96       	adiw	r28, 0x2a	; 42
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	08 95       	ret

000024e0 <GetNum>:

void GetNum(u8 * input, u8 inputMaxLen){
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <GetNum+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <GetNum+0x8>
    24e8:	0f 92       	push	r0
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
    24f2:	6d 83       	std	Y+5, r22	; 0x05
	u8 i;
	u8 num;
	for(i=0; i<inputMaxLen; i++){
    24f4:	1a 82       	std	Y+2, r1	; 0x02
    24f6:	2c c0       	rjmp	.+88     	; 0x2550 <GetNum+0x70>
		do{
			num = KPD_u8_GetPressedKey();
    24f8:	0e 94 3f 0b 	call	0x167e	; 0x167e <KPD_u8_GetPressedKey>
    24fc:	89 83       	std	Y+1, r24	; 0x01
		}while(num == KPD_NOT_PRESSED_KEY);
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	8f 3f       	cpi	r24, 0xFF	; 255
    2502:	d1 f3       	breq	.-12     	; 0x24f8 <GetNum+0x18>
		if(num != '='){
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	8d 33       	cpi	r24, 0x3D	; 61
    2508:	c9 f0       	breq	.+50     	; 0x253c <GetNum+0x5c>
			input[i] = num;
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	fc 01       	movw	r30, r24
    2516:	e2 0f       	add	r30, r18
    2518:	f3 1f       	adc	r31, r19
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 83       	st	Z, r24
			CLCD_void_SendData(input[i]);
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	fc 01       	movw	r30, r24
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	80 81       	ld	r24, Z
    2530:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_void_SendData>
}

void GetNum(u8 * input, u8 inputMaxLen){
	u8 i;
	u8 num;
	for(i=0; i<inputMaxLen; i++){
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	8f 5f       	subi	r24, 0xFF	; 255
    2538:	8a 83       	std	Y+2, r24	; 0x02
    253a:	0a c0       	rjmp	.+20     	; 0x2550 <GetNum+0x70>
		if(num != '='){
			input[i] = num;
			CLCD_void_SendData(input[i]);
		}
		else {
			input[i] = '\0';
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	fc 01       	movw	r30, r24
    2548:	e2 0f       	add	r30, r18
    254a:	f3 1f       	adc	r31, r19
    254c:	10 82       	st	Z, r1
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <GetNum+0x78>
}

void GetNum(u8 * input, u8 inputMaxLen){
	u8 i;
	u8 num;
	for(i=0; i<inputMaxLen; i++){
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	98 17       	cp	r25, r24
    2556:	80 f2       	brcs	.-96     	; 0x24f8 <GetNum+0x18>
			input[i] = '\0';
			break;
		}
	}

}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <StrToInt>:

u16 StrToInt(u8 * PtrToStr){
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	00 d0       	rcall	.+0      	; 0x256e <StrToInt+0x6>
    256e:	00 d0       	rcall	.+0      	; 0x2570 <StrToInt+0x8>
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9d 83       	std	Y+5, r25	; 0x05
    2578:	8c 83       	std	Y+4, r24	; 0x04
    257a:	20 c0       	rjmp	.+64     	; 0x25bc <StrToInt+0x54>
	u16 num;
	u8 i;

	while(PtrToStr[i] != '\0'){
		num = num*10 + (PtrToStr[i] - '0');
    257c:	8a 81       	ldd	r24, Y+2	; 0x02
    257e:	9b 81       	ldd	r25, Y+3	; 0x03
    2580:	9c 01       	movw	r18, r24
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	c9 01       	movw	r24, r18
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	a9 01       	movw	r20, r18
    2592:	48 0f       	add	r20, r24
    2594:	59 1f       	adc	r21, r25
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	9d 81       	ldd	r25, Y+5	; 0x05
    25a0:	fc 01       	movw	r30, r24
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	80 81       	ld	r24, Z
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	84 0f       	add	r24, r20
    25ae:	95 1f       	adc	r25, r21
    25b0:	c0 97       	sbiw	r24, 0x30	; 48
    25b2:	9b 83       	std	Y+3, r25	; 0x03
    25b4:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
    25ba:	89 83       	std	Y+1, r24	; 0x01

u16 StrToInt(u8 * PtrToStr){
	u16 num;
	u8 i;

	while(PtrToStr[i] != '\0'){
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	fc 01       	movw	r30, r24
    25c8:	e2 0f       	add	r30, r18
    25ca:	f3 1f       	adc	r31, r19
    25cc:	80 81       	ld	r24, Z
    25ce:	88 23       	and	r24, r24
    25d0:	a9 f6       	brne	.-86     	; 0x257c <StrToInt+0x14>
		num = num*10 + (PtrToStr[i] - '0');
		i++;
	}
	return num;
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <IntToStr>:

void IntToStr(u16 Copy_Int, u8 * PtrToStr){
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	28 97       	sbiw	r28, 0x08	; 8
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	78 87       	std	Y+8, r23	; 0x08
    2600:	6f 83       	std	Y+7, r22	; 0x07
	u8 i;
	u8 intLen, reverse;
	u8 num = Copy_Int;
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	09 c0       	rjmp	.+18     	; 0x261a <IntToStr+0x34>
	//get int length
	while(num>0){
		intLen++;
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	8f 5f       	subi	r24, 0xFF	; 255
    260c:	8b 83       	std	Y+3, r24	; 0x03
		num /= 10;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	9a e0       	ldi	r25, 0x0A	; 10
    2612:	69 2f       	mov	r22, r25
    2614:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodqi4>
    2618:	89 83       	std	Y+1, r24	; 0x01
void IntToStr(u16 Copy_Int, u8 * PtrToStr){
	u8 i;
	u8 intLen, reverse;
	u8 num = Copy_Int;
	//get int length
	while(num>0){
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 23       	and	r24, r24
    261e:	a1 f7       	brne	.-24     	; 0x2608 <IntToStr+0x22>
    2620:	21 c0       	rjmp	.+66     	; 0x2664 <IntToStr+0x7e>
		intLen++;
		num /= 10;
	}
	//reverse int
	while(Copy_Int != 0) {
	    reverse = reverse * 10 + Copy_Int%10;
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 01       	movw	r18, r24
    262a:	22 0f       	add	r18, r18
    262c:	33 1f       	adc	r19, r19
    262e:	c9 01       	movw	r24, r18
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	82 0f       	add	r24, r18
    263a:	93 1f       	adc	r25, r19
    263c:	48 2f       	mov	r20, r24
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	2a e0       	ldi	r18, 0x0A	; 10
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	b9 01       	movw	r22, r18
    2648:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__udivmodhi4>
    264c:	84 0f       	add	r24, r20
    264e:	8a 83       	std	Y+2, r24	; 0x02
	    Copy_Int /= 10;
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	2a e0       	ldi	r18, 0x0A	; 10
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	b9 01       	movw	r22, r18
    265a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__udivmodhi4>
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
	while(num>0){
		intLen++;
		num /= 10;
	}
	//reverse int
	while(Copy_Int != 0) {
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	d9 f6       	brne	.-74     	; 0x2622 <IntToStr+0x3c>
	    reverse = reverse * 10 + Copy_Int%10;
	    Copy_Int /= 10;
	  }
	//copy int to string
	for(i=0; i<intLen; i++){
    266c:	1c 82       	std	Y+4, r1	; 0x04
    266e:	18 c0       	rjmp	.+48     	; 0x26a0 <IntToStr+0xba>
		PtrToStr[i] =  reverse %10;
    2670:	8c 81       	ldd	r24, Y+4	; 0x04
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8f 81       	ldd	r24, Y+7	; 0x07
    2678:	98 85       	ldd	r25, Y+8	; 0x08
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	9a e0       	ldi	r25, 0x0A	; 10
    2684:	69 2f       	mov	r22, r25
    2686:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodqi4>
    268a:	89 2f       	mov	r24, r25
    268c:	80 83       	st	Z, r24
		reverse /=10;
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9a e0       	ldi	r25, 0x0A	; 10
    2692:	69 2f       	mov	r22, r25
    2694:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodqi4>
    2698:	8a 83       	std	Y+2, r24	; 0x02
	while(Copy_Int != 0) {
	    reverse = reverse * 10 + Copy_Int%10;
	    Copy_Int /= 10;
	  }
	//copy int to string
	for(i=0; i<intLen; i++){
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	8f 5f       	subi	r24, 0xFF	; 255
    269e:	8c 83       	std	Y+4, r24	; 0x04
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	98 17       	cp	r25, r24
    26a6:	20 f3       	brcs	.-56     	; 0x2670 <IntToStr+0x8a>
		PtrToStr[i] =  reverse %10;
		reverse /=10;
	}
}
    26a8:	28 96       	adiw	r28, 0x08	; 8
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <__udivmodqi4>:
    26ba:	99 1b       	sub	r25, r25
    26bc:	79 e0       	ldi	r23, 0x09	; 9
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <__udivmodqi4_ep>

000026c0 <__udivmodqi4_loop>:
    26c0:	99 1f       	adc	r25, r25
    26c2:	96 17       	cp	r25, r22
    26c4:	08 f0       	brcs	.+2      	; 0x26c8 <__udivmodqi4_ep>
    26c6:	96 1b       	sub	r25, r22

000026c8 <__udivmodqi4_ep>:
    26c8:	88 1f       	adc	r24, r24
    26ca:	7a 95       	dec	r23
    26cc:	c9 f7       	brne	.-14     	; 0x26c0 <__udivmodqi4_loop>
    26ce:	80 95       	com	r24
    26d0:	08 95       	ret

000026d2 <__udivmodhi4>:
    26d2:	aa 1b       	sub	r26, r26
    26d4:	bb 1b       	sub	r27, r27
    26d6:	51 e1       	ldi	r21, 0x11	; 17
    26d8:	07 c0       	rjmp	.+14     	; 0x26e8 <__udivmodhi4_ep>

000026da <__udivmodhi4_loop>:
    26da:	aa 1f       	adc	r26, r26
    26dc:	bb 1f       	adc	r27, r27
    26de:	a6 17       	cp	r26, r22
    26e0:	b7 07       	cpc	r27, r23
    26e2:	10 f0       	brcs	.+4      	; 0x26e8 <__udivmodhi4_ep>
    26e4:	a6 1b       	sub	r26, r22
    26e6:	b7 0b       	sbc	r27, r23

000026e8 <__udivmodhi4_ep>:
    26e8:	88 1f       	adc	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	5a 95       	dec	r21
    26ee:	a9 f7       	brne	.-22     	; 0x26da <__udivmodhi4_loop>
    26f0:	80 95       	com	r24
    26f2:	90 95       	com	r25
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	08 95       	ret

000026fa <__prologue_saves__>:
    26fa:	2f 92       	push	r2
    26fc:	3f 92       	push	r3
    26fe:	4f 92       	push	r4
    2700:	5f 92       	push	r5
    2702:	6f 92       	push	r6
    2704:	7f 92       	push	r7
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	ca 1b       	sub	r28, r26
    2724:	db 0b       	sbc	r29, r27
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	09 94       	ijmp

00002732 <__epilogue_restores__>:
    2732:	2a 88       	ldd	r2, Y+18	; 0x12
    2734:	39 88       	ldd	r3, Y+17	; 0x11
    2736:	48 88       	ldd	r4, Y+16	; 0x10
    2738:	5f 84       	ldd	r5, Y+15	; 0x0f
    273a:	6e 84       	ldd	r6, Y+14	; 0x0e
    273c:	7d 84       	ldd	r7, Y+13	; 0x0d
    273e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2740:	9b 84       	ldd	r9, Y+11	; 0x0b
    2742:	aa 84       	ldd	r10, Y+10	; 0x0a
    2744:	b9 84       	ldd	r11, Y+9	; 0x09
    2746:	c8 84       	ldd	r12, Y+8	; 0x08
    2748:	df 80       	ldd	r13, Y+7	; 0x07
    274a:	ee 80       	ldd	r14, Y+6	; 0x06
    274c:	fd 80       	ldd	r15, Y+5	; 0x05
    274e:	0c 81       	ldd	r16, Y+4	; 0x04
    2750:	1b 81       	ldd	r17, Y+3	; 0x03
    2752:	aa 81       	ldd	r26, Y+2	; 0x02
    2754:	b9 81       	ldd	r27, Y+1	; 0x01
    2756:	ce 0f       	add	r28, r30
    2758:	d1 1d       	adc	r29, r1
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	ed 01       	movw	r28, r26
    2766:	08 95       	ret

00002768 <_exit>:
    2768:	f8 94       	cli

0000276a <__stop_program>:
    276a:	ff cf       	rjmp	.-2      	; 0x276a <__stop_program>
